"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zoralabs";
exports.ids = ["vendor-chunks/@zoralabs"];
exports.modules = {

/***/ "(rsc)/./node_modules/@zoralabs/coins-sdk/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@zoralabs/coins-sdk/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CoinMetadataBuilder: () => (/* binding */ CoinMetadataBuilder),\n/* harmony export */   CreateConstants: () => (/* binding */ CreateConstants),\n/* harmony export */   ZoraUploader: () => (/* binding */ ZoraUploader),\n/* harmony export */   cleanAndValidateMetadataURI: () => (/* binding */ cleanAndValidateMetadataURI),\n/* harmony export */   createCoin: () => (/* binding */ createCoin),\n/* harmony export */   createCoinCall: () => (/* binding */ createCoinCall),\n/* harmony export */   createMetadataBuilder: () => (/* binding */ createMetadataBuilder),\n/* harmony export */   createTradeCall: () => (/* binding */ createTradeCall),\n/* harmony export */   createZoraUploaderForCreator: () => (/* binding */ createZoraUploaderForCreator),\n/* harmony export */   getCoin: () => (/* binding */ getCoin2),\n/* harmony export */   getCoinComments: () => (/* binding */ getCoinComments2),\n/* harmony export */   getCoinCreateFromLogs: () => (/* binding */ getCoinCreateFromLogs),\n/* harmony export */   getCoinHolders: () => (/* binding */ getCoinHolders2),\n/* harmony export */   getCoinSwaps: () => (/* binding */ getCoinSwaps2),\n/* harmony export */   getCoins: () => (/* binding */ getCoins2),\n/* harmony export */   getCoinsLastTraded: () => (/* binding */ getCoinsLastTraded),\n/* harmony export */   getCoinsLastTradedUnique: () => (/* binding */ getCoinsLastTradedUnique),\n/* harmony export */   getCoinsMostValuable: () => (/* binding */ getCoinsMostValuable),\n/* harmony export */   getCoinsNew: () => (/* binding */ getCoinsNew),\n/* harmony export */   getCoinsTopGainers: () => (/* binding */ getCoinsTopGainers),\n/* harmony export */   getCoinsTopVolume24h: () => (/* binding */ getCoinsTopVolume24h),\n/* harmony export */   getCreatorCoins: () => (/* binding */ getCreatorCoins),\n/* harmony export */   getMostValuableCreatorCoins: () => (/* binding */ getMostValuableCreatorCoins),\n/* harmony export */   getProfile: () => (/* binding */ getProfile2),\n/* harmony export */   getProfileBalances: () => (/* binding */ getProfileBalances2),\n/* harmony export */   getProfileCoins: () => (/* binding */ getProfileCoins2),\n/* harmony export */   getURLFromUploadResult: () => (/* binding */ getURLFromUploadResult),\n/* harmony export */   setApiKey: () => (/* binding */ setApiKey),\n/* harmony export */   tradeCoin: () => (/* binding */ tradeCoin),\n/* harmony export */   updateCoinURI: () => (/* binding */ updateCoinURI),\n/* harmony export */   updateCoinURICall: () => (/* binding */ updateCoinURICall),\n/* harmony export */   updatePayoutRecipient: () => (/* binding */ updatePayoutRecipient),\n/* harmony export */   updatePayoutRecipientCall: () => (/* binding */ updatePayoutRecipientCall),\n/* harmony export */   validateImageMimeType: () => (/* binding */ validateImageMimeType),\n/* harmony export */   validateMetadataJSON: () => (/* binding */ validateMetadataJSON),\n/* harmony export */   validateMetadataURIContent: () => (/* binding */ validateMetadataURIContent)\n/* harmony export */ });\n/* harmony import */ var _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @zoralabs/protocol-deployments */ \"(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/parseEventLogs.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/address/isAddressEqual.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_esm/chains/definitions/base.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem/chains */ \"(rsc)/./node_modules/viem/_esm/chains/definitions/baseSepolia.js\");\n/* harmony import */ var _hey_api_client_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hey-api/client-fetch */ \"(rsc)/./node_modules/@hey-api/client-fetch/dist/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/errors/base.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/errors/contract.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/decodeErrorResult.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/data/slice.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/constants/number.js\");\n// src/actions/createCoin.ts\n\n\n\n\n// src/utils/validateClientNetwork.ts\n\nvar validateClientNetwork = (publicClient) => {\n  const clientChainId = publicClient?.chain?.id;\n  if (clientChainId === viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id) {\n    return;\n  }\n  if (clientChainId === viem_chains__WEBPACK_IMPORTED_MODULE_1__.baseSepolia.id) {\n    return;\n  }\n  throw new Error(\n    \"Client network needs to be base or baseSepolia for current coin deployments.\"\n  );\n};\n\n// src/metadata/cleanAndValidateMetadataURI.ts\nfunction cleanAndValidateMetadataURI(uri) {\n  if (uri.startsWith(\"ipfs://\")) {\n    return uri.replace(\n      \"ipfs://\",\n      \"https://magic.decentralized-content.com/ipfs/\"\n    );\n  }\n  if (uri.startsWith(\"ar://\")) {\n    return uri.replace(\"ar://\", \"http://arweave.net/\");\n  }\n  if (uri.startsWith(\"data:\")) {\n    return uri;\n  }\n  if (uri.startsWith(\"http://\") || uri.startsWith(\"https://\")) {\n    return uri;\n  }\n  throw new Error(\"Invalid metadata URI\");\n}\n\n// src/metadata/validateMetadataJSON.ts\nfunction validateURIString(uri) {\n  if (typeof uri !== \"string\") {\n    throw new Error(\"URI must be a string\");\n  }\n  if (uri.startsWith(\"ipfs://\")) {\n    return true;\n  }\n  if (uri.startsWith(\"ar://\")) {\n    return true;\n  }\n  if (uri.startsWith(\"https://\")) {\n    return true;\n  }\n  if (uri.startsWith(\"data:\")) {\n    return true;\n  }\n  return false;\n}\nfunction validateMetadataJSON(metadata) {\n  if (typeof metadata !== \"object\" || !metadata) {\n    throw new Error(\"Metadata must be an object and exist\");\n  }\n  if (typeof metadata.name !== \"string\") {\n    throw new Error(\"Metadata name is required and must be a string\");\n  }\n  if (typeof metadata.description !== \"string\") {\n    throw new Error(\"Metadata description is required and must be a string\");\n  }\n  if (typeof metadata.image === \"string\") {\n    if (!validateURIString(metadata.image)) {\n      throw new Error(\"Metadata image is not a valid URI\");\n    }\n  } else {\n    throw new Error(\"Metadata image is required and must be a string\");\n  }\n  if (\"animation_url\" in metadata) {\n    if (typeof metadata.animation_url !== \"string\") {\n      throw new Error(\"Metadata animation_url, if provided, must be a string\");\n    }\n    if (!validateURIString(metadata.animation_url)) {\n      throw new Error(\"Metadata animation_url is not a valid URI\");\n    }\n  }\n  const content = \"content\" in metadata && metadata.content;\n  if (content) {\n    if (typeof content.uri !== \"string\") {\n      throw new Error(\"If provided, content.uri must be a string\");\n    }\n    if (!validateURIString(content.uri)) {\n      throw new Error(\"If provided, content.uri must be a valid URI string\");\n    }\n    if (typeof content.mime !== \"string\") {\n      throw new Error(\"If provided, content.mime must be a string\");\n    }\n  }\n  return true;\n}\n\n// src/metadata/validateMetadataURIContent.ts\nasync function validateMetadataURIContent(metadataURI) {\n  const cleanedURI = cleanAndValidateMetadataURI(metadataURI);\n  const response = await fetch(cleanedURI);\n  if (!response.ok) {\n    throw new Error(\"Metadata fetch failed\");\n  }\n  if (![\"application/json\", \"text/plain\"].includes(\n    response.headers.get(\"content-type\") ?? \"\"\n  )) {\n    throw new Error(\"Metadata is not a valid JSON or plain text response type\");\n  }\n  const metadataJson = await response.json();\n  return validateMetadataJSON(metadataJson);\n}\n\n// src/utils/getChainFromId.ts\n\nfunction getChainFromId(chainId) {\n  if (chainId === viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id) {\n    return viem_chains__WEBPACK_IMPORTED_MODULE_0__.base;\n  }\n  if (chainId === viem_chains__WEBPACK_IMPORTED_MODULE_1__.baseSepolia.id) {\n    return viem_chains__WEBPACK_IMPORTED_MODULE_1__.baseSepolia;\n  }\n  throw new Error(`Chain ID ${chainId} not supported`);\n}\n\n// src/client/client.gen.ts\n\nvar client = (0,_hey_api_client_fetch__WEBPACK_IMPORTED_MODULE_2__.createClient)(\n  (0,_hey_api_client_fetch__WEBPACK_IMPORTED_MODULE_2__.createConfig)({\n    baseUrl: \"https://api-sdk.zora.engineering/\"\n  })\n);\n\n// src/client/sdk.gen.ts\nvar getCoin = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coin\",\n    ...options\n  });\n};\nvar getCoinComments = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coinComments\",\n    ...options\n  });\n};\nvar getCoinHolders = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coinHolders\",\n    ...options\n  });\n};\nvar getCoinSwaps = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coinSwaps\",\n    ...options\n  });\n};\nvar getCoins = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coins\",\n    ...options\n  });\n};\nvar setCreateUploadJwt = (options) => {\n  return (options?.client ?? client).post({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/createUploadJWT\",\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers\n    }\n  });\n};\nvar getExplore = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/explore\",\n    ...options\n  });\n};\nvar getProfile = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/profile\",\n    ...options\n  });\n};\nvar getProfileBalances = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/profileBalances\",\n    ...options\n  });\n};\nvar getProfileCoins = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/profileCoins\",\n    ...options\n  });\n};\nvar postQuote = (options) => {\n  return (options?.client ?? client).post({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/quote\",\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers\n    }\n  });\n};\nvar postCreateContent = (options) => {\n  return (options?.client ?? client).post({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/create/content\",\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers\n    }\n  });\n};\n\n// src/api/api-key.ts\nvar apiKey;\nfunction setApiKey(key) {\n  apiKey = key;\n}\nfunction getApiKey() {\n  return apiKey;\n}\nfunction getApiKeyMeta() {\n  if (!apiKey) {\n    return {};\n  }\n  return {\n    headers: {\n      \"api-key\": apiKey\n    }\n  };\n}\n\n// src/api/explore.ts\nvar createExploreQuery = (query, listType, options) => getExplore({\n  ...options,\n  query: { ...query, listType },\n  ...getApiKeyMeta()\n});\nvar getCoinsTopGainers = (query = {}, options) => createExploreQuery(query, \"TOP_GAINERS\", options);\nvar getCoinsTopVolume24h = (query = {}, options) => createExploreQuery(query, \"TOP_VOLUME_24H\", options);\nvar getCoinsMostValuable = (query = {}, options) => createExploreQuery(query, \"MOST_VALUABLE\", options);\nvar getCoinsNew = (query = {}, options) => createExploreQuery(query, \"NEW\", options);\nvar getCoinsLastTraded = (query = {}, options) => createExploreQuery(query, \"LAST_TRADED\", options);\nvar getCoinsLastTradedUnique = (query = {}, options) => createExploreQuery(query, \"LAST_TRADED_UNIQUE\", options);\nvar getCreatorCoins = (query = {}, options) => createExploreQuery(query, \"NEW_CREATORS\", options);\nvar getMostValuableCreatorCoins = (query = {}, options) => createExploreQuery(query, \"MOST_VALUABLE_CREATORS\", options);\n\n// src/api/queries.ts\nvar getCoin2 = async (query, options) => {\n  return await getCoin({\n    ...options,\n    query,\n    ...getApiKeyMeta()\n  });\n};\nvar getCoins2 = async (query, options) => {\n  return await getCoins({\n    query: {\n      coins: query.coins.map((coinData) => JSON.stringify(coinData))\n    },\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getCoinHolders2 = async (query, options) => {\n  return await getCoinHolders({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getCoinSwaps2 = async (query, options) => {\n  return await getCoinSwaps({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getCoinComments2 = async (query, options) => {\n  return await getCoinComments({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getProfile2 = async (query, options) => {\n  return await getProfile({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getProfileCoins2 = async (query, options) => {\n  return await getProfileCoins({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getProfileBalances2 = async (query, options) => {\n  return await getProfileBalances({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\n\n// src/api/create.ts\nvar postCreateContent2 = async (body, options) => {\n  return await postCreateContent({\n    ...options,\n    body,\n    ...getApiKeyMeta()\n  });\n};\n\n// src/utils/rethrowDecodedRevert.ts\n\nfunction rethrowDecodedRevert(err, abi) {\n  if (err instanceof viem__WEBPACK_IMPORTED_MODULE_3__.BaseError) {\n    const revertError = err.walk(\n      (e) => e instanceof viem__WEBPACK_IMPORTED_MODULE_4__.ContractFunctionRevertedError\n    );\n    if (revertError instanceof viem__WEBPACK_IMPORTED_MODULE_4__.ContractFunctionRevertedError) {\n      try {\n        const revertData = typeof revertError.data === \"object\" && revertError.data !== null && \"data\" in revertError.data ? revertError.data.data : revertError.data;\n        const decoded = (0,viem__WEBPACK_IMPORTED_MODULE_5__.decodeErrorResult)({\n          abi,\n          data: revertData\n        });\n        const name = decoded.errorName;\n        const args = decoded.args;\n        const message = Array.isArray(args) && args.length > 0 ? `${name}(${args.map((a) => String(a)).join(\", \")})` : name;\n        throw new Error(`Create coin transaction reverted: ${message}`);\n      } catch {\n        const errorName = revertError.data?.errorName;\n        if (errorName) {\n          const args = revertError.data?.args;\n          const message = Array.isArray(args) && args.length > 0 ? `${errorName}(${args.map((a) => String(a)).join(\", \")})` : errorName;\n          throw new Error(`Create coin transaction reverted: ${message}`);\n        }\n      }\n    }\n  }\n  throw err;\n}\n\n// src/actions/createCoin.ts\nvar STARTING_MARKET_CAPS = {\n  LOW: \"LOW\",\n  HIGH: \"HIGH\"\n};\nvar CONTENT_COIN_CURRENCIES = {\n  CREATOR_COIN: \"CREATOR_COIN\",\n  ZORA: \"ZORA\",\n  ETH: \"ETH\",\n  CREATOR_COIN_OR_ZORA: \"CREATOR_COIN_OR_ZORA\"\n};\nvar CreateConstants = {\n  StartingMarketCaps: STARTING_MARKET_CAPS,\n  ContentCoinCurrencies: CONTENT_COIN_CURRENCIES\n};\nasync function createCoinCall({\n  creator,\n  name,\n  symbol,\n  metadata,\n  currency,\n  chainId = viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id,\n  payoutRecipientOverride,\n  additionalOwners,\n  platformReferrer,\n  skipMetadataValidation = false\n}) {\n  if (!skipMetadataValidation) {\n    await validateMetadataURIContent(metadata.uri);\n  }\n  const createContentRequest = await postCreateContent2({\n    currency,\n    chainId,\n    metadata,\n    creator,\n    name,\n    symbol,\n    platformReferrer,\n    additionalOwners,\n    payoutRecipientOverride\n  });\n  if (!createContentRequest.data?.calls) {\n    throw new Error(\"Failed to create content calldata\");\n  }\n  return createContentRequest.data.calls.map((data) => ({\n    to: data.to,\n    data: data.data,\n    value: BigInt(data.value)\n  }));\n}\nfunction getCoinCreateFromLogs(receipt) {\n  const eventLogs = (0,viem__WEBPACK_IMPORTED_MODULE_6__.parseEventLogs)({\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinFactoryABI,\n    logs: receipt.logs\n  });\n  return eventLogs.find((log) => log.eventName === \"CoinCreatedV4\")?.args;\n}\nasync function createCoin({\n  call,\n  walletClient,\n  publicClient,\n  options\n}) {\n  validateClientNetwork(publicClient);\n  const callRequest = await createCoinCall(call);\n  if (callRequest.length !== 1) {\n    throw new Error(\"Only one call is supported for this SDK version\");\n  }\n  const createContentCall = callRequest[0];\n  if (!createContentCall) {\n    throw new Error(\"Failed to load create content calldata from API\");\n  }\n  const coinFactoryAddressForChain = _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinFactoryAddress[call.chainId];\n  if (!(0,viem__WEBPACK_IMPORTED_MODULE_8__.isAddressEqual)(createContentCall.to, coinFactoryAddressForChain)) {\n    throw new Error(\"Creator coin is not supported for this SDK version\");\n  }\n  if (createContentCall.value !== 0n) {\n    throw new Error(\n      \"Creator coin and purchase is not supported for this SDK version.\"\n    );\n  }\n  const selectedAccount = (typeof options?.account === \"string\" ? void 0 : options?.account) ?? walletClient.account;\n  if (!selectedAccount) {\n    throw new Error(\"Account is required\");\n  }\n  const viemCall = {\n    ...createContentCall,\n    account: selectedAccount\n  };\n  if (!options?.skipValidateTransaction) {\n    try {\n      await publicClient.call(viemCall);\n    } catch (err) {\n      rethrowDecodedRevert(err, _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinFactoryABI);\n    }\n  }\n  const gasEstimate = options?.skipValidateTransaction ? 10000000n : await publicClient.estimateGas(viemCall);\n  const gasPrice = await publicClient.getGasPrice();\n  const hash = await (async () => {\n    try {\n      return await walletClient.sendTransaction({\n        ...viemCall,\n        gasPrice,\n        gas: gasEstimate,\n        chain: publicClient.chain\n      });\n    } catch (err) {\n      rethrowDecodedRevert(err, _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinFactoryABI);\n    }\n  })();\n  const receipt = await publicClient.waitForTransactionReceipt({\n    hash\n  });\n  const deployment = getCoinCreateFromLogs(receipt);\n  return {\n    hash,\n    receipt,\n    address: deployment?.coin,\n    deployment,\n    chain: getChainFromId(publicClient.chain.id)\n  };\n}\n\n// src/actions/updateCoinURI.ts\n\n\n\n// src/utils/attribution.ts\n\nfunction getAttribution() {\n  const hash = (0,viem__WEBPACK_IMPORTED_MODULE_9__.keccak256)((0,viem__WEBPACK_IMPORTED_MODULE_10__.toHex)(\"api-sdk.zora.engineering\"));\n  return (0,viem__WEBPACK_IMPORTED_MODULE_11__.slice)(hash, 0, 4);\n}\n\n// src/actions/updateCoinURI.ts\nfunction updateCoinURICall({\n  newURI,\n  coin\n}) {\n  if (!newURI.startsWith(\"ipfs://\")) {\n    throw new Error(\"URI needs to be an ipfs:// prefix uri\");\n  }\n  return {\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinABI,\n    address: coin,\n    functionName: \"setContractURI\",\n    args: [newURI],\n    dataSuffix: getAttribution()\n  };\n}\nasync function updateCoinURI(args, walletClient, publicClient) {\n  validateClientNetwork(publicClient);\n  const call = updateCoinURICall(args);\n  const { request } = await publicClient.simulateContract({\n    ...call,\n    account: walletClient.account\n  });\n  const hash = await walletClient.writeContract(request);\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n  const eventLogs = (0,viem__WEBPACK_IMPORTED_MODULE_6__.parseEventLogs)({ abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinABI, logs: receipt.logs });\n  const uriUpdated = eventLogs.find(\n    (log) => log.eventName === \"ContractURIUpdated\"\n  );\n  return { hash, receipt, uriUpdated };\n}\n\n// src/actions/updatePayoutRecipient.ts\n\n\nfunction updatePayoutRecipientCall({\n  newPayoutRecipient,\n  coin\n}) {\n  return {\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinABI,\n    address: coin,\n    functionName: \"setPayoutRecipient\",\n    args: [newPayoutRecipient],\n    dataSuffix: getAttribution()\n  };\n}\nasync function updatePayoutRecipient(args, walletClient, publicClient) {\n  validateClientNetwork(publicClient);\n  const call = updatePayoutRecipientCall(args);\n  const { request } = await publicClient.simulateContract({\n    ...call,\n    account: walletClient.account\n  });\n  const hash = await walletClient.writeContract(request);\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n  const eventLogs = (0,viem__WEBPACK_IMPORTED_MODULE_6__.parseEventLogs)({ abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.coinABI, logs: receipt.logs });\n  const payoutRecipientUpdated = eventLogs.find(\n    (log) => log.eventName === \"CoinPayoutRecipientUpdated\"\n  );\n  return { hash, receipt, payoutRecipientUpdated };\n}\n\n// src/actions/tradeCoin.ts\n\n\n\nfunction convertBigIntToString(permit) {\n  return {\n    ...permit,\n    details: {\n      ...permit.details,\n      amount: `${permit.details.amount}`\n    },\n    sigDeadline: `${permit.sigDeadline}`\n  };\n}\nvar PERMIT_SINGLE_TYPES = {\n  PermitSingle: [\n    { name: \"details\", type: \"PermitDetails\" },\n    { name: \"spender\", type: \"address\" },\n    { name: \"sigDeadline\", type: \"uint256\" }\n  ],\n  PermitDetails: [\n    { name: \"token\", type: \"address\" },\n    { name: \"amount\", type: \"uint160\" },\n    { name: \"expiration\", type: \"uint48\" },\n    { name: \"nonce\", type: \"uint48\" }\n  ]\n};\nasync function tradeCoin({\n  tradeParameters,\n  walletClient,\n  account,\n  publicClient,\n  validateTransaction = true\n}) {\n  const quote = await createTradeCall(tradeParameters);\n  if (!account) {\n    account = walletClient.account;\n  }\n  if (!account) {\n    throw new Error(\"Account is required\");\n  }\n  if (!tradeParameters.recipient) {\n    tradeParameters.recipient = typeof account === \"string\" ? account : account.address;\n  }\n  const signatures = [];\n  if (quote.permits) {\n    for (const permit of quote.permits) {\n      const [, , nonce] = await publicClient.readContract({\n        abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.permit2ABI,\n        address: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id],\n        functionName: \"allowance\",\n        args: [\n          permit.permit.details.token,\n          typeof account === \"string\" ? account : account.address,\n          permit.permit.spender\n        ]\n      });\n      const permitToken = permit.permit.details.token;\n      const allowance = await publicClient.readContract({\n        abi: viem__WEBPACK_IMPORTED_MODULE_12__.erc20Abi,\n        address: permitToken,\n        functionName: \"allowance\",\n        args: [\n          typeof account === \"string\" ? account : account.address,\n          _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id]\n        ]\n      });\n      if (allowance < BigInt(permit.permit.details.amount)) {\n        const approvalTx = await walletClient.writeContract({\n          abi: viem__WEBPACK_IMPORTED_MODULE_12__.erc20Abi,\n          address: permitToken,\n          functionName: \"approve\",\n          chain: viem_chains__WEBPACK_IMPORTED_MODULE_0__.base,\n          args: [_zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id], viem__WEBPACK_IMPORTED_MODULE_13__.maxUint256],\n          account\n        });\n        await publicClient.waitForTransactionReceipt({\n          hash: approvalTx\n        });\n      }\n      const message = {\n        details: {\n          token: permit.permit.details.token,\n          amount: BigInt(permit.permit.details.amount),\n          expiration: Number(permit.permit.details.expiration),\n          nonce\n        },\n        spender: permit.permit.spender,\n        sigDeadline: BigInt(permit.permit.sigDeadline)\n      };\n      const signature = await walletClient.signTypedData({\n        domain: {\n          name: \"Permit2\",\n          chainId: viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id,\n          verifyingContract: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_7__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id]\n        },\n        primaryType: \"PermitSingle\",\n        types: PERMIT_SINGLE_TYPES,\n        message,\n        account: typeof account === \"string\" ? account : account.address\n      });\n      signatures.push({\n        signature,\n        permit: convertBigIntToString(message)\n      });\n    }\n  }\n  const newQuote = await createTradeCall({\n    ...tradeParameters,\n    signatures\n  });\n  const call = {\n    to: newQuote.call.target,\n    data: newQuote.call.data,\n    value: BigInt(newQuote.call.value),\n    chain: viem_chains__WEBPACK_IMPORTED_MODULE_0__.base,\n    account\n  };\n  if (validateTransaction) {\n    await publicClient.call(call);\n  }\n  const gasEstimate = validateTransaction ? await publicClient.estimateGas(call) : 10000000n;\n  const gasPrice = await publicClient.getGasPrice();\n  const tx = await walletClient.sendTransaction({\n    ...call,\n    gasPrice,\n    gas: gasEstimate\n  });\n  const receipt = await publicClient.waitForTransactionReceipt({\n    hash: tx\n  });\n  return receipt;\n}\nasync function createTradeCall(tradeParameters) {\n  if (tradeParameters.slippage && tradeParameters.slippage > 1) {\n    throw new Error(\"Slippage must be less than 1, max 0.99\");\n  }\n  if (tradeParameters.amountIn === BigInt(0)) {\n    throw new Error(\"Amount in must be greater than 0\");\n  }\n  const quote = await postQuote({\n    body: {\n      tokenIn: tradeParameters.sell,\n      tokenOut: tradeParameters.buy,\n      amountIn: tradeParameters.amountIn.toString(),\n      slippage: tradeParameters.slippage,\n      chainId: viem_chains__WEBPACK_IMPORTED_MODULE_0__.base.id,\n      sender: tradeParameters.sender,\n      recipient: tradeParameters.recipient || tradeParameters.sender,\n      signatures: tradeParameters.signatures\n    }\n  });\n  if (!quote.data) {\n    console.error(quote);\n    throw new Error(\"Quote failed\");\n  }\n  return quote.data;\n}\n\n// src/uploader/metadata.ts\nfunction validateImageMimeType(mimeType) {\n  if (![\n    \"image/png\",\n    \"image/jpeg\",\n    \"image/jpg\",\n    \"image/gif\",\n    \"image/svg+xml\"\n  ].includes(mimeType)) {\n    throw new Error(\"Image must be a PNG, JPEG, JPG, GIF or SVG\");\n  }\n}\nfunction getURLFromUploadResult(uploadResult) {\n  return new URL(uploadResult.url);\n}\nvar CoinMetadataBuilder = class {\n  withName(name) {\n    this.name = name;\n    if (typeof name !== \"string\") {\n      throw new Error(\"Name must be a string\");\n    }\n    return this;\n  }\n  withSymbol(symbol) {\n    this.symbol = symbol;\n    if (typeof symbol !== \"string\") {\n      throw new Error(\"Symbol must be a string\");\n    }\n    return this;\n  }\n  withDescription(description) {\n    this.description = description;\n    if (typeof description !== \"string\") {\n      throw new Error(\"Description must be a string\");\n    }\n    return this;\n  }\n  withImage(image) {\n    if (this.imageURL) {\n      throw new Error(\"Image URL already set\");\n    }\n    if (!(image instanceof File)) {\n      throw new Error(\"Image must be a File\");\n    }\n    validateImageMimeType(image.type);\n    this.imageFile = image;\n    return this;\n  }\n  withImageURI(imageURI) {\n    if (this.imageFile) {\n      throw new Error(\"Image file already set\");\n    }\n    if (typeof imageURI !== \"string\") {\n      throw new Error(\"Image URI must be a string\");\n    }\n    const url = new URL(imageURI);\n    this.imageURL = url;\n    return this;\n  }\n  withProperties(properties) {\n    for (const [key, value] of Object.entries(properties)) {\n      if (typeof key !== \"string\") {\n        throw new Error(\"Property key must be a string\");\n      }\n      if (typeof value !== \"string\") {\n        throw new Error(\"Property value must be a string\");\n      }\n    }\n    if (!this.properties) {\n      this.properties = {};\n    }\n    this.properties = { ...this.properties, ...properties };\n    return this;\n  }\n  withMedia(media) {\n    if (this.mediaURL) {\n      throw new Error(\"Media URL already set\");\n    }\n    if (!(media instanceof File)) {\n      throw new Error(\"Media must be a File\");\n    }\n    this.mediaMimeType = media.type;\n    this.mediaFile = media;\n    return this;\n  }\n  withMediaURI(mediaURI, mediaMimeType) {\n    if (this.mediaFile) {\n      throw new Error(\"Media file already set\");\n    }\n    if (typeof mediaURI !== \"string\") {\n      throw new Error(\"Media URI must be a string\");\n    }\n    const url = new URL(mediaURI);\n    this.mediaURL = url;\n    this.mediaMimeType = mediaMimeType;\n    return this;\n  }\n  validate() {\n    if (!this.name) {\n      throw new Error(\"Name is required\");\n    }\n    if (!this.symbol) {\n      throw new Error(\"Symbol is required\");\n    }\n    if (!this.imageFile && !this.imageURL) {\n      throw new Error(\"Image is required\");\n    }\n    return this;\n  }\n  generateMetadata() {\n    return {\n      name: this.name,\n      symbol: this.symbol,\n      description: this.description,\n      image: this.imageURL.toString(),\n      animation_url: this.mediaURL?.toString(),\n      content: this.mediaURL ? {\n        uri: this.mediaURL?.toString(),\n        mime: this.mediaMimeType\n      } : void 0,\n      properties: this.properties\n    };\n  }\n  async upload(uploader) {\n    this.validate();\n    if (this.imageFile) {\n      const uploadResult2 = await uploader.upload(this.imageFile);\n      this.imageURL = getURLFromUploadResult(uploadResult2);\n    }\n    if (this.mediaFile) {\n      const uploadResult2 = await uploader.upload(this.mediaFile);\n      this.mediaURL = getURLFromUploadResult(uploadResult2);\n    }\n    const metadata = this.generateMetadata();\n    const uploadResult = await uploader.upload(\n      new File([JSON.stringify(metadata)], \"metadata.json\", {\n        type: \"application/json\"\n      })\n    );\n    return {\n      url: getURLFromUploadResult(uploadResult).toString(),\n      createMetadataParameters: {\n        name: this.name,\n        symbol: this.symbol,\n        metadata: {\n          type: \"RAW_URI\",\n          uri: uploadResult.url\n        }\n      },\n      metadata\n    };\n  }\n};\nfunction createMetadataBuilder() {\n  return new CoinMetadataBuilder();\n}\n\n// src/api/internal.ts\nvar setCreateUploadJwt2 = async (body, options) => {\n  return await setCreateUploadJwt({\n    body,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\n\n// src/uploader/providers/zora.ts\nvar ZoraUploader = class {\n  constructor(creatorAddress) {\n    this.creatorAddress = creatorAddress;\n    if (!getApiKey()) {\n      throw new Error(\"API key is required for metadata interactions\");\n    }\n  }\n  async getJWTApiKey() {\n    if (this.jwtApiKey && this.jwtApiKeyExpiresAt && this.jwtApiKeyExpiresAt > Date.now()) {\n      return this.jwtApiKey;\n    }\n    this.jwtApiKeyExpiresAt = Date.now() + 1e3 * 60 * 60;\n    const response = await setCreateUploadJwt2({\n      creatorAddress: this.creatorAddress\n    });\n    this.jwtApiKey = response.data?.createUploadJwtFromApiKey;\n    if (!this.jwtApiKey) {\n      throw new Error(\"Failed to create upload JWT\");\n    }\n    return this.jwtApiKey;\n  }\n  async upload(file) {\n    const jwtApiKey = await this.getJWTApiKey();\n    const formData = new FormData();\n    formData.append(\"file\", file, file.name);\n    const response = await fetch(\n      \"https://ipfs-uploader.zora.co/api/v0/add?cid-version=1\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${jwtApiKey}`,\n          Accept: \"*/*\"\n        },\n        body: formData\n      }\n    );\n    if (!response.ok) {\n      console.error(await response.text());\n      throw new Error(`Failed to upload file: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      url: `ipfs://${data.cid}`,\n      size: data.size,\n      mimeType: data.mimeType\n    };\n  }\n};\nfunction createZoraUploaderForCreator(creatorAddress) {\n  return new ZoraUploader(creatorAddress);\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zoralabs/coins-sdk/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/ccip-C5WONSSK.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@zoralabs/protocol-deployments/dist/ccip-C5WONSSK.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ccipRequest: () => (/* reexport safe */ _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.ccipRequest),\n/* harmony export */   offchainLookup: () => (/* reexport safe */ _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.offchainLookup),\n/* harmony export */   offchainLookupAbiItem: () => (/* reexport safe */ _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.offchainLookupAbiItem),\n/* harmony export */   offchainLookupSignature: () => (/* reexport safe */ _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.offchainLookupSignature)\n/* harmony export */ });\n/* harmony import */ var _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-NPNNGXR4.js */ \"(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-NPNNGXR4.js\");\n\n\n\n//# sourceMappingURL=ccip-C5WONSSK.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHpvcmFsYWJzL3Byb3RvY29sLWRlcGxveW1lbnRzL2Rpc3QvY2NpcC1DNVdPTlNTSy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUs2QjtBQUNBO0FBTTNCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnFsZS93ZWIzcmV2aWV3ZXIvZGVtb3MvYmFzZS1hcHAtY29pbnMvbm9kZV9tb2R1bGVzL0B6b3JhbGFicy9wcm90b2NvbC1kZXBsb3ltZW50cy9kaXN0L2NjaXAtQzVXT05TU0suanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY2NpcFJlcXVlc3QsXG4gIG9mZmNoYWluTG9va3VwLFxuICBvZmZjaGFpbkxvb2t1cEFiaUl0ZW0sXG4gIG9mZmNoYWluTG9va3VwU2lnbmF0dXJlXG59IGZyb20gXCIuL2NodW5rLU5QTk5HWFI0LmpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLVBSNFFONUhYLmpzXCI7XG5leHBvcnQge1xuICBjY2lwUmVxdWVzdCxcbiAgb2ZmY2hhaW5Mb29rdXAsXG4gIG9mZmNoYWluTG9va3VwQWJpSXRlbSxcbiAgb2ZmY2hhaW5Mb29rdXBTaWduYXR1cmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jY2lwLUM1V09OU1NLLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/ccip-C5WONSSK.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-NPNNGXR4.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@zoralabs/protocol-deployments/dist/chunk-NPNNGXR4.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError2),\n/* harmony export */   ccipRequest: () => (/* binding */ ccipRequest),\n/* harmony export */   decodeAbiParameters: () => (/* binding */ decodeAbiParameters),\n/* harmony export */   encodeAbiParameters: () => (/* binding */ encodeAbiParameters),\n/* harmony export */   encodeFunctionData: () => (/* binding */ encodeFunctionData),\n/* harmony export */   etherUnits: () => (/* binding */ etherUnits),\n/* harmony export */   getAbiItem: () => (/* binding */ getAbiItem),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   offchainLookup: () => (/* binding */ offchainLookup),\n/* harmony export */   offchainLookupAbiItem: () => (/* binding */ offchainLookupAbiItem),\n/* harmony export */   offchainLookupSignature: () => (/* binding */ offchainLookupSignature),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/version.js\nvar version = \"1.0.7\";\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/errors.js\nvar BaseError = class _BaseError extends Error {\n  constructor(shortMessage, args = {}) {\n    const details = args.cause instanceof _BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;\n    const docsPath4 = args.cause instanceof _BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\n    const message = [\n      shortMessage || \"An error occurred.\",\n      \"\",\n      ...args.metaMessages ? [...args.metaMessages, \"\"] : [],\n      ...docsPath4 ? [`Docs: https://abitype.dev${docsPath4}`] : [],\n      ...details ? [`Details: ${details}`] : [],\n      `Version: abitype@${version}`\n    ].join(\"\\n\");\n    super(message);\n    Object.defineProperty(this, \"details\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"docsPath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"metaMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"shortMessage\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AbiTypeError\"\n    });\n    if (args.cause)\n      this.cause = args.cause;\n    this.details = details;\n    this.docsPath = docsPath4;\n    this.metaMessages = args.metaMessages;\n    this.shortMessage = shortMessage;\n  }\n};\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/regex.js\nfunction execTyped(regex, string) {\n  const match = regex.exec(string);\n  return match?.groups;\n}\nvar bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\nvar integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nvar isTupleRegex = /^\\(.+?\\).*?$/;\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js\nvar tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/;\nfunction formatAbiParameter(abiParameter) {\n  let type = abiParameter.type;\n  if (tupleRegex.test(abiParameter.type) && \"components\" in abiParameter) {\n    type = \"(\";\n    const length = abiParameter.components.length;\n    for (let i = 0; i < length; i++) {\n      const component = abiParameter.components[i];\n      type += formatAbiParameter(component);\n      if (i < length - 1)\n        type += \", \";\n    }\n    const result = execTyped(tupleRegex, abiParameter.type);\n    type += `)${result?.array ?? \"\"}`;\n    return formatAbiParameter({\n      ...abiParameter,\n      type\n    });\n  }\n  if (\"indexed\" in abiParameter && abiParameter.indexed)\n    type = `${type} indexed`;\n  if (abiParameter.name)\n    return `${type} ${abiParameter.name}`;\n  return type;\n}\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js\nfunction formatAbiParameters(abiParameters) {\n  let params = \"\";\n  const length = abiParameters.length;\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i];\n    params += formatAbiParameter(abiParameter);\n    if (i !== length - 1)\n      params += \", \";\n  }\n  return params;\n}\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/formatAbiItem.js\nfunction formatAbiItem(abiItem) {\n  if (abiItem.type === \"function\")\n    return `function ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== \"nonpayable\" ? ` ${abiItem.stateMutability}` : \"\"}${abiItem.outputs?.length ? ` returns (${formatAbiParameters(abiItem.outputs)})` : \"\"}`;\n  if (abiItem.type === \"event\")\n    return `event ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\n  if (abiItem.type === \"error\")\n    return `error ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\n  if (abiItem.type === \"constructor\")\n    return `constructor(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\n  if (abiItem.type === \"fallback\")\n    return `fallback() external${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\n  return \"receive() external payable\";\n}\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/runtime/signatures.js\nvar errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/;\nfunction isErrorSignature(signature) {\n  return errorSignatureRegex.test(signature);\n}\nfunction execErrorSignature(signature) {\n  return execTyped(errorSignatureRegex, signature);\n}\nvar eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/;\nfunction isEventSignature(signature) {\n  return eventSignatureRegex.test(signature);\n}\nfunction execEventSignature(signature) {\n  return execTyped(eventSignatureRegex, signature);\n}\nvar functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\\s?\\((?<returns>.*?)\\))?$/;\nfunction isFunctionSignature(signature) {\n  return functionSignatureRegex.test(signature);\n}\nfunction execFunctionSignature(signature) {\n  return execTyped(functionSignatureRegex, signature);\n}\nvar structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \\{(?<properties>.*?)\\}$/;\nfunction isStructSignature(signature) {\n  return structSignatureRegex.test(signature);\n}\nfunction execStructSignature(signature) {\n  return execTyped(structSignatureRegex, signature);\n}\nvar constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isConstructorSignature(signature) {\n  return constructorSignatureRegex.test(signature);\n}\nfunction execConstructorSignature(signature) {\n  return execTyped(constructorSignatureRegex, signature);\n}\nvar fallbackSignatureRegex = /^fallback\\(\\) external(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isFallbackSignature(signature) {\n  return fallbackSignatureRegex.test(signature);\n}\nvar receiveSignatureRegex = /^receive\\(\\) external payable$/;\nfunction isReceiveSignature(signature) {\n  return receiveSignatureRegex.test(signature);\n}\nvar eventModifiers = /* @__PURE__ */ new Set([\"indexed\"]);\nvar functionModifiers = /* @__PURE__ */ new Set([\n  \"calldata\",\n  \"memory\",\n  \"storage\"\n]);\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/errors/abiItem.js\nvar UnknownTypeError = class extends BaseError {\n  constructor({ type }) {\n    super(\"Unknown type.\", {\n      metaMessages: [\n        `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`\n      ]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"UnknownTypeError\"\n    });\n  }\n};\nvar UnknownSolidityTypeError = class extends BaseError {\n  constructor({ type }) {\n    super(\"Unknown type.\", {\n      metaMessages: [`Type \"${type}\" is not a valid ABI type.`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"UnknownSolidityTypeError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js\nvar InvalidParameterError = class extends BaseError {\n  constructor({ param }) {\n    super(\"Invalid ABI parameter.\", {\n      details: param\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidParameterError\"\n    });\n  }\n};\nvar SolidityProtectedKeywordError = class extends BaseError {\n  constructor({ param, name }) {\n    super(\"Invalid ABI parameter.\", {\n      details: param,\n      metaMessages: [\n        `\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`\n      ]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"SolidityProtectedKeywordError\"\n    });\n  }\n};\nvar InvalidModifierError = class extends BaseError {\n  constructor({ param, type, modifier }) {\n    super(\"Invalid ABI parameter.\", {\n      details: param,\n      metaMessages: [\n        `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : \"\"}.`\n      ]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidModifierError\"\n    });\n  }\n};\nvar InvalidFunctionModifierError = class extends BaseError {\n  constructor({ param, type, modifier }) {\n    super(\"Invalid ABI parameter.\", {\n      details: param,\n      metaMessages: [\n        `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : \"\"}.`,\n        `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`\n      ]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidFunctionModifierError\"\n    });\n  }\n};\nvar InvalidAbiTypeParameterError = class extends BaseError {\n  constructor({ abiParameter }) {\n    super(\"Invalid ABI parameter.\", {\n      details: JSON.stringify(abiParameter, null, 2),\n      metaMessages: [\"ABI parameter type is invalid.\"]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidAbiTypeParameterError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/errors/signature.js\nvar InvalidSignatureError = class extends BaseError {\n  constructor({ signature, type }) {\n    super(`Invalid ${type} signature.`, {\n      details: signature\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidSignatureError\"\n    });\n  }\n};\nvar UnknownSignatureError = class extends BaseError {\n  constructor({ signature }) {\n    super(\"Unknown signature.\", {\n      details: signature\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"UnknownSignatureError\"\n    });\n  }\n};\nvar InvalidStructSignatureError = class extends BaseError {\n  constructor({ signature }) {\n    super(\"Invalid struct signature.\", {\n      details: signature,\n      metaMessages: [\"No properties exist.\"]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidStructSignatureError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/errors/struct.js\nvar CircularReferenceError = class extends BaseError {\n  constructor({ type }) {\n    super(\"Circular reference detected.\", {\n      metaMessages: [`Struct \"${type}\" is a circular reference.`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"CircularReferenceError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js\nvar InvalidParenthesisError = class extends BaseError {\n  constructor({ current, depth }) {\n    super(\"Unbalanced parentheses.\", {\n      metaMessages: [\n        `\"${current.trim()}\" has too many ${depth > 0 ? \"opening\" : \"closing\"} parentheses.`\n      ],\n      details: `Depth \"${depth}\"`\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"InvalidParenthesisError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/runtime/cache.js\nfunction getParameterCacheKey(param, type, structs) {\n  let structKey = \"\";\n  if (structs)\n    for (const struct of Object.entries(structs)) {\n      if (!struct)\n        continue;\n      let propertyKey = \"\";\n      for (const property of struct[1]) {\n        propertyKey += `[${property.type}${property.name ? `:${property.name}` : \"\"}]`;\n      }\n      structKey += `(${struct[0]}{${propertyKey}})`;\n    }\n  if (type)\n    return `${type}:${param}${structKey}`;\n  return param;\n}\nvar parameterCache = /* @__PURE__ */ new Map([\n  // Unnamed\n  [\"address\", { type: \"address\" }],\n  [\"bool\", { type: \"bool\" }],\n  [\"bytes\", { type: \"bytes\" }],\n  [\"bytes32\", { type: \"bytes32\" }],\n  [\"int\", { type: \"int256\" }],\n  [\"int256\", { type: \"int256\" }],\n  [\"string\", { type: \"string\" }],\n  [\"uint\", { type: \"uint256\" }],\n  [\"uint8\", { type: \"uint8\" }],\n  [\"uint16\", { type: \"uint16\" }],\n  [\"uint24\", { type: \"uint24\" }],\n  [\"uint32\", { type: \"uint32\" }],\n  [\"uint64\", { type: \"uint64\" }],\n  [\"uint96\", { type: \"uint96\" }],\n  [\"uint112\", { type: \"uint112\" }],\n  [\"uint160\", { type: \"uint160\" }],\n  [\"uint192\", { type: \"uint192\" }],\n  [\"uint256\", { type: \"uint256\" }],\n  // Named\n  [\"address owner\", { type: \"address\", name: \"owner\" }],\n  [\"address to\", { type: \"address\", name: \"to\" }],\n  [\"bool approved\", { type: \"bool\", name: \"approved\" }],\n  [\"bytes _data\", { type: \"bytes\", name: \"_data\" }],\n  [\"bytes data\", { type: \"bytes\", name: \"data\" }],\n  [\"bytes signature\", { type: \"bytes\", name: \"signature\" }],\n  [\"bytes32 hash\", { type: \"bytes32\", name: \"hash\" }],\n  [\"bytes32 r\", { type: \"bytes32\", name: \"r\" }],\n  [\"bytes32 root\", { type: \"bytes32\", name: \"root\" }],\n  [\"bytes32 s\", { type: \"bytes32\", name: \"s\" }],\n  [\"string name\", { type: \"string\", name: \"name\" }],\n  [\"string symbol\", { type: \"string\", name: \"symbol\" }],\n  [\"string tokenURI\", { type: \"string\", name: \"tokenURI\" }],\n  [\"uint tokenId\", { type: \"uint256\", name: \"tokenId\" }],\n  [\"uint8 v\", { type: \"uint8\", name: \"v\" }],\n  [\"uint256 balance\", { type: \"uint256\", name: \"balance\" }],\n  [\"uint256 tokenId\", { type: \"uint256\", name: \"tokenId\" }],\n  [\"uint256 value\", { type: \"uint256\", name: \"value\" }],\n  // Indexed\n  [\n    \"event:address indexed from\",\n    { type: \"address\", name: \"from\", indexed: true }\n  ],\n  [\"event:address indexed to\", { type: \"address\", name: \"to\", indexed: true }],\n  [\n    \"event:uint indexed tokenId\",\n    { type: \"uint256\", name: \"tokenId\", indexed: true }\n  ],\n  [\n    \"event:uint256 indexed tokenId\",\n    { type: \"uint256\", name: \"tokenId\", indexed: true }\n  ]\n]);\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/runtime/utils.js\nfunction parseSignature(signature, structs = {}) {\n  if (isFunctionSignature(signature)) {\n    const match = execFunctionSignature(signature);\n    if (!match)\n      throw new InvalidSignatureError({ signature, type: \"function\" });\n    const inputParams = splitParameters(match.parameters);\n    const inputs = [];\n    const inputLength = inputParams.length;\n    for (let i = 0; i < inputLength; i++) {\n      inputs.push(parseAbiParameter(inputParams[i], {\n        modifiers: functionModifiers,\n        structs,\n        type: \"function\"\n      }));\n    }\n    const outputs = [];\n    if (match.returns) {\n      const outputParams = splitParameters(match.returns);\n      const outputLength = outputParams.length;\n      for (let i = 0; i < outputLength; i++) {\n        outputs.push(parseAbiParameter(outputParams[i], {\n          modifiers: functionModifiers,\n          structs,\n          type: \"function\"\n        }));\n      }\n    }\n    return {\n      name: match.name,\n      type: \"function\",\n      stateMutability: match.stateMutability ?? \"nonpayable\",\n      inputs,\n      outputs\n    };\n  }\n  if (isEventSignature(signature)) {\n    const match = execEventSignature(signature);\n    if (!match)\n      throw new InvalidSignatureError({ signature, type: \"event\" });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        modifiers: eventModifiers,\n        structs,\n        type: \"event\"\n      }));\n    }\n    return { name: match.name, type: \"event\", inputs: abiParameters };\n  }\n  if (isErrorSignature(signature)) {\n    const match = execErrorSignature(signature);\n    if (!match)\n      throw new InvalidSignatureError({ signature, type: \"error\" });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], { structs, type: \"error\" }));\n    }\n    return { name: match.name, type: \"error\", inputs: abiParameters };\n  }\n  if (isConstructorSignature(signature)) {\n    const match = execConstructorSignature(signature);\n    if (!match)\n      throw new InvalidSignatureError({ signature, type: \"constructor\" });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], { structs, type: \"constructor\" }));\n    }\n    return {\n      type: \"constructor\",\n      stateMutability: match.stateMutability ?? \"nonpayable\",\n      inputs: abiParameters\n    };\n  }\n  if (isFallbackSignature(signature))\n    return { type: \"fallback\" };\n  if (isReceiveSignature(signature))\n    return {\n      type: \"receive\",\n      stateMutability: \"payable\"\n    };\n  throw new UnknownSignatureError({ signature });\n}\nvar abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nvar abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nvar dynamicIntegerRegex = /^u?int$/;\nfunction parseAbiParameter(param, options) {\n  const parameterCacheKey = getParameterCacheKey(param, options?.type, options?.structs);\n  if (parameterCache.has(parameterCacheKey))\n    return parameterCache.get(parameterCacheKey);\n  const isTuple = isTupleRegex.test(param);\n  const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n  if (!match)\n    throw new InvalidParameterError({ param });\n  if (match.name && isSolidityKeyword(match.name))\n    throw new SolidityProtectedKeywordError({ param, name: match.name });\n  const name = match.name ? { name: match.name } : {};\n  const indexed = match.modifier === \"indexed\" ? { indexed: true } : {};\n  const structs = options?.structs ?? {};\n  let type;\n  let components = {};\n  if (isTuple) {\n    type = \"tuple\";\n    const params = splitParameters(match.type);\n    const components_ = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      components_.push(parseAbiParameter(params[i], { structs }));\n    }\n    components = { components: components_ };\n  } else if (match.type in structs) {\n    type = \"tuple\";\n    components = { components: structs[match.type] };\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = `${match.type}256`;\n  } else {\n    type = match.type;\n    if (!(options?.type === \"struct\") && !isSolidityType(type))\n      throw new UnknownSolidityTypeError({ type });\n  }\n  if (match.modifier) {\n    if (!options?.modifiers?.has?.(match.modifier))\n      throw new InvalidModifierError({\n        param,\n        type: options?.type,\n        modifier: match.modifier\n      });\n    if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))\n      throw new InvalidFunctionModifierError({\n        param,\n        type: options?.type,\n        modifier: match.modifier\n      });\n  }\n  const abiParameter = {\n    type: `${type}${match.array ?? \"\"}`,\n    ...name,\n    ...indexed,\n    ...components\n  };\n  parameterCache.set(parameterCacheKey, abiParameter);\n  return abiParameter;\n}\nfunction splitParameters(params, result = [], current = \"\", depth = 0) {\n  const length = params.trim().length;\n  for (let i = 0; i < length; i++) {\n    const char = params[i];\n    const tail = params.slice(i + 1);\n    switch (char) {\n      case \",\":\n        return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);\n      case \"(\":\n        return splitParameters(tail, result, `${current}${char}`, depth + 1);\n      case \")\":\n        return splitParameters(tail, result, `${current}${char}`, depth - 1);\n      default:\n        return splitParameters(tail, result, `${current}${char}`, depth);\n    }\n  }\n  if (current === \"\")\n    return result;\n  if (depth !== 0)\n    throw new InvalidParenthesisError({ current, depth });\n  result.push(current.trim());\n  return result;\n}\nfunction isSolidityType(type) {\n  return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || bytesRegex.test(type) || integerRegex.test(type);\n}\nvar protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nfunction isSolidityKeyword(name) {\n  return name === \"address\" || name === \"bool\" || name === \"function\" || name === \"string\" || name === \"tuple\" || bytesRegex.test(name) || integerRegex.test(name) || protectedKeywordsRegex.test(name);\n}\nfunction isValidDataLocation(type, isArray) {\n  return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\n}\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/runtime/structs.js\nfunction parseStructs(signatures) {\n  const shallowStructs = {};\n  const signaturesLength = signatures.length;\n  for (let i = 0; i < signaturesLength; i++) {\n    const signature = signatures[i];\n    if (!isStructSignature(signature))\n      continue;\n    const match = execStructSignature(signature);\n    if (!match)\n      throw new InvalidSignatureError({ signature, type: \"struct\" });\n    const properties = match.properties.split(\";\");\n    const components = [];\n    const propertiesLength = properties.length;\n    for (let k = 0; k < propertiesLength; k++) {\n      const property = properties[k];\n      const trimmed = property.trim();\n      if (!trimmed)\n        continue;\n      const abiParameter = parseAbiParameter(trimmed, {\n        type: \"struct\"\n      });\n      components.push(abiParameter);\n    }\n    if (!components.length)\n      throw new InvalidStructSignatureError({ signature });\n    shallowStructs[match.name] = components;\n  }\n  const resolvedStructs = {};\n  const entries = Object.entries(shallowStructs);\n  const entriesLength = entries.length;\n  for (let i = 0; i < entriesLength; i++) {\n    const [name, parameters] = entries[i];\n    resolvedStructs[name] = resolveStructs(parameters, shallowStructs);\n  }\n  return resolvedStructs;\n}\nvar typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {\n  const components = [];\n  const length = abiParameters.length;\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i];\n    const isTuple = isTupleRegex.test(abiParameter.type);\n    if (isTuple)\n      components.push(abiParameter);\n    else {\n      const match = execTyped(typeWithoutTupleRegex, abiParameter.type);\n      if (!match?.type)\n        throw new InvalidAbiTypeParameterError({ abiParameter });\n      const { array, type } = match;\n      if (type in structs) {\n        if (ancestors.has(type))\n          throw new CircularReferenceError({ type });\n        components.push({\n          ...abiParameter,\n          type: `tuple${array ?? \"\"}`,\n          components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))\n        });\n      } else {\n        if (isSolidityType(type))\n          components.push(abiParameter);\n        else\n          throw new UnknownTypeError({ type });\n      }\n    }\n  }\n  return components;\n}\n\n// ../../node_modules/.pnpm/abitype@1.0.7_typescript@5.8.3_zod@3.24.1/node_modules/abitype/dist/esm/human-readable/parseAbi.js\nfunction parseAbi(signatures) {\n  const structs = parseStructs(signatures);\n  const abi = [];\n  const length = signatures.length;\n  for (let i = 0; i < length; i++) {\n    const signature = signatures[i];\n    if (isStructSignature(signature))\n      continue;\n    abi.push(parseSignature(signature, structs));\n  }\n  return abi;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/accounts/utils/parseAccount.js\nfunction parseAccount(account) {\n  if (typeof account === \"string\")\n    return { address: account, type: \"json-rpc\" };\n  return account;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/constants/abis.js\nvar multicall3Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            name: \"target\",\n            type: \"address\"\n          },\n          {\n            name: \"allowFailure\",\n            type: \"bool\"\n          },\n          {\n            name: \"callData\",\n            type: \"bytes\"\n          }\n        ],\n        name: \"calls\",\n        type: \"tuple[]\"\n      }\n    ],\n    name: \"aggregate3\",\n    outputs: [\n      {\n        components: [\n          {\n            name: \"success\",\n            type: \"bool\"\n          },\n          {\n            name: \"returnData\",\n            type: \"bytes\"\n          }\n        ],\n        name: \"returnData\",\n        type: \"tuple[]\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\nvar universalResolverErrors = [\n  {\n    inputs: [],\n    name: \"ResolverNotFound\",\n    type: \"error\"\n  },\n  {\n    inputs: [],\n    name: \"ResolverWildcardNotSupported\",\n    type: \"error\"\n  },\n  {\n    inputs: [],\n    name: \"ResolverNotContract\",\n    type: \"error\"\n  },\n  {\n    inputs: [\n      {\n        name: \"returnData\",\n        type: \"bytes\"\n      }\n    ],\n    name: \"ResolverError\",\n    type: \"error\"\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            name: \"status\",\n            type: \"uint16\"\n          },\n          {\n            name: \"message\",\n            type: \"string\"\n          }\n        ],\n        name: \"errors\",\n        type: \"tuple[]\"\n      }\n    ],\n    name: \"HttpError\",\n    type: \"error\"\n  }\n];\nvar universalResolverResolveAbi = [\n  ...universalResolverErrors,\n  {\n    name: \"resolve\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [\n      { name: \"name\", type: \"bytes\" },\n      { name: \"data\", type: \"bytes\" }\n    ],\n    outputs: [\n      { name: \"\", type: \"bytes\" },\n      { name: \"address\", type: \"address\" }\n    ]\n  },\n  {\n    name: \"resolve\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [\n      { name: \"name\", type: \"bytes\" },\n      { name: \"data\", type: \"bytes\" },\n      { name: \"gateways\", type: \"string[]\" }\n    ],\n    outputs: [\n      { name: \"\", type: \"bytes\" },\n      { name: \"address\", type: \"address\" }\n    ]\n  }\n];\nvar universalResolverReverseAbi = [\n  ...universalResolverErrors,\n  {\n    name: \"reverse\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [{ type: \"bytes\", name: \"reverseName\" }],\n    outputs: [\n      { type: \"string\", name: \"resolvedName\" },\n      { type: \"address\", name: \"resolvedAddress\" },\n      { type: \"address\", name: \"reverseResolver\" },\n      { type: \"address\", name: \"resolver\" }\n    ]\n  },\n  {\n    name: \"reverse\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [\n      { type: \"bytes\", name: \"reverseName\" },\n      { type: \"string[]\", name: \"gateways\" }\n    ],\n    outputs: [\n      { type: \"string\", name: \"resolvedName\" },\n      { type: \"address\", name: \"resolvedAddress\" },\n      { type: \"address\", name: \"reverseResolver\" },\n      { type: \"address\", name: \"resolver\" }\n    ]\n  }\n];\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/constants/contract.js\nvar aggregate3Signature = \"0x82ad56cb\";\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/constants/contracts.js\nvar deploylessCallViaBytecodeBytecode = \"0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe\";\nvar deploylessCallViaFactoryBytecode = \"0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe\";\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/version.js\nvar version2 = \"2.22.12\";\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/base.js\nvar errorConfig = {\n  getDocsUrl: ({ docsBaseUrl, docsPath: docsPath4 = \"\", docsSlug }) => docsPath4 ? `${docsBaseUrl ?? \"https://viem.sh\"}${docsPath4}${docsSlug ? `#${docsSlug}` : \"\"}` : void 0,\n  version: `viem@${version2}`\n};\nvar BaseError2 = class _BaseError extends Error {\n  constructor(shortMessage, args = {}) {\n    const details = (() => {\n      if (args.cause instanceof _BaseError)\n        return args.cause.details;\n      if (args.cause?.message)\n        return args.cause.message;\n      return args.details;\n    })();\n    const docsPath4 = (() => {\n      if (args.cause instanceof _BaseError)\n        return args.cause.docsPath || args.docsPath;\n      return args.docsPath;\n    })();\n    const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath: docsPath4 });\n    const message = [\n      shortMessage || \"An error occurred.\",\n      \"\",\n      ...args.metaMessages ? [...args.metaMessages, \"\"] : [],\n      ...docsUrl ? [`Docs: ${docsUrl}`] : [],\n      ...details ? [`Details: ${details}`] : [],\n      ...errorConfig.version ? [`Version: ${errorConfig.version}`] : []\n    ].join(\"\\n\");\n    super(message, args.cause ? { cause: args.cause } : void 0);\n    Object.defineProperty(this, \"details\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"docsPath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"metaMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"shortMessage\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"BaseError\"\n    });\n    this.details = details;\n    this.docsPath = docsPath4;\n    this.metaMessages = args.metaMessages;\n    this.name = args.name ?? this.name;\n    this.shortMessage = shortMessage;\n    this.version = version2;\n  }\n  walk(fn) {\n    return walk(this, fn);\n  }\n};\nfunction walk(err, fn) {\n  if (fn?.(err))\n    return err;\n  if (err && typeof err === \"object\" && \"cause\" in err && err.cause !== void 0)\n    return walk(err.cause, fn);\n  return fn ? null : err;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/chain.js\nvar ChainDoesNotSupportContract = class extends BaseError2 {\n  constructor({ blockNumber, chain, contract }) {\n    super(`Chain \"${chain.name}\" does not support contract \"${contract.name}\".`, {\n      metaMessages: [\n        \"This could be due to any of the following:\",\n        ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [\n          `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`\n        ] : [\n          `- The chain does not have the contract \"${contract.name}\" configured.`\n        ]\n      ],\n      name: \"ChainDoesNotSupportContract\"\n    });\n  }\n};\nvar ClientChainNotConfiguredError = class extends BaseError2 {\n  constructor() {\n    super(\"No chain was provided to the Client.\", {\n      name: \"ClientChainNotConfiguredError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/constants/solidity.js\nvar solidityError = {\n  inputs: [\n    {\n      name: \"message\",\n      type: \"string\"\n    }\n  ],\n  name: \"Error\",\n  type: \"error\"\n};\nvar solidityPanic = {\n  inputs: [\n    {\n      name: \"reason\",\n      type: \"uint256\"\n    }\n  ],\n  name: \"Panic\",\n  type: \"error\"\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/formatAbiItem.js\nfunction formatAbiItem2(abiItem, { includeName = false } = {}) {\n  if (abiItem.type !== \"function\" && abiItem.type !== \"event\" && abiItem.type !== \"error\")\n    throw new InvalidDefinitionTypeError(abiItem.type);\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`;\n}\nfunction formatAbiParams(params, { includeName = false } = {}) {\n  if (!params)\n    return \"\";\n  return params.map((param) => formatAbiParam(param, { includeName })).join(includeName ? \", \" : \",\");\n}\nfunction formatAbiParam(param, { includeName }) {\n  if (param.type.startsWith(\"tuple\")) {\n    return `(${formatAbiParams(param.components, { includeName })})${param.type.slice(\"tuple\".length)}`;\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : \"\");\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/data/isHex.js\nfunction isHex(value, { strict = true } = {}) {\n  if (!value)\n    return false;\n  if (typeof value !== \"string\")\n    return false;\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith(\"0x\");\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/data/size.js\nfunction size(value) {\n  if (isHex(value, { strict: false }))\n    return Math.ceil((value.length - 2) / 2);\n  return value.length;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/abi.js\nvar AbiConstructorNotFoundError = class extends BaseError2 {\n  constructor({ docsPath: docsPath4 }) {\n    super([\n      \"A constructor was not found on the ABI.\",\n      \"Make sure you are using the correct ABI and that the constructor exists on it.\"\n    ].join(\"\\n\"), {\n      docsPath: docsPath4,\n      name: \"AbiConstructorNotFoundError\"\n    });\n  }\n};\nvar AbiConstructorParamsNotFoundError = class extends BaseError2 {\n  constructor({ docsPath: docsPath4 }) {\n    super([\n      \"Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.\",\n      \"Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.\"\n    ].join(\"\\n\"), {\n      docsPath: docsPath4,\n      name: \"AbiConstructorParamsNotFoundError\"\n    });\n  }\n};\nvar AbiDecodingDataSizeTooSmallError = class extends BaseError2 {\n  constructor({ data, params, size: size2 }) {\n    super([`Data size of ${size2} bytes is too small for given parameters.`].join(\"\\n\"), {\n      metaMessages: [\n        `Params: (${formatAbiParams(params, { includeName: true })})`,\n        `Data:   ${data} (${size2} bytes)`\n      ],\n      name: \"AbiDecodingDataSizeTooSmallError\"\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"params\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"size\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.data = data;\n    this.params = params;\n    this.size = size2;\n  }\n};\nvar AbiDecodingZeroDataError = class extends BaseError2 {\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n      name: \"AbiDecodingZeroDataError\"\n    });\n  }\n};\nvar AbiEncodingArrayLengthMismatchError = class extends BaseError2 {\n  constructor({ expectedLength, givenLength, type }) {\n    super([\n      `ABI encoding array length mismatch for type ${type}.`,\n      `Expected length: ${expectedLength}`,\n      `Given length: ${givenLength}`\n    ].join(\"\\n\"), { name: \"AbiEncodingArrayLengthMismatchError\" });\n  }\n};\nvar AbiEncodingBytesSizeMismatchError = class extends BaseError2 {\n  constructor({ expectedSize, value }) {\n    super(`Size of bytes \"${value}\" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`, { name: \"AbiEncodingBytesSizeMismatchError\" });\n  }\n};\nvar AbiEncodingLengthMismatchError = class extends BaseError2 {\n  constructor({ expectedLength, givenLength }) {\n    super([\n      \"ABI encoding params/values length mismatch.\",\n      `Expected length (params): ${expectedLength}`,\n      `Given length (values): ${givenLength}`\n    ].join(\"\\n\"), { name: \"AbiEncodingLengthMismatchError\" });\n  }\n};\nvar AbiErrorSignatureNotFoundError = class extends BaseError2 {\n  constructor(signature, { docsPath: docsPath4 }) {\n    super([\n      `Encoded error signature \"${signature}\" not found on ABI.`,\n      \"Make sure you are using the correct ABI and that the error exists on it.\",\n      `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`\n    ].join(\"\\n\"), {\n      docsPath: docsPath4,\n      name: \"AbiErrorSignatureNotFoundError\"\n    });\n    Object.defineProperty(this, \"signature\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.signature = signature;\n  }\n};\nvar AbiFunctionNotFoundError = class extends BaseError2 {\n  constructor(functionName, { docsPath: docsPath4 } = {}) {\n    super([\n      `Function ${functionName ? `\"${functionName}\" ` : \"\"}not found on ABI.`,\n      \"Make sure you are using the correct ABI and that the function exists on it.\"\n    ].join(\"\\n\"), {\n      docsPath: docsPath4,\n      name: \"AbiFunctionNotFoundError\"\n    });\n  }\n};\nvar AbiFunctionOutputsNotFoundError = class extends BaseError2 {\n  constructor(functionName, { docsPath: docsPath4 }) {\n    super([\n      `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n      \"Cannot decode function result without knowing what the parameter types are.\",\n      \"Make sure you are using the correct ABI and that the function exists on it.\"\n    ].join(\"\\n\"), {\n      docsPath: docsPath4,\n      name: \"AbiFunctionOutputsNotFoundError\"\n    });\n  }\n};\nvar AbiItemAmbiguityError = class extends BaseError2 {\n  constructor(x, y) {\n    super(\"Found ambiguous types in overloaded ABI items.\", {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem2(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem2(y.abiItem)}\\``,\n        \"\",\n        \"These types encode differently and cannot be distinguished at runtime.\",\n        \"Remove one of the ambiguous items in the ABI.\"\n      ],\n      name: \"AbiItemAmbiguityError\"\n    });\n  }\n};\nvar InvalidAbiEncodingTypeError = class extends BaseError2 {\n  constructor(type, { docsPath: docsPath4 }) {\n    super([\n      `Type \"${type}\" is not a valid encoding type.`,\n      \"Please provide a valid ABI type.\"\n    ].join(\"\\n\"), { docsPath: docsPath4, name: \"InvalidAbiEncodingType\" });\n  }\n};\nvar InvalidAbiDecodingTypeError = class extends BaseError2 {\n  constructor(type, { docsPath: docsPath4 }) {\n    super([\n      `Type \"${type}\" is not a valid decoding type.`,\n      \"Please provide a valid ABI type.\"\n    ].join(\"\\n\"), { docsPath: docsPath4, name: \"InvalidAbiDecodingType\" });\n  }\n};\nvar InvalidArrayError = class extends BaseError2 {\n  constructor(value) {\n    super([`Value \"${value}\" is not a valid array.`].join(\"\\n\"), {\n      name: \"InvalidArrayError\"\n    });\n  }\n};\nvar InvalidDefinitionTypeError = class extends BaseError2 {\n  constructor(type) {\n    super([\n      `\"${type}\" is not a valid definition type.`,\n      'Valid types: \"function\", \"event\", \"error\"'\n    ].join(\"\\n\"), { name: \"InvalidDefinitionTypeError\" });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/data.js\nvar SliceOffsetOutOfBoundsError = class extends BaseError2 {\n  constructor({ offset, position, size: size2 }) {\n    super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \"${offset}\" is out-of-bounds (size: ${size2}).`, { name: \"SliceOffsetOutOfBoundsError\" });\n  }\n};\nvar SizeExceedsPaddingSizeError = class extends BaseError2 {\n  constructor({ size: size2, targetSize, type }) {\n    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size2}) exceeds padding size (${targetSize}).`, { name: \"SizeExceedsPaddingSizeError\" });\n  }\n};\nvar InvalidBytesLengthError = class extends BaseError2 {\n  constructor({ size: size2, targetSize, type }) {\n    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size2} ${type} long.`, { name: \"InvalidBytesLengthError\" });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/data/slice.js\nfunction slice(value, start, end, { strict } = {}) {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value, start, end, {\n      strict\n    });\n  return sliceBytes(value, start, end, {\n    strict\n  });\n}\nfunction assertStartOffset(value, start) {\n  if (typeof start === \"number\" && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: \"start\",\n      size: size(value)\n    });\n}\nfunction assertEndOffset(value, start, end) {\n  if (typeof start === \"number\" && typeof end === \"number\" && size(value) !== end - start) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: \"end\",\n      size: size(value)\n    });\n  }\n}\nfunction sliceBytes(value_, start, end, { strict } = {}) {\n  assertStartOffset(value_, start);\n  const value = value_.slice(start, end);\n  if (strict)\n    assertEndOffset(value, start, end);\n  return value;\n}\nfunction sliceHex(value_, start, end, { strict } = {}) {\n  assertStartOffset(value_, start);\n  const value = `0x${value_.replace(\"0x\", \"\").slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\n  if (strict)\n    assertEndOffset(value, start, end);\n  return value;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/data/pad.js\nfunction pad(hexOrBytes, { dir, size: size2 = 32 } = {}) {\n  if (typeof hexOrBytes === \"string\")\n    return padHex(hexOrBytes, { dir, size: size2 });\n  return padBytes(hexOrBytes, { dir, size: size2 });\n}\nfunction padHex(hex_, { dir, size: size2 = 32 } = {}) {\n  if (size2 === null)\n    return hex_;\n  const hex = hex_.replace(\"0x\", \"\");\n  if (hex.length > size2 * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size2,\n      type: \"hex\"\n    });\n  return `0x${hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size2 * 2, \"0\")}`;\n}\nfunction padBytes(bytes, { dir, size: size2 = 32 } = {}) {\n  if (size2 === null)\n    return bytes;\n  if (bytes.length > size2)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size2,\n      type: \"bytes\"\n    });\n  const paddedBytes = new Uint8Array(size2);\n  for (let i = 0; i < size2; i++) {\n    const padEnd = dir === \"right\";\n    paddedBytes[padEnd ? i : size2 - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n  }\n  return paddedBytes;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/encoding.js\nvar IntegerOutOfRangeError = class extends BaseError2 {\n  constructor({ max, min, signed, size: size2, value }) {\n    super(`Number \"${value}\" is not in safe ${size2 ? `${size2 * 8}-bit ${signed ? \"signed\" : \"unsigned\"} ` : \"\"}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: \"IntegerOutOfRangeError\" });\n  }\n};\nvar InvalidBytesBooleanError = class extends BaseError2 {\n  constructor(bytes) {\n    super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {\n      name: \"InvalidBytesBooleanError\"\n    });\n  }\n};\nvar SizeOverflowError = class extends BaseError2 {\n  constructor({ givenSize, maxSize }) {\n    super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: \"SizeOverflowError\" });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/data/trim.js\nfunction trim(hexOrBytes, { dir = \"left\" } = {}) {\n  let data = typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\n  let sliceLength = 0;\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\")\n      sliceLength++;\n    else\n      break;\n  }\n  data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n  if (typeof hexOrBytes === \"string\") {\n    if (data.length === 1 && dir === \"right\")\n      data = `${data}0`;\n    return `0x${data.length % 2 === 1 ? `0${data}` : data}`;\n  }\n  return data;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/encoding/fromHex.js\nfunction assertSize(hexOrBytes, { size: size2 }) {\n  if (size(hexOrBytes) > size2)\n    throw new SizeOverflowError({\n      givenSize: size(hexOrBytes),\n      maxSize: size2\n    });\n}\nfunction hexToBigInt(hex, opts = {}) {\n  const { signed } = opts;\n  if (opts.size)\n    assertSize(hex, { size: opts.size });\n  const value = BigInt(hex);\n  if (!signed)\n    return value;\n  const size2 = (hex.length - 2) / 2;\n  const max = (1n << BigInt(size2) * 8n - 1n) - 1n;\n  if (value <= max)\n    return value;\n  return value - BigInt(`0x${\"f\".padStart(size2 * 2, \"f\")}`) - 1n;\n}\nfunction hexToNumber(hex, opts = {}) {\n  return Number(hexToBigInt(hex, opts));\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/encoding/toHex.js\nvar hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, \"0\"));\nfunction toHex(value, opts = {}) {\n  if (typeof value === \"number\" || typeof value === \"bigint\")\n    return numberToHex(value, opts);\n  if (typeof value === \"string\") {\n    return stringToHex(value, opts);\n  }\n  if (typeof value === \"boolean\")\n    return boolToHex(value, opts);\n  return bytesToHex(value, opts);\n}\nfunction boolToHex(value, opts = {}) {\n  const hex = `0x${Number(value)}`;\n  if (typeof opts.size === \"number\") {\n    assertSize(hex, { size: opts.size });\n    return pad(hex, { size: opts.size });\n  }\n  return hex;\n}\nfunction bytesToHex(value, opts = {}) {\n  let string = \"\";\n  for (let i = 0; i < value.length; i++) {\n    string += hexes[value[i]];\n  }\n  const hex = `0x${string}`;\n  if (typeof opts.size === \"number\") {\n    assertSize(hex, { size: opts.size });\n    return pad(hex, { dir: \"right\", size: opts.size });\n  }\n  return hex;\n}\nfunction numberToHex(value_, opts = {}) {\n  const { signed, size: size2 } = opts;\n  const value = BigInt(value_);\n  let maxValue;\n  if (size2) {\n    if (signed)\n      maxValue = (1n << BigInt(size2) * 8n - 1n) - 1n;\n    else\n      maxValue = 2n ** (BigInt(size2) * 8n) - 1n;\n  } else if (typeof value_ === \"number\") {\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n  }\n  const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\n  if (maxValue && value > maxValue || value < minValue) {\n    const suffix = typeof value_ === \"bigint\" ? \"n\" : \"\";\n    throw new IntegerOutOfRangeError({\n      max: maxValue ? `${maxValue}${suffix}` : void 0,\n      min: `${minValue}${suffix}`,\n      signed,\n      size: size2,\n      value: `${value_}${suffix}`\n    });\n  }\n  const hex = `0x${(signed && value < 0 ? (1n << BigInt(size2 * 8)) + BigInt(value) : value).toString(16)}`;\n  if (size2)\n    return pad(hex, { size: size2 });\n  return hex;\n}\nvar encoder = /* @__PURE__ */ new TextEncoder();\nfunction stringToHex(value_, opts = {}) {\n  const value = encoder.encode(value_);\n  return bytesToHex(value, opts);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/encoding/toBytes.js\nvar encoder2 = /* @__PURE__ */ new TextEncoder();\nfunction toBytes(value, opts = {}) {\n  if (typeof value === \"number\" || typeof value === \"bigint\")\n    return numberToBytes(value, opts);\n  if (typeof value === \"boolean\")\n    return boolToBytes(value, opts);\n  if (isHex(value))\n    return hexToBytes(value, opts);\n  return stringToBytes(value, opts);\n}\nfunction boolToBytes(value, opts = {}) {\n  const bytes = new Uint8Array(1);\n  bytes[0] = Number(value);\n  if (typeof opts.size === \"number\") {\n    assertSize(bytes, { size: opts.size });\n    return pad(bytes, { size: opts.size });\n  }\n  return bytes;\n}\nvar charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102\n};\nfunction charCodeToBase16(char) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n    return char - charCodeMap.zero;\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\n    return char - (charCodeMap.A - 10);\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\n    return char - (charCodeMap.a - 10);\n  return void 0;\n}\nfunction hexToBytes(hex_, opts = {}) {\n  let hex = hex_;\n  if (opts.size) {\n    assertSize(hex, { size: opts.size });\n    hex = pad(hex, { dir: \"right\", size: opts.size });\n  }\n  let hexString = hex.slice(2);\n  if (hexString.length % 2)\n    hexString = `0${hexString}`;\n  const length = hexString.length / 2;\n  const bytes = new Uint8Array(length);\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n    if (nibbleLeft === void 0 || nibbleRight === void 0) {\n      throw new BaseError2(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight;\n  }\n  return bytes;\n}\nfunction numberToBytes(value, opts) {\n  const hex = numberToHex(value, opts);\n  return hexToBytes(hex);\n}\nfunction stringToBytes(value, opts = {}) {\n  const bytes = encoder2.encode(value);\n  if (typeof opts.size === \"number\") {\n    assertSize(bytes, { size: opts.size });\n    return pad(bytes, { dir: \"right\", size: opts.size });\n  }\n  return bytes;\n}\n\n// ../../node_modules/.pnpm/@noble+hashes@1.6.1/node_modules/@noble/hashes/esm/_assert.js\nfunction anumber(n) {\n  if (!Number.isSafeInteger(n) || n < 0)\n    throw new Error(\"positive integer expected, got \" + n);\n}\nfunction isBytes(a) {\n  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\nfunction abytes(b, ...lengths) {\n  if (!isBytes(b))\n    throw new Error(\"Uint8Array expected\");\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(\"Uint8Array expected of length \" + lengths + \", got length=\" + b.length);\n}\nfunction aexists(instance, checkFinished = true) {\n  if (instance.destroyed)\n    throw new Error(\"Hash instance has been destroyed\");\n  if (checkFinished && instance.finished)\n    throw new Error(\"Hash#digest() has already been called\");\n}\nfunction aoutput(out, instance) {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(\"digestInto() expects output buffer of length at least \" + min);\n  }\n}\n\n// ../../node_modules/.pnpm/@noble+hashes@1.6.1/node_modules/@noble/hashes/esm/_u64.js\nvar U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nvar _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n  if (le)\n    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };\n  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nvar rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nvar rotlSL = (h, l, s) => l << s | h >>> 32 - s;\nvar rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nvar rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n\n// ../../node_modules/.pnpm/@noble+hashes@1.6.1/node_modules/@noble/hashes/esm/utils.js\nvar u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nvar isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();\nvar byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;\nfunction byteSwap32(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\nfunction utf8ToBytes(str) {\n  if (typeof str !== \"string\")\n    throw new Error(\"utf8ToBytes expected string, got \" + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str));\n}\nfunction toBytes2(data) {\n  if (typeof data === \"string\")\n    data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\nvar Hash = class {\n  // Safe version that clones internal state\n  clone() {\n    return this._cloneInto();\n  }\n};\nfunction wrapConstructor(hashCons) {\n  const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();\n  const tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts) => hashCons(opts);\n  return hashC;\n}\n\n// ../../node_modules/.pnpm/@noble+hashes@1.6.1/node_modules/@noble/hashes/esm/sha3.js\nvar SHA3_PI = [];\nvar SHA3_ROTL = [];\nvar _SHA3_IOTA = [];\nvar _0n = /* @__PURE__ */ BigInt(0);\nvar _1n = /* @__PURE__ */ BigInt(1);\nvar _2n = /* @__PURE__ */ BigInt(2);\nvar _7n = /* @__PURE__ */ BigInt(7);\nvar _256n = /* @__PURE__ */ BigInt(256);\nvar _0x71n = /* @__PURE__ */ BigInt(113);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n)\n      t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n  }\n  _SHA3_IOTA.push(t);\n}\nvar [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\nvar rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\nvar rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\nfunction keccakP(s, rounds = 24) {\n  const B = new Uint32Array(5 * 2);\n  for (let round = 24 - rounds; round < 24; round++) {\n    for (let x = 0; x < 10; x++)\n      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++)\n        B[x] = s[y + x];\n      for (let x = 0; x < 10; x++)\n        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\nvar Keccak = class _Keccak extends Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false;\n    anumber(outputLen);\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error(\"Sha3 supports only keccak-f1600 function\");\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  keccak() {\n    if (!isLE)\n      byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE)\n      byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data) {\n    aexists(this);\n    const { blockLen, state } = this;\n    data = toBytes2(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++)\n        state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen)\n        this.keccak();\n    }\n    return this;\n  }\n  finish() {\n    if (this.finished)\n      return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    state[pos] ^= suffix;\n    if ((suffix & 128) !== 0 && pos === blockLen - 1)\n      this.keccak();\n    state[blockLen - 1] ^= 128;\n    this.keccak();\n  }\n  writeInto(out) {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen)\n        this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out) {\n    if (!this.enableXOF)\n      throw new Error(\"XOF is not possible for this instance\");\n    return this.writeInto(out);\n  }\n  xof(bytes) {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out) {\n    aoutput(out, this);\n    if (this.finished)\n      throw new Error(\"digest() was already called\");\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to) {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n};\nvar gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nvar sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);\nvar sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);\nvar sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);\nvar sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);\nvar keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);\nvar keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);\nvar keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);\nvar keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);\nvar genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));\nvar shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);\nvar shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/keccak256.js\nfunction keccak256(value, to_) {\n  const to = to_ || \"hex\";\n  const bytes = keccak_256(isHex(value, { strict: false }) ? toBytes(value) : value);\n  if (to === \"bytes\")\n    return bytes;\n  return toHex(bytes);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/hashSignature.js\nvar hash = (value) => keccak256(toBytes(value));\nfunction hashSignature(sig) {\n  return hash(sig);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/normalizeSignature.js\nfunction normalizeSignature(signature) {\n  let active = true;\n  let current = \"\";\n  let level = 0;\n  let result = \"\";\n  let valid = false;\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i];\n    if ([\"(\", \")\", \",\"].includes(char))\n      active = true;\n    if (char === \"(\")\n      level++;\n    if (char === \")\")\n      level--;\n    if (!active)\n      continue;\n    if (level === 0) {\n      if (char === \" \" && [\"event\", \"function\", \"\"].includes(result))\n        result = \"\";\n      else {\n        result += char;\n        if (char === \")\") {\n          valid = true;\n          break;\n        }\n      }\n      continue;\n    }\n    if (char === \" \") {\n      if (signature[i - 1] !== \",\" && current !== \",\" && current !== \",(\") {\n        current = \"\";\n        active = false;\n      }\n      continue;\n    }\n    result += char;\n    current += char;\n  }\n  if (!valid)\n    throw new BaseError2(\"Unable to normalize signature.\");\n  return result;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/toSignature.js\nvar toSignature = (def) => {\n  const def_ = (() => {\n    if (typeof def === \"string\")\n      return def;\n    return formatAbiItem(def);\n  })();\n  return normalizeSignature(def_);\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/toSignatureHash.js\nfunction toSignatureHash(fn) {\n  return hashSignature(toSignature(fn));\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/toFunctionSelector.js\nvar toFunctionSelector = (fn) => slice(toSignatureHash(fn), 0, 4);\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/address.js\nvar InvalidAddressError = class extends BaseError2 {\n  constructor({ address }) {\n    super(`Address \"${address}\" is invalid.`, {\n      metaMessages: [\n        \"- Address must be a hex value of 20 bytes (40 hex characters).\",\n        \"- Address must match its checksum counterpart.\"\n      ],\n      name: \"InvalidAddressError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/lru.js\nvar LruMap = class extends Map {\n  constructor(size2) {\n    super();\n    Object.defineProperty(this, \"maxSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxSize = size2;\n  }\n  get(key) {\n    const value = super.get(key);\n    if (super.has(key) && value !== void 0) {\n      this.delete(key);\n      super.set(key, value);\n    }\n    return value;\n  }\n  set(key, value) {\n    super.set(key, value);\n    if (this.maxSize && this.size > this.maxSize) {\n      const firstKey = this.keys().next().value;\n      if (firstKey)\n        this.delete(firstKey);\n    }\n    return this;\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/address/isAddress.js\nvar addressRegex = /^0x[a-fA-F0-9]{40}$/;\nvar isAddressCache = /* @__PURE__ */ new LruMap(8192);\nfunction isAddress(address, options) {\n  const { strict = true } = options ?? {};\n  const cacheKey = `${address}.${strict}`;\n  if (isAddressCache.has(cacheKey))\n    return isAddressCache.get(cacheKey);\n  const result = (() => {\n    if (!addressRegex.test(address))\n      return false;\n    if (address.toLowerCase() === address)\n      return true;\n    if (strict)\n      return checksumAddress(address) === address;\n    return true;\n  })();\n  isAddressCache.set(cacheKey, result);\n  return result;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/address/getAddress.js\nvar checksumAddressCache = /* @__PURE__ */ new LruMap(8192);\nfunction checksumAddress(address_, chainId) {\n  if (checksumAddressCache.has(`${address_}.${chainId}`))\n    return checksumAddressCache.get(`${address_}.${chainId}`);\n  const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();\n  const hash2 = keccak256(stringToBytes(hexAddress), \"bytes\");\n  const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split(\"\");\n  for (let i = 0; i < 40; i += 2) {\n    if (hash2[i >> 1] >> 4 >= 8 && address[i]) {\n      address[i] = address[i].toUpperCase();\n    }\n    if ((hash2[i >> 1] & 15) >= 8 && address[i + 1]) {\n      address[i + 1] = address[i + 1].toUpperCase();\n    }\n  }\n  const result = `0x${address.join(\"\")}`;\n  checksumAddressCache.set(`${address_}.${chainId}`, result);\n  return result;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/cursor.js\nvar NegativeOffsetError = class extends BaseError2 {\n  constructor({ offset }) {\n    super(`Offset \\`${offset}\\` cannot be negative.`, {\n      name: \"NegativeOffsetError\"\n    });\n  }\n};\nvar PositionOutOfBoundsError = class extends BaseError2 {\n  constructor({ length, position }) {\n    super(`Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`, { name: \"PositionOutOfBoundsError\" });\n  }\n};\nvar RecursiveReadLimitExceededError = class extends BaseError2 {\n  constructor({ count, limit }) {\n    super(`Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`, { name: \"RecursiveReadLimitExceededError\" });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/cursor.js\nvar staticCursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  positionReadCount: /* @__PURE__ */ new Map(),\n  recursiveReadCount: 0,\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\n  assertReadLimit() {\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\n      throw new RecursiveReadLimitExceededError({\n        count: this.recursiveReadCount + 1,\n        limit: this.recursiveReadLimit\n      });\n  },\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1)\n      throw new PositionOutOfBoundsError({\n        length: this.bytes.length,\n        position\n      });\n  },\n  decrementPosition(offset) {\n    if (offset < 0)\n      throw new NegativeOffsetError({ offset });\n    const position = this.position - offset;\n    this.assertPosition(position);\n    this.position = position;\n  },\n  getReadCount(position) {\n    return this.positionReadCount.get(position || this.position) || 0;\n  },\n  incrementPosition(offset) {\n    if (offset < 0)\n      throw new NegativeOffsetError({ offset });\n    const position = this.position + offset;\n    this.assertPosition(position);\n    this.position = position;\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position);\n    return this.bytes[position];\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + length - 1);\n    return this.bytes.subarray(position, position + length);\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position);\n    return this.bytes[position];\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + 1);\n    return this.dataView.getUint16(position);\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + 2);\n    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + 3);\n    return this.dataView.getUint32(position);\n  },\n  pushByte(byte) {\n    this.assertPosition(this.position);\n    this.bytes[this.position] = byte;\n    this.position++;\n  },\n  pushBytes(bytes) {\n    this.assertPosition(this.position + bytes.length - 1);\n    this.bytes.set(bytes, this.position);\n    this.position += bytes.length;\n  },\n  pushUint8(value) {\n    this.assertPosition(this.position);\n    this.bytes[this.position] = value;\n    this.position++;\n  },\n  pushUint16(value) {\n    this.assertPosition(this.position + 1);\n    this.dataView.setUint16(this.position, value);\n    this.position += 2;\n  },\n  pushUint24(value) {\n    this.assertPosition(this.position + 2);\n    this.dataView.setUint16(this.position, value >> 8);\n    this.dataView.setUint8(this.position + 2, value & ~4294967040);\n    this.position += 3;\n  },\n  pushUint32(value) {\n    this.assertPosition(this.position + 3);\n    this.dataView.setUint32(this.position, value);\n    this.position += 4;\n  },\n  readByte() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectByte();\n    this.position++;\n    return value;\n  },\n  readBytes(length, size2) {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectBytes(length);\n    this.position += size2 ?? length;\n    return value;\n  },\n  readUint8() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint8();\n    this.position += 1;\n    return value;\n  },\n  readUint16() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint16();\n    this.position += 2;\n    return value;\n  },\n  readUint24() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint24();\n    this.position += 3;\n    return value;\n  },\n  readUint32() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint32();\n    this.position += 4;\n    return value;\n  },\n  get remaining() {\n    return this.bytes.length - this.position;\n  },\n  setPosition(position) {\n    const oldPosition = this.position;\n    this.assertPosition(position);\n    this.position = position;\n    return () => this.position = oldPosition;\n  },\n  _touch() {\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)\n      return;\n    const count = this.getReadCount();\n    this.positionReadCount.set(this.position, count + 1);\n    if (count > 0)\n      this.recursiveReadCount++;\n  }\n};\nfunction createCursor(bytes, { recursiveReadLimit = 8192 } = {}) {\n  const cursor = Object.create(staticCursor);\n  cursor.bytes = bytes;\n  cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n  cursor.positionReadCount = /* @__PURE__ */ new Map();\n  cursor.recursiveReadLimit = recursiveReadLimit;\n  return cursor;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/encoding/fromBytes.js\nfunction bytesToBigInt(bytes, opts = {}) {\n  if (typeof opts.size !== \"undefined\")\n    assertSize(bytes, { size: opts.size });\n  const hex = bytesToHex(bytes, opts);\n  return hexToBigInt(hex, opts);\n}\nfunction bytesToBool(bytes_, opts = {}) {\n  let bytes = bytes_;\n  if (typeof opts.size !== \"undefined\") {\n    assertSize(bytes, { size: opts.size });\n    bytes = trim(bytes);\n  }\n  if (bytes.length > 1 || bytes[0] > 1)\n    throw new InvalidBytesBooleanError(bytes);\n  return Boolean(bytes[0]);\n}\nfunction bytesToNumber(bytes, opts = {}) {\n  if (typeof opts.size !== \"undefined\")\n    assertSize(bytes, { size: opts.size });\n  const hex = bytesToHex(bytes, opts);\n  return hexToNumber(hex, opts);\n}\nfunction bytesToString(bytes_, opts = {}) {\n  let bytes = bytes_;\n  if (typeof opts.size !== \"undefined\") {\n    assertSize(bytes, { size: opts.size });\n    bytes = trim(bytes, { dir: \"right\" });\n  }\n  return new TextDecoder().decode(bytes);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/data/concat.js\nfunction concat(values) {\n  if (typeof values[0] === \"string\")\n    return concatHex(values);\n  return concatBytes(values);\n}\nfunction concatBytes(values) {\n  let length = 0;\n  for (const arr of values) {\n    length += arr.length;\n  }\n  const result = new Uint8Array(length);\n  let offset = 0;\n  for (const arr of values) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\nfunction concatHex(values) {\n  return `0x${values.reduce((acc, x) => acc + x.replace(\"0x\", \"\"), \"\")}`;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/regex.js\nvar integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js\nfunction encodeAbiParameters(params, values) {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length,\n      givenLength: values.length\n    });\n  const preparedParams = prepareParams({\n    params,\n    values\n  });\n  const data = encodeParams(preparedParams);\n  if (data.length === 0)\n    return \"0x\";\n  return data;\n}\nfunction prepareParams({ params, values }) {\n  const preparedParams = [];\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }));\n  }\n  return preparedParams;\n}\nfunction prepareParam({ param, value }) {\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents) {\n    const [length, type] = arrayComponents;\n    return encodeArray(value, { length, param: { ...param, type } });\n  }\n  if (param.type === \"tuple\") {\n    return encodeTuple(value, {\n      param\n    });\n  }\n  if (param.type === \"address\") {\n    return encodeAddress(value);\n  }\n  if (param.type === \"bool\") {\n    return encodeBool(value);\n  }\n  if (param.type.startsWith(\"uint\") || param.type.startsWith(\"int\")) {\n    const signed = param.type.startsWith(\"int\");\n    const [, , size2 = \"256\"] = integerRegex2.exec(param.type) ?? [];\n    return encodeNumber(value, {\n      signed,\n      size: Number(size2)\n    });\n  }\n  if (param.type.startsWith(\"bytes\")) {\n    return encodeBytes(value, { param });\n  }\n  if (param.type === \"string\") {\n    return encodeString(value);\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: \"/docs/contract/encodeAbiParameters\"\n  });\n}\nfunction encodeParams(preparedParams) {\n  let staticSize = 0;\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i];\n    if (dynamic)\n      staticSize += 32;\n    else\n      staticSize += size(encoded);\n  }\n  const staticParams = [];\n  const dynamicParams = [];\n  let dynamicSize = 0;\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i];\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }));\n      dynamicParams.push(encoded);\n      dynamicSize += size(encoded);\n    } else {\n      staticParams.push(encoded);\n    }\n  }\n  return concat([...staticParams, ...dynamicParams]);\n}\nfunction encodeAddress(value) {\n  if (!isAddress(value))\n    throw new InvalidAddressError({ address: value });\n  return { dynamic: false, encoded: padHex(value.toLowerCase()) };\n}\nfunction encodeArray(value, { length, param }) {\n  const dynamic = length === null;\n  if (!Array.isArray(value))\n    throw new InvalidArrayError(value);\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`\n    });\n  let dynamicChild = false;\n  const preparedParams = [];\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] });\n    if (preparedParam.dynamic)\n      dynamicChild = true;\n    preparedParams.push(preparedParam);\n  }\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams);\n    if (dynamic) {\n      const length2 = numberToHex(preparedParams.length, { size: 32 });\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length2, data]) : length2\n      };\n    }\n    if (dynamicChild)\n      return { dynamic: true, encoded: data };\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded))\n  };\n}\nfunction encodeBytes(value, { param }) {\n  const [, paramSize] = param.type.split(\"bytes\");\n  const bytesSize = size(value);\n  if (!paramSize) {\n    let value_ = value;\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: \"right\",\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32\n      });\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_])\n    };\n  }\n  if (bytesSize !== Number.parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: Number.parseInt(paramSize),\n      value\n    });\n  return { dynamic: false, encoded: padHex(value, { dir: \"right\" }) };\n}\nfunction encodeBool(value) {\n  if (typeof value !== \"boolean\")\n    throw new BaseError2(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`);\n  return { dynamic: false, encoded: padHex(boolToHex(value)) };\n}\nfunction encodeNumber(value, { signed, size: size2 = 256 }) {\n  if (typeof size2 === \"number\") {\n    const max = 2n ** (BigInt(size2) - (signed ? 1n : 0n)) - 1n;\n    const min = signed ? -max - 1n : 0n;\n    if (value > max || value < min)\n      throw new IntegerOutOfRangeError({\n        max: max.toString(),\n        min: min.toString(),\n        signed,\n        size: size2 / 8,\n        value: value.toString()\n      });\n  }\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed\n    })\n  };\n}\nfunction encodeString(value) {\n  const hexValue = stringToHex(value);\n  const partsLength = Math.ceil(size(hexValue) / 32);\n  const parts = [];\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n      dir: \"right\"\n    }));\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts\n    ])\n  };\n}\nfunction encodeTuple(value, { param }) {\n  let dynamic = false;\n  const preparedParams = [];\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i];\n    const index = Array.isArray(value) ? i : param_.name;\n    const preparedParam = prepareParam({\n      param: param_,\n      value: value[index]\n    });\n    preparedParams.push(preparedParam);\n    if (preparedParam.dynamic)\n      dynamic = true;\n  }\n  return {\n    dynamic,\n    encoded: dynamic ? encodeParams(preparedParams) : concat(preparedParams.map(({ encoded }) => encoded))\n  };\n}\nfunction getArrayComponents(type) {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n  return matches ? (\n    // Return `null` if the array is dynamic.\n    [matches[2] ? Number(matches[2]) : null, matches[1]]\n  ) : void 0;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\nfunction decodeAbiParameters(params, data) {\n  const bytes = typeof data === \"string\" ? hexToBytes(data) : data;\n  const cursor = createCursor(bytes);\n  if (size(bytes) === 0 && params.length > 0)\n    throw new AbiDecodingZeroDataError();\n  if (size(data) && size(data) < 32)\n    throw new AbiDecodingDataSizeTooSmallError({\n      data: typeof data === \"string\" ? data : bytesToHex(data),\n      params,\n      size: size(data)\n    });\n  let consumed = 0;\n  const values = [];\n  for (let i = 0; i < params.length; ++i) {\n    const param = params[i];\n    cursor.setPosition(consumed);\n    const [data2, consumed_] = decodeParameter(cursor, param, {\n      staticPosition: 0\n    });\n    consumed += consumed_;\n    values.push(data2);\n  }\n  return values;\n}\nfunction decodeParameter(cursor, param, { staticPosition }) {\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents) {\n    const [length, type] = arrayComponents;\n    return decodeArray(cursor, { ...param, type }, { length, staticPosition });\n  }\n  if (param.type === \"tuple\")\n    return decodeTuple(cursor, param, { staticPosition });\n  if (param.type === \"address\")\n    return decodeAddress(cursor);\n  if (param.type === \"bool\")\n    return decodeBool(cursor);\n  if (param.type.startsWith(\"bytes\"))\n    return decodeBytes(cursor, param, { staticPosition });\n  if (param.type.startsWith(\"uint\") || param.type.startsWith(\"int\"))\n    return decodeNumber(cursor, param);\n  if (param.type === \"string\")\n    return decodeString(cursor, { staticPosition });\n  throw new InvalidAbiDecodingTypeError(param.type, {\n    docsPath: \"/docs/contract/decodeAbiParameters\"\n  });\n}\nvar sizeOfLength = 32;\nvar sizeOfOffset = 32;\nfunction decodeAddress(cursor) {\n  const value = cursor.readBytes(32);\n  return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32];\n}\nfunction decodeArray(cursor, param, { length, staticPosition }) {\n  if (!length) {\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n    const start = staticPosition + offset;\n    const startOfData = start + sizeOfLength;\n    cursor.setPosition(start);\n    const length2 = bytesToNumber(cursor.readBytes(sizeOfLength));\n    const dynamicChild = hasDynamicChild(param);\n    let consumed2 = 0;\n    const value2 = [];\n    for (let i = 0; i < length2; ++i) {\n      cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed2));\n      const [data, consumed_] = decodeParameter(cursor, param, {\n        staticPosition: startOfData\n      });\n      consumed2 += consumed_;\n      value2.push(data);\n    }\n    cursor.setPosition(staticPosition + 32);\n    return [value2, 32];\n  }\n  if (hasDynamicChild(param)) {\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n    const start = staticPosition + offset;\n    const value2 = [];\n    for (let i = 0; i < length; ++i) {\n      cursor.setPosition(start + i * 32);\n      const [data] = decodeParameter(cursor, param, {\n        staticPosition: start\n      });\n      value2.push(data);\n    }\n    cursor.setPosition(staticPosition + 32);\n    return [value2, 32];\n  }\n  let consumed = 0;\n  const value = [];\n  for (let i = 0; i < length; ++i) {\n    const [data, consumed_] = decodeParameter(cursor, param, {\n      staticPosition: staticPosition + consumed\n    });\n    consumed += consumed_;\n    value.push(data);\n  }\n  return [value, consumed];\n}\nfunction decodeBool(cursor) {\n  return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32];\n}\nfunction decodeBytes(cursor, param, { staticPosition }) {\n  const [_, size2] = param.type.split(\"bytes\");\n  if (!size2) {\n    const offset = bytesToNumber(cursor.readBytes(32));\n    cursor.setPosition(staticPosition + offset);\n    const length = bytesToNumber(cursor.readBytes(32));\n    if (length === 0) {\n      cursor.setPosition(staticPosition + 32);\n      return [\"0x\", 32];\n    }\n    const data = cursor.readBytes(length);\n    cursor.setPosition(staticPosition + 32);\n    return [bytesToHex(data), 32];\n  }\n  const value = bytesToHex(cursor.readBytes(Number.parseInt(size2), 32));\n  return [value, 32];\n}\nfunction decodeNumber(cursor, param) {\n  const signed = param.type.startsWith(\"int\");\n  const size2 = Number.parseInt(param.type.split(\"int\")[1] || \"256\");\n  const value = cursor.readBytes(32);\n  return [\n    size2 > 48 ? bytesToBigInt(value, { signed }) : bytesToNumber(value, { signed }),\n    32\n  ];\n}\nfunction decodeTuple(cursor, param, { staticPosition }) {\n  const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);\n  const value = hasUnnamedChild ? [] : {};\n  let consumed = 0;\n  if (hasDynamicChild(param)) {\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n    const start = staticPosition + offset;\n    for (let i = 0; i < param.components.length; ++i) {\n      const component = param.components[i];\n      cursor.setPosition(start + consumed);\n      const [data, consumed_] = decodeParameter(cursor, component, {\n        staticPosition: start\n      });\n      consumed += consumed_;\n      value[hasUnnamedChild ? i : component?.name] = data;\n    }\n    cursor.setPosition(staticPosition + 32);\n    return [value, 32];\n  }\n  for (let i = 0; i < param.components.length; ++i) {\n    const component = param.components[i];\n    const [data, consumed_] = decodeParameter(cursor, component, {\n      staticPosition\n    });\n    value[hasUnnamedChild ? i : component?.name] = data;\n    consumed += consumed_;\n  }\n  return [value, consumed];\n}\nfunction decodeString(cursor, { staticPosition }) {\n  const offset = bytesToNumber(cursor.readBytes(32));\n  const start = staticPosition + offset;\n  cursor.setPosition(start);\n  const length = bytesToNumber(cursor.readBytes(32));\n  if (length === 0) {\n    cursor.setPosition(staticPosition + 32);\n    return [\"\", 32];\n  }\n  const data = cursor.readBytes(length, 32);\n  const value = bytesToString(trim(data));\n  cursor.setPosition(staticPosition + 32);\n  return [value, 32];\n}\nfunction hasDynamicChild(param) {\n  const { type } = param;\n  if (type === \"string\")\n    return true;\n  if (type === \"bytes\")\n    return true;\n  if (type.endsWith(\"[]\"))\n    return true;\n  if (type === \"tuple\")\n    return param.components?.some(hasDynamicChild);\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents && hasDynamicChild({ ...param, type: arrayComponents[1] }))\n    return true;\n  return false;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/decodeErrorResult.js\nfunction decodeErrorResult(parameters) {\n  const { abi, data } = parameters;\n  const signature = slice(data, 0, 4);\n  if (signature === \"0x\")\n    throw new AbiDecodingZeroDataError();\n  const abi_ = [...abi || [], solidityError, solidityPanic];\n  const abiItem = abi_.find((x) => x.type === \"error\" && signature === toFunctionSelector(formatAbiItem2(x)));\n  if (!abiItem)\n    throw new AbiErrorSignatureNotFoundError(signature, {\n      docsPath: \"/docs/contract/decodeErrorResult\"\n    });\n  return {\n    abiItem,\n    args: \"inputs\" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? decodeAbiParameters(abiItem.inputs, slice(data, 4)) : void 0,\n    errorName: abiItem.name\n  };\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/stringify.js\nvar stringify = (value, replacer, space) => JSON.stringify(value, (key, value_) => {\n  const value2 = typeof value_ === \"bigint\" ? value_.toString() : value_;\n  return typeof replacer === \"function\" ? replacer(key, value2) : value2;\n}, space);\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/hash/toEventSelector.js\nvar toEventSelector = toSignatureHash;\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/getAbiItem.js\nfunction getAbiItem(parameters) {\n  const { abi, args = [], name } = parameters;\n  const isSelector = isHex(name, { strict: false });\n  const abiItems = abi.filter((abiItem) => {\n    if (isSelector) {\n      if (abiItem.type === \"function\")\n        return toFunctionSelector(abiItem) === name;\n      if (abiItem.type === \"event\")\n        return toEventSelector(abiItem) === name;\n      return false;\n    }\n    return \"name\" in abiItem && abiItem.name === name;\n  });\n  if (abiItems.length === 0)\n    return void 0;\n  if (abiItems.length === 1)\n    return abiItems[0];\n  let matchedAbiItem = void 0;\n  for (const abiItem of abiItems) {\n    if (!(\"inputs\" in abiItem))\n      continue;\n    if (!args || args.length === 0) {\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\n        return abiItem;\n      continue;\n    }\n    if (!abiItem.inputs)\n      continue;\n    if (abiItem.inputs.length === 0)\n      continue;\n    if (abiItem.inputs.length !== args.length)\n      continue;\n    const matched = args.every((arg, index) => {\n      const abiParameter = \"inputs\" in abiItem && abiItem.inputs[index];\n      if (!abiParameter)\n        return false;\n      return isArgOfType(arg, abiParameter);\n    });\n    if (matched) {\n      if (matchedAbiItem && \"inputs\" in matchedAbiItem && matchedAbiItem.inputs) {\n        const ambiguousTypes = getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);\n        if (ambiguousTypes)\n          throw new AbiItemAmbiguityError({\n            abiItem,\n            type: ambiguousTypes[0]\n          }, {\n            abiItem: matchedAbiItem,\n            type: ambiguousTypes[1]\n          });\n      }\n      matchedAbiItem = abiItem;\n    }\n  }\n  if (matchedAbiItem)\n    return matchedAbiItem;\n  return abiItems[0];\n}\nfunction isArgOfType(arg, abiParameter) {\n  const argType = typeof arg;\n  const abiParameterType = abiParameter.type;\n  switch (abiParameterType) {\n    case \"address\":\n      return isAddress(arg, { strict: false });\n    case \"bool\":\n      return argType === \"boolean\";\n    case \"function\":\n      return argType === \"string\";\n    case \"string\":\n      return argType === \"string\";\n    default: {\n      if (abiParameterType === \"tuple\" && \"components\" in abiParameter)\n        return Object.values(abiParameter.components).every((component, index) => {\n          return isArgOfType(Object.values(arg)[index], component);\n        });\n      if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))\n        return argType === \"number\" || argType === \"bigint\";\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n        return argType === \"string\" || arg instanceof Uint8Array;\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n        return Array.isArray(arg) && arg.every((x) => isArgOfType(x, {\n          ...abiParameter,\n          // Pop off `[]` or `[M]` from end of type\n          type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, \"\")\n        }));\n      }\n      return false;\n    }\n  }\n}\nfunction getAmbiguousTypes(sourceParameters, targetParameters, args) {\n  for (const parameterIndex in sourceParameters) {\n    const sourceParameter = sourceParameters[parameterIndex];\n    const targetParameter = targetParameters[parameterIndex];\n    if (sourceParameter.type === \"tuple\" && targetParameter.type === \"tuple\" && \"components\" in sourceParameter && \"components\" in targetParameter)\n      return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);\n    const types = [sourceParameter.type, targetParameter.type];\n    const ambiguous = (() => {\n      if (types.includes(\"address\") && types.includes(\"bytes20\"))\n        return true;\n      if (types.includes(\"address\") && types.includes(\"string\"))\n        return isAddress(args[parameterIndex], { strict: false });\n      if (types.includes(\"address\") && types.includes(\"bytes\"))\n        return isAddress(args[parameterIndex], { strict: false });\n      return false;\n    })();\n    if (ambiguous)\n      return types;\n  }\n  return;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/constants/unit.js\nvar etherUnits = {\n  gwei: 9,\n  wei: 18\n};\nvar gweiUnits = {\n  ether: -9,\n  wei: 9\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/formatUnits.js\nfunction formatUnits(value, decimals) {\n  let display = value.toString();\n  const negative = display.startsWith(\"-\");\n  if (negative)\n    display = display.slice(1);\n  display = display.padStart(decimals, \"0\");\n  let [integer, fraction] = [\n    display.slice(0, display.length - decimals),\n    display.slice(display.length - decimals)\n  ];\n  fraction = fraction.replace(/(0+)$/, \"\");\n  return `${negative ? \"-\" : \"\"}${integer || \"0\"}${fraction ? `.${fraction}` : \"\"}`;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/formatEther.js\nfunction formatEther(wei, unit = \"wei\") {\n  return formatUnits(wei, etherUnits[unit]);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/formatGwei.js\nfunction formatGwei(wei, unit = \"wei\") {\n  return formatUnits(wei, gweiUnits[unit]);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/stateOverride.js\nvar AccountStateConflictError = class extends BaseError2 {\n  constructor({ address }) {\n    super(`State for account \"${address}\" is set multiple times.`, {\n      name: \"AccountStateConflictError\"\n    });\n  }\n};\nvar StateAssignmentConflictError = class extends BaseError2 {\n  constructor() {\n    super(\"state and stateDiff are set on the same account.\", {\n      name: \"StateAssignmentConflictError\"\n    });\n  }\n};\nfunction prettyStateMapping(stateMapping) {\n  return stateMapping.reduce((pretty, { slot, value }) => {\n    return `${pretty}        ${slot}: ${value}\n`;\n  }, \"\");\n}\nfunction prettyStateOverride(stateOverride) {\n  return stateOverride.reduce((pretty, { address, ...state }) => {\n    let val = `${pretty}    ${address}:\n`;\n    if (state.nonce)\n      val += `      nonce: ${state.nonce}\n`;\n    if (state.balance)\n      val += `      balance: ${state.balance}\n`;\n    if (state.code)\n      val += `      code: ${state.code}\n`;\n    if (state.state) {\n      val += \"      state:\\n\";\n      val += prettyStateMapping(state.state);\n    }\n    if (state.stateDiff) {\n      val += \"      stateDiff:\\n\";\n      val += prettyStateMapping(state.stateDiff);\n    }\n    return val;\n  }, \"  State Override:\\n\").slice(0, -1);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/transaction.js\nfunction prettyPrint(args) {\n  const entries = Object.entries(args).map(([key, value]) => {\n    if (value === void 0 || value === false)\n      return null;\n    return [key, value];\n  }).filter(Boolean);\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);\n  return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join(\"\\n\");\n}\nvar FeeConflictError = class extends BaseError2 {\n  constructor() {\n    super([\n      \"Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.\",\n      \"Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.\"\n    ].join(\"\\n\"), { name: \"FeeConflictError\" });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/utils.js\nvar getUrl = (url) => url;\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/contract.js\nvar CallExecutionError = class extends BaseError2 {\n  constructor(cause, { account: account_, docsPath: docsPath4, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride }) {\n    const account = account_ ? parseAccount(account_) : void 0;\n    let prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value: typeof value !== \"undefined\" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || \"ETH\"}`,\n      data,\n      gas,\n      gasPrice: typeof gasPrice !== \"undefined\" && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas: typeof maxFeePerGas !== \"undefined\" && `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== \"undefined\" && `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce\n    });\n    if (stateOverride) {\n      prettyArgs += `\n${prettyStateOverride(stateOverride)}`;\n    }\n    super(cause.shortMessage, {\n      cause,\n      docsPath: docsPath4,\n      metaMessages: [\n        ...cause.metaMessages ? [...cause.metaMessages, \" \"] : [],\n        \"Raw Call Arguments:\",\n        prettyArgs\n      ].filter(Boolean),\n      name: \"CallExecutionError\"\n    });\n    Object.defineProperty(this, \"cause\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.cause = cause;\n  }\n};\nvar CounterfactualDeploymentFailedError = class extends BaseError2 {\n  constructor({ factory }) {\n    super(`Deployment for counterfactual contract call failed${factory ? ` for factory \"${factory}\".` : \"\"}`, {\n      metaMessages: [\n        \"Please ensure:\",\n        \"- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).\",\n        \"- The `factoryData` is a valid encoded function call for contract deployment function on the factory.\"\n      ],\n      name: \"CounterfactualDeploymentFailedError\"\n    });\n  }\n};\nvar RawContractError = class extends BaseError2 {\n  constructor({ data, message }) {\n    super(message || \"\", { name: \"RawContractError\" });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 3\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.data = data;\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/decodeFunctionResult.js\nvar docsPath = \"/docs/contract/decodeFunctionResult\";\nfunction decodeFunctionResult(parameters) {\n  const { abi, args, functionName, data } = parameters;\n  let abiItem = abi[0];\n  if (functionName) {\n    const item = getAbiItem({ abi, args, name: functionName });\n    if (!item)\n      throw new AbiFunctionNotFoundError(functionName, { docsPath });\n    abiItem = item;\n  }\n  if (abiItem.type !== \"function\")\n    throw new AbiFunctionNotFoundError(void 0, { docsPath });\n  if (!abiItem.outputs)\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath });\n  const values = decodeAbiParameters(abiItem.outputs, data);\n  if (values && values.length > 1)\n    return values;\n  if (values && values.length === 1)\n    return values[0];\n  return void 0;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/encodeDeployData.js\nvar docsPath2 = \"/docs/contract/encodeDeployData\";\nfunction encodeDeployData(parameters) {\n  const { abi, args, bytecode } = parameters;\n  if (!args || args.length === 0)\n    return bytecode;\n  const description = abi.find((x) => \"type\" in x && x.type === \"constructor\");\n  if (!description)\n    throw new AbiConstructorNotFoundError({ docsPath: docsPath2 });\n  if (!(\"inputs\" in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath: docsPath2 });\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath: docsPath2 });\n  const data = encodeAbiParameters(description.inputs, args);\n  return concatHex([bytecode, data]);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/prepareEncodeFunctionData.js\nvar docsPath3 = \"/docs/contract/encodeFunctionData\";\nfunction prepareEncodeFunctionData(parameters) {\n  const { abi, args, functionName } = parameters;\n  let abiItem = abi[0];\n  if (functionName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: functionName\n    });\n    if (!item)\n      throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath3 });\n    abiItem = item;\n  }\n  if (abiItem.type !== \"function\")\n    throw new AbiFunctionNotFoundError(void 0, { docsPath: docsPath3 });\n  return {\n    abi: [abiItem],\n    functionName: toFunctionSelector(formatAbiItem2(abiItem))\n  };\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/abi/encodeFunctionData.js\nfunction encodeFunctionData(parameters) {\n  const { args } = parameters;\n  const { abi, functionName } = (() => {\n    if (parameters.abi.length === 1 && parameters.functionName?.startsWith(\"0x\"))\n      return parameters;\n    return prepareEncodeFunctionData(parameters);\n  })();\n  const abiItem = abi[0];\n  const signature = functionName;\n  const data = \"inputs\" in abiItem && abiItem.inputs ? encodeAbiParameters(abiItem.inputs, args ?? []) : void 0;\n  return concatHex([signature, data ?? \"0x\"]);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/chain/getChainContractAddress.js\nfunction getChainContractAddress({ blockNumber, chain, contract: name }) {\n  const contract = chain?.contracts?.[name];\n  if (!contract)\n    throw new ChainDoesNotSupportContract({\n      chain,\n      contract: { name }\n    });\n  if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber)\n    throw new ChainDoesNotSupportContract({\n      blockNumber,\n      chain,\n      contract: {\n        name,\n        blockCreated: contract.blockCreated\n      }\n    });\n  return contract.address;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/node.js\nvar ExecutionRevertedError = class extends BaseError2 {\n  constructor({ cause, message } = {}) {\n    const reason = message?.replace(\"execution reverted: \", \"\")?.replace(\"execution reverted\", \"\");\n    super(`Execution reverted ${reason ? `with reason: ${reason}` : \"for an unknown reason\"}.`, {\n      cause,\n      name: \"ExecutionRevertedError\"\n    });\n  }\n};\nObject.defineProperty(ExecutionRevertedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: 3\n});\nObject.defineProperty(ExecutionRevertedError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /execution reverted/\n});\nvar FeeCapTooHighError = class extends BaseError2 {\n  constructor({ cause, maxFeePerGas } = {}) {\n    super(`The fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : \"\"}) cannot be higher than the maximum allowed value (2^256-1).`, {\n      cause,\n      name: \"FeeCapTooHighError\"\n    });\n  }\n};\nObject.defineProperty(FeeCapTooHighError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\n});\nvar FeeCapTooLowError = class extends BaseError2 {\n  constructor({ cause, maxFeePerGas } = {}) {\n    super(`The fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : \"\"} gwei) cannot be lower than the block base fee.`, {\n      cause,\n      name: \"FeeCapTooLowError\"\n    });\n  }\n};\nObject.defineProperty(FeeCapTooLowError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\n});\nvar NonceTooHighError = class extends BaseError2 {\n  constructor({ cause, nonce } = {}) {\n    super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : \"\"}is higher than the next one expected.`, { cause, name: \"NonceTooHighError\" });\n  }\n};\nObject.defineProperty(NonceTooHighError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /nonce too high/\n});\nvar NonceTooLowError = class extends BaseError2 {\n  constructor({ cause, nonce } = {}) {\n    super([\n      `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : \"\"}is lower than the current nonce of the account.`,\n      \"Try increasing the nonce or find the latest nonce with `getTransactionCount`.\"\n    ].join(\"\\n\"), { cause, name: \"NonceTooLowError\" });\n  }\n};\nObject.defineProperty(NonceTooLowError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /nonce too low|transaction already imported|already known/\n});\nvar NonceMaxValueError = class extends BaseError2 {\n  constructor({ cause, nonce } = {}) {\n    super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : \"\"}exceeds the maximum allowed nonce.`, { cause, name: \"NonceMaxValueError\" });\n  }\n};\nObject.defineProperty(NonceMaxValueError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /nonce has max value/\n});\nvar InsufficientFundsError = class extends BaseError2 {\n  constructor({ cause } = {}) {\n    super([\n      \"The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.\"\n    ].join(\"\\n\"), {\n      cause,\n      metaMessages: [\n        \"This error could arise when the account does not have enough funds to:\",\n        \" - pay for the total gas fee,\",\n        \" - pay for the value to send.\",\n        \" \",\n        \"The cost of the transaction is calculated as `gas * gas fee + value`, where:\",\n        \" - `gas` is the amount of gas needed for transaction to execute,\",\n        \" - `gas fee` is the gas fee,\",\n        \" - `value` is the amount of ether to send to the recipient.\"\n      ],\n      name: \"InsufficientFundsError\"\n    });\n  }\n};\nObject.defineProperty(InsufficientFundsError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /insufficient funds|exceeds transaction sender account balance/\n});\nvar IntrinsicGasTooHighError = class extends BaseError2 {\n  constructor({ cause, gas } = {}) {\n    super(`The amount of gas ${gas ? `(${gas}) ` : \"\"}provided for the transaction exceeds the limit allowed for the block.`, {\n      cause,\n      name: \"IntrinsicGasTooHighError\"\n    });\n  }\n};\nObject.defineProperty(IntrinsicGasTooHighError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /intrinsic gas too high|gas limit reached/\n});\nvar IntrinsicGasTooLowError = class extends BaseError2 {\n  constructor({ cause, gas } = {}) {\n    super(`The amount of gas ${gas ? `(${gas}) ` : \"\"}provided for the transaction is too low.`, {\n      cause,\n      name: \"IntrinsicGasTooLowError\"\n    });\n  }\n};\nObject.defineProperty(IntrinsicGasTooLowError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /intrinsic gas too low/\n});\nvar TransactionTypeNotSupportedError = class extends BaseError2 {\n  constructor({ cause }) {\n    super(\"The transaction type is not supported for this chain.\", {\n      cause,\n      name: \"TransactionTypeNotSupportedError\"\n    });\n  }\n};\nObject.defineProperty(TransactionTypeNotSupportedError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /transaction type not valid/\n});\nvar TipAboveFeeCapError = class extends BaseError2 {\n  constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {\n    super([\n      `The provided tip (\\`maxPriorityFeePerGas\\`${maxPriorityFeePerGas ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei` : \"\"}) cannot be higher than the fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : \"\"}).`\n    ].join(\"\\n\"), {\n      cause,\n      name: \"TipAboveFeeCapError\"\n    });\n  }\n};\nObject.defineProperty(TipAboveFeeCapError, \"nodeMessage\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\n});\nvar UnknownNodeError = class extends BaseError2 {\n  constructor({ cause }) {\n    super(`An error occurred while executing: ${cause?.shortMessage}`, {\n      cause,\n      name: \"UnknownNodeError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/request.js\nvar HttpRequestError = class extends BaseError2 {\n  constructor({ body, cause, details, headers, status, url }) {\n    super(\"HTTP request failed.\", {\n      cause,\n      details,\n      metaMessages: [\n        status && `Status: ${status}`,\n        `URL: ${getUrl(url)}`,\n        body && `Request body: ${stringify(body)}`\n      ].filter(Boolean),\n      name: \"HttpRequestError\"\n    });\n    Object.defineProperty(this, \"body\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"headers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"status\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"url\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.body = body;\n    this.headers = headers;\n    this.status = status;\n    this.url = url;\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/errors/getNodeError.js\nfunction getNodeError(err, args) {\n  const message = (err.details || \"\").toLowerCase();\n  const executionRevertedError = err instanceof BaseError2 ? err.walk((e) => e?.code === ExecutionRevertedError.code) : err;\n  if (executionRevertedError instanceof BaseError2)\n    return new ExecutionRevertedError({\n      cause: err,\n      message: executionRevertedError.details\n    });\n  if (ExecutionRevertedError.nodeMessage.test(message))\n    return new ExecutionRevertedError({\n      cause: err,\n      message: err.details\n    });\n  if (FeeCapTooHighError.nodeMessage.test(message))\n    return new FeeCapTooHighError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas\n    });\n  if (FeeCapTooLowError.nodeMessage.test(message))\n    return new FeeCapTooLowError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas\n    });\n  if (NonceTooHighError.nodeMessage.test(message))\n    return new NonceTooHighError({ cause: err, nonce: args?.nonce });\n  if (NonceTooLowError.nodeMessage.test(message))\n    return new NonceTooLowError({ cause: err, nonce: args?.nonce });\n  if (NonceMaxValueError.nodeMessage.test(message))\n    return new NonceMaxValueError({ cause: err, nonce: args?.nonce });\n  if (InsufficientFundsError.nodeMessage.test(message))\n    return new InsufficientFundsError({ cause: err });\n  if (IntrinsicGasTooHighError.nodeMessage.test(message))\n    return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas });\n  if (IntrinsicGasTooLowError.nodeMessage.test(message))\n    return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas });\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n    return new TransactionTypeNotSupportedError({ cause: err });\n  if (TipAboveFeeCapError.nodeMessage.test(message))\n    return new TipAboveFeeCapError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n      maxPriorityFeePerGas: args?.maxPriorityFeePerGas\n    });\n  return new UnknownNodeError({\n    cause: err\n  });\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/errors/getCallError.js\nfunction getCallError(err, { docsPath: docsPath4, ...args }) {\n  const cause = (() => {\n    const cause2 = getNodeError(err, args);\n    if (cause2 instanceof UnknownNodeError)\n      return err;\n    return cause2;\n  })();\n  return new CallExecutionError(cause, {\n    docsPath: docsPath4,\n    ...args\n  });\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/formatters/extract.js\nfunction extract(value_, { format }) {\n  if (!format)\n    return {};\n  const value = {};\n  function extract_(formatted2) {\n    const keys = Object.keys(formatted2);\n    for (const key of keys) {\n      if (key in value_)\n        value[key] = value_[key];\n      if (formatted2[key] && typeof formatted2[key] === \"object\" && !Array.isArray(formatted2[key]))\n        extract_(formatted2[key]);\n    }\n  }\n  const formatted = format(value_ || {});\n  extract_(formatted);\n  return value;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/formatters/transactionRequest.js\nvar rpcTransactionType = {\n  legacy: \"0x0\",\n  eip2930: \"0x1\",\n  eip1559: \"0x2\",\n  eip4844: \"0x3\",\n  eip7702: \"0x4\"\n};\nfunction formatTransactionRequest(request) {\n  const rpcRequest = {};\n  if (typeof request.authorizationList !== \"undefined\")\n    rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);\n  if (typeof request.accessList !== \"undefined\")\n    rpcRequest.accessList = request.accessList;\n  if (typeof request.blobVersionedHashes !== \"undefined\")\n    rpcRequest.blobVersionedHashes = request.blobVersionedHashes;\n  if (typeof request.blobs !== \"undefined\") {\n    if (typeof request.blobs[0] !== \"string\")\n      rpcRequest.blobs = request.blobs.map((x) => bytesToHex(x));\n    else\n      rpcRequest.blobs = request.blobs;\n  }\n  if (typeof request.data !== \"undefined\")\n    rpcRequest.data = request.data;\n  if (typeof request.from !== \"undefined\")\n    rpcRequest.from = request.from;\n  if (typeof request.gas !== \"undefined\")\n    rpcRequest.gas = numberToHex(request.gas);\n  if (typeof request.gasPrice !== \"undefined\")\n    rpcRequest.gasPrice = numberToHex(request.gasPrice);\n  if (typeof request.maxFeePerBlobGas !== \"undefined\")\n    rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas);\n  if (typeof request.maxFeePerGas !== \"undefined\")\n    rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas);\n  if (typeof request.maxPriorityFeePerGas !== \"undefined\")\n    rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas);\n  if (typeof request.nonce !== \"undefined\")\n    rpcRequest.nonce = numberToHex(request.nonce);\n  if (typeof request.to !== \"undefined\")\n    rpcRequest.to = request.to;\n  if (typeof request.type !== \"undefined\")\n    rpcRequest.type = rpcTransactionType[request.type];\n  if (typeof request.value !== \"undefined\")\n    rpcRequest.value = numberToHex(request.value);\n  return rpcRequest;\n}\nfunction formatAuthorizationList(authorizationList) {\n  return authorizationList.map((authorization) => ({\n    address: authorization.contractAddress,\n    r: authorization.r,\n    s: authorization.s,\n    chainId: numberToHex(authorization.chainId),\n    nonce: numberToHex(authorization.nonce),\n    ...typeof authorization.yParity !== \"undefined\" ? { yParity: numberToHex(authorization.yParity) } : {},\n    ...typeof authorization.v !== \"undefined\" && typeof authorization.yParity === \"undefined\" ? { v: numberToHex(authorization.v) } : {}\n  }));\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/promise/withResolvers.js\nfunction withResolvers() {\n  let resolve = () => void 0;\n  let reject = () => void 0;\n  const promise = new Promise((resolve_, reject_) => {\n    resolve = resolve_;\n    reject = reject_;\n  });\n  return { promise, resolve, reject };\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/promise/createBatchScheduler.js\nvar schedulerCache = /* @__PURE__ */ new Map();\nfunction createBatchScheduler({ fn, id, shouldSplitBatch, wait = 0, sort }) {\n  const exec = async () => {\n    const scheduler = getScheduler();\n    flush();\n    const args = scheduler.map(({ args: args2 }) => args2);\n    if (args.length === 0)\n      return;\n    fn(args).then((data) => {\n      if (sort && Array.isArray(data))\n        data.sort(sort);\n      for (let i = 0; i < scheduler.length; i++) {\n        const { resolve } = scheduler[i];\n        resolve?.([data[i], data]);\n      }\n    }).catch((err) => {\n      for (let i = 0; i < scheduler.length; i++) {\n        const { reject } = scheduler[i];\n        reject?.(err);\n      }\n    });\n  };\n  const flush = () => schedulerCache.delete(id);\n  const getBatchedArgs = () => getScheduler().map(({ args }) => args);\n  const getScheduler = () => schedulerCache.get(id) || [];\n  const setScheduler = (item) => schedulerCache.set(id, [...getScheduler(), item]);\n  return {\n    flush,\n    async schedule(args) {\n      const { promise, resolve, reject } = withResolvers();\n      const split2 = shouldSplitBatch?.([...getBatchedArgs(), args]);\n      if (split2)\n        exec();\n      const hasActiveScheduler = getScheduler().length > 0;\n      if (hasActiveScheduler) {\n        setScheduler({ args, resolve, reject });\n        return promise;\n      }\n      setScheduler({ args, resolve, reject });\n      setTimeout(exec, wait);\n      return promise;\n    }\n  };\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/stateOverride.js\nfunction serializeStateMapping(stateMapping) {\n  if (!stateMapping || stateMapping.length === 0)\n    return void 0;\n  return stateMapping.reduce((acc, { slot, value }) => {\n    if (slot.length !== 66)\n      throw new InvalidBytesLengthError({\n        size: slot.length,\n        targetSize: 66,\n        type: \"hex\"\n      });\n    if (value.length !== 66)\n      throw new InvalidBytesLengthError({\n        size: value.length,\n        targetSize: 66,\n        type: \"hex\"\n      });\n    acc[slot] = value;\n    return acc;\n  }, {});\n}\nfunction serializeAccountStateOverride(parameters) {\n  const { balance, nonce, state, stateDiff, code } = parameters;\n  const rpcAccountStateOverride = {};\n  if (code !== void 0)\n    rpcAccountStateOverride.code = code;\n  if (balance !== void 0)\n    rpcAccountStateOverride.balance = numberToHex(balance);\n  if (nonce !== void 0)\n    rpcAccountStateOverride.nonce = numberToHex(nonce);\n  if (state !== void 0)\n    rpcAccountStateOverride.state = serializeStateMapping(state);\n  if (stateDiff !== void 0) {\n    if (rpcAccountStateOverride.state)\n      throw new StateAssignmentConflictError();\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);\n  }\n  return rpcAccountStateOverride;\n}\nfunction serializeStateOverride(parameters) {\n  if (!parameters)\n    return void 0;\n  const rpcStateOverride = {};\n  for (const { address, ...accountState } of parameters) {\n    if (!isAddress(address, { strict: false }))\n      throw new InvalidAddressError({ address });\n    if (rpcStateOverride[address])\n      throw new AccountStateConflictError({ address });\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState);\n  }\n  return rpcStateOverride;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/constants/number.js\nvar maxInt8 = 2n ** (8n - 1n) - 1n;\nvar maxInt16 = 2n ** (16n - 1n) - 1n;\nvar maxInt24 = 2n ** (24n - 1n) - 1n;\nvar maxInt32 = 2n ** (32n - 1n) - 1n;\nvar maxInt40 = 2n ** (40n - 1n) - 1n;\nvar maxInt48 = 2n ** (48n - 1n) - 1n;\nvar maxInt56 = 2n ** (56n - 1n) - 1n;\nvar maxInt64 = 2n ** (64n - 1n) - 1n;\nvar maxInt72 = 2n ** (72n - 1n) - 1n;\nvar maxInt80 = 2n ** (80n - 1n) - 1n;\nvar maxInt88 = 2n ** (88n - 1n) - 1n;\nvar maxInt96 = 2n ** (96n - 1n) - 1n;\nvar maxInt104 = 2n ** (104n - 1n) - 1n;\nvar maxInt112 = 2n ** (112n - 1n) - 1n;\nvar maxInt120 = 2n ** (120n - 1n) - 1n;\nvar maxInt128 = 2n ** (128n - 1n) - 1n;\nvar maxInt136 = 2n ** (136n - 1n) - 1n;\nvar maxInt144 = 2n ** (144n - 1n) - 1n;\nvar maxInt152 = 2n ** (152n - 1n) - 1n;\nvar maxInt160 = 2n ** (160n - 1n) - 1n;\nvar maxInt168 = 2n ** (168n - 1n) - 1n;\nvar maxInt176 = 2n ** (176n - 1n) - 1n;\nvar maxInt184 = 2n ** (184n - 1n) - 1n;\nvar maxInt192 = 2n ** (192n - 1n) - 1n;\nvar maxInt200 = 2n ** (200n - 1n) - 1n;\nvar maxInt208 = 2n ** (208n - 1n) - 1n;\nvar maxInt216 = 2n ** (216n - 1n) - 1n;\nvar maxInt224 = 2n ** (224n - 1n) - 1n;\nvar maxInt232 = 2n ** (232n - 1n) - 1n;\nvar maxInt240 = 2n ** (240n - 1n) - 1n;\nvar maxInt248 = 2n ** (248n - 1n) - 1n;\nvar maxInt256 = 2n ** (256n - 1n) - 1n;\nvar minInt8 = -(2n ** (8n - 1n));\nvar minInt16 = -(2n ** (16n - 1n));\nvar minInt24 = -(2n ** (24n - 1n));\nvar minInt32 = -(2n ** (32n - 1n));\nvar minInt40 = -(2n ** (40n - 1n));\nvar minInt48 = -(2n ** (48n - 1n));\nvar minInt56 = -(2n ** (56n - 1n));\nvar minInt64 = -(2n ** (64n - 1n));\nvar minInt72 = -(2n ** (72n - 1n));\nvar minInt80 = -(2n ** (80n - 1n));\nvar minInt88 = -(2n ** (88n - 1n));\nvar minInt96 = -(2n ** (96n - 1n));\nvar minInt104 = -(2n ** (104n - 1n));\nvar minInt112 = -(2n ** (112n - 1n));\nvar minInt120 = -(2n ** (120n - 1n));\nvar minInt128 = -(2n ** (128n - 1n));\nvar minInt136 = -(2n ** (136n - 1n));\nvar minInt144 = -(2n ** (144n - 1n));\nvar minInt152 = -(2n ** (152n - 1n));\nvar minInt160 = -(2n ** (160n - 1n));\nvar minInt168 = -(2n ** (168n - 1n));\nvar minInt176 = -(2n ** (176n - 1n));\nvar minInt184 = -(2n ** (184n - 1n));\nvar minInt192 = -(2n ** (192n - 1n));\nvar minInt200 = -(2n ** (200n - 1n));\nvar minInt208 = -(2n ** (208n - 1n));\nvar minInt216 = -(2n ** (216n - 1n));\nvar minInt224 = -(2n ** (224n - 1n));\nvar minInt232 = -(2n ** (232n - 1n));\nvar minInt240 = -(2n ** (240n - 1n));\nvar minInt248 = -(2n ** (248n - 1n));\nvar minInt256 = -(2n ** (256n - 1n));\nvar maxUint8 = 2n ** 8n - 1n;\nvar maxUint16 = 2n ** 16n - 1n;\nvar maxUint24 = 2n ** 24n - 1n;\nvar maxUint32 = 2n ** 32n - 1n;\nvar maxUint40 = 2n ** 40n - 1n;\nvar maxUint48 = 2n ** 48n - 1n;\nvar maxUint56 = 2n ** 56n - 1n;\nvar maxUint64 = 2n ** 64n - 1n;\nvar maxUint72 = 2n ** 72n - 1n;\nvar maxUint80 = 2n ** 80n - 1n;\nvar maxUint88 = 2n ** 88n - 1n;\nvar maxUint96 = 2n ** 96n - 1n;\nvar maxUint104 = 2n ** 104n - 1n;\nvar maxUint112 = 2n ** 112n - 1n;\nvar maxUint120 = 2n ** 120n - 1n;\nvar maxUint128 = 2n ** 128n - 1n;\nvar maxUint136 = 2n ** 136n - 1n;\nvar maxUint144 = 2n ** 144n - 1n;\nvar maxUint152 = 2n ** 152n - 1n;\nvar maxUint160 = 2n ** 160n - 1n;\nvar maxUint168 = 2n ** 168n - 1n;\nvar maxUint176 = 2n ** 176n - 1n;\nvar maxUint184 = 2n ** 184n - 1n;\nvar maxUint192 = 2n ** 192n - 1n;\nvar maxUint200 = 2n ** 200n - 1n;\nvar maxUint208 = 2n ** 208n - 1n;\nvar maxUint216 = 2n ** 216n - 1n;\nvar maxUint224 = 2n ** 224n - 1n;\nvar maxUint232 = 2n ** 232n - 1n;\nvar maxUint240 = 2n ** 240n - 1n;\nvar maxUint248 = 2n ** 248n - 1n;\nvar maxUint256 = 2n ** 256n - 1n;\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/transaction/assertRequest.js\nfunction assertRequest(args) {\n  const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to } = args;\n  const account = account_ ? parseAccount(account_) : void 0;\n  if (account && !isAddress(account.address))\n    throw new InvalidAddressError({ address: account.address });\n  if (to && !isAddress(to))\n    throw new InvalidAddressError({ address: to });\n  if (typeof gasPrice !== \"undefined\" && (typeof maxFeePerGas !== \"undefined\" || typeof maxPriorityFeePerGas !== \"undefined\"))\n    throw new FeeConflictError();\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/actions/public/call.js\nasync function call(client, args) {\n  const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = \"latest\", accessList, blobs, code, data: data_, factory, factoryData, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;\n  const account = account_ ? parseAccount(account_) : void 0;\n  if (code && (factory || factoryData))\n    throw new BaseError2(\"Cannot provide both `code` & `factory`/`factoryData` as parameters.\");\n  if (code && to)\n    throw new BaseError2(\"Cannot provide both `code` & `to` as parameters.\");\n  const deploylessCallViaBytecode = code && data_;\n  const deploylessCallViaFactory = factory && factoryData && to && data_;\n  const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory;\n  const data = (() => {\n    if (deploylessCallViaBytecode)\n      return toDeploylessCallViaBytecodeData({\n        code,\n        data: data_\n      });\n    if (deploylessCallViaFactory)\n      return toDeploylessCallViaFactoryData({\n        data: data_,\n        factory,\n        factoryData,\n        to\n      });\n    return data_;\n  })();\n  try {\n    assertRequest(args);\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\n    const block = blockNumberHex || blockTag;\n    const rpcStateOverride = serializeStateOverride(stateOverride);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      blobs,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to: deploylessCall ? void 0 : to,\n      value\n    });\n    if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\n      try {\n        return await scheduleMulticall(client, {\n          ...request,\n          blockNumber,\n          blockTag\n        });\n      } catch (err) {\n        if (!(err instanceof ClientChainNotConfiguredError) && !(err instanceof ChainDoesNotSupportContract))\n          throw err;\n      }\n    }\n    const response = await client.request({\n      method: \"eth_call\",\n      params: rpcStateOverride ? [\n        request,\n        block,\n        rpcStateOverride\n      ] : [request, block]\n    });\n    if (response === \"0x\")\n      return { data: void 0 };\n    return { data: response };\n  } catch (err) {\n    const data2 = getRevertErrorData(err);\n    const { offchainLookup: offchainLookup2, offchainLookupSignature: offchainLookupSignature2 } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@zoralabs\").then(__webpack_require__.bind(__webpack_require__, /*! ./ccip-C5WONSSK.js */ \"(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/ccip-C5WONSSK.js\"));\n    if (client.ccipRead !== false && data2?.slice(0, 10) === offchainLookupSignature2 && to)\n      return { data: await offchainLookup2(client, { data: data2, to }) };\n    if (deploylessCall && data2?.slice(0, 10) === \"0x101bb98d\")\n      throw new CounterfactualDeploymentFailedError({ factory });\n    throw getCallError(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}\nfunction shouldPerformMulticall({ request }) {\n  const { data, to, ...request_ } = request;\n  if (!data)\n    return false;\n  if (data.startsWith(aggregate3Signature))\n    return false;\n  if (!to)\n    return false;\n  if (Object.values(request_).filter((x) => typeof x !== \"undefined\").length > 0)\n    return false;\n  return true;\n}\nasync function scheduleMulticall(client, args) {\n  const { batchSize = 1024, wait = 0 } = typeof client.batch?.multicall === \"object\" ? client.batch.multicall : {};\n  const { blockNumber, blockTag = \"latest\", data, multicallAddress: multicallAddress_, to } = args;\n  let multicallAddress = multicallAddress_;\n  if (!multicallAddress) {\n    if (!client.chain)\n      throw new ClientChainNotConfiguredError();\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: \"multicall3\"\n    });\n  }\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;\n  const block = blockNumberHex || blockTag;\n  const { schedule } = createBatchScheduler({\n    id: `${client.uid}.${block}`,\n    wait,\n    shouldSplitBatch(args2) {\n      const size2 = args2.reduce((size3, { data: data2 }) => size3 + (data2.length - 2), 0);\n      return size2 > batchSize * 2;\n    },\n    fn: async (requests) => {\n      const calls = requests.map((request) => ({\n        allowFailure: true,\n        callData: request.data,\n        target: request.to\n      }));\n      const calldata = encodeFunctionData({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: \"aggregate3\"\n      });\n      const data2 = await client.request({\n        method: \"eth_call\",\n        params: [\n          {\n            data: calldata,\n            to: multicallAddress\n          },\n          block\n        ]\n      });\n      return decodeFunctionResult({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: \"aggregate3\",\n        data: data2 || \"0x\"\n      });\n    }\n  });\n  const [{ returnData, success }] = await schedule({ data, to });\n  if (!success)\n    throw new RawContractError({ data: returnData });\n  if (returnData === \"0x\")\n    return { data: void 0 };\n  return { data: returnData };\n}\nfunction toDeploylessCallViaBytecodeData(parameters) {\n  const { code, data } = parameters;\n  return encodeDeployData({\n    abi: parseAbi([\"constructor(bytes, bytes)\"]),\n    bytecode: deploylessCallViaBytecodeBytecode,\n    args: [code, data]\n  });\n}\nfunction toDeploylessCallViaFactoryData(parameters) {\n  const { data, factory, factoryData, to } = parameters;\n  return encodeDeployData({\n    abi: parseAbi([\"constructor(address, bytes, address, bytes)\"]),\n    bytecode: deploylessCallViaFactoryBytecode,\n    args: [to, data, factory, factoryData]\n  });\n}\nfunction getRevertErrorData(err) {\n  if (!(err instanceof BaseError2))\n    return void 0;\n  const error = err.walk();\n  return typeof error?.data === \"object\" ? error.data?.data : error.data;\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/ccip.js\nvar OffchainLookupError = class extends BaseError2 {\n  constructor({ callbackSelector, cause, data, extraData, sender, urls }) {\n    super(cause.shortMessage || \"An error occurred while fetching for an offchain result.\", {\n      cause,\n      metaMessages: [\n        ...cause.metaMessages || [],\n        cause.metaMessages?.length ? \"\" : [],\n        \"Offchain Gateway Call:\",\n        urls && [\n          \"  Gateway URL(s):\",\n          ...urls.map((url) => `    ${getUrl(url)}`)\n        ],\n        `  Sender: ${sender}`,\n        `  Data: ${data}`,\n        `  Callback selector: ${callbackSelector}`,\n        `  Extra data: ${extraData}`\n      ].flat(),\n      name: \"OffchainLookupError\"\n    });\n  }\n};\nvar OffchainLookupResponseMalformedError = class extends BaseError2 {\n  constructor({ result, url }) {\n    super(\"Offchain gateway response is malformed. Response data must be a hex value.\", {\n      metaMessages: [\n        `Gateway URL: ${getUrl(url)}`,\n        `Response: ${stringify(result)}`\n      ],\n      name: \"OffchainLookupResponseMalformedError\"\n    });\n  }\n};\nvar OffchainLookupSenderMismatchError = class extends BaseError2 {\n  constructor({ sender, to }) {\n    super(\"Reverted sender address does not match target contract address (`to`).\", {\n      metaMessages: [\n        `Contract address: ${to}`,\n        `OffchainLookup sender address: ${sender}`\n      ],\n      name: \"OffchainLookupSenderMismatchError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/address/isAddressEqual.js\nfunction isAddressEqual(a, b) {\n  if (!isAddress(a, { strict: false }))\n    throw new InvalidAddressError({ address: a });\n  if (!isAddress(b, { strict: false }))\n    throw new InvalidAddressError({ address: b });\n  return a.toLowerCase() === b.toLowerCase();\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/ccip.js\nvar offchainLookupSignature = \"0x556f1830\";\nvar offchainLookupAbiItem = {\n  name: \"OffchainLookup\",\n  type: \"error\",\n  inputs: [\n    {\n      name: \"sender\",\n      type: \"address\"\n    },\n    {\n      name: \"urls\",\n      type: \"string[]\"\n    },\n    {\n      name: \"callData\",\n      type: \"bytes\"\n    },\n    {\n      name: \"callbackFunction\",\n      type: \"bytes4\"\n    },\n    {\n      name: \"extraData\",\n      type: \"bytes\"\n    }\n  ]\n};\nasync function offchainLookup(client, { blockNumber, blockTag, data, to }) {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem]\n  });\n  const [sender, urls, callData, callbackSelector, extraData] = args;\n  const { ccipRead } = client;\n  const ccipRequest_ = ccipRead && typeof ccipRead?.request === \"function\" ? ccipRead.request : ccipRequest;\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to });\n    const result = await ccipRequest_({ data: callData, sender, urls });\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters([{ type: \"bytes\" }, { type: \"bytes\" }], [result, extraData])\n      ]),\n      to\n    });\n    return data_;\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err,\n      data,\n      extraData,\n      sender,\n      urls\n    });\n  }\n}\nasync function ccipRequest({ data, sender, urls }) {\n  let error = new Error(\"An unknown error occurred.\");\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const method = url.includes(\"{data}\") ? \"GET\" : \"POST\";\n    const body = method === \"POST\" ? { data, sender } : void 0;\n    const headers = method === \"POST\" ? { \"Content-Type\": \"application/json\" } : {};\n    try {\n      const response = await fetch(url.replace(\"{sender}\", sender).replace(\"{data}\", data), {\n        body: JSON.stringify(body),\n        headers,\n        method\n      });\n      let result;\n      if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n        result = (await response.json()).data;\n      } else {\n        result = await response.text();\n      }\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error ? stringify(result.error) : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url\n        });\n        continue;\n      }\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url\n        });\n        continue;\n      }\n      return result;\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: err.message,\n        url\n      });\n    }\n  }\n  throw error;\n}\n\n\n/*! Bundled license information:\n\n@noble/hashes/esm/utils.js:\n  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n*/\n//# sourceMappingURL=chunk-NPNNGXR4.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-NPNNGXR4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-PR4QN5HX.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@zoralabs/protocol-deployments/dist/chunk-PR4QN5HX.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __export: () => (/* binding */ __export),\n/* harmony export */   __require: () => (/* binding */ __require),\n/* harmony export */   __toESM: () => (/* binding */ __toESM)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\") return require.apply(this, arguments);\n  throw Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __commonJS = (cb, mod) => function __require2() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n\n//# sourceMappingURL=chunk-PR4QN5HX.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHpvcmFsYWJzL3Byb3RvY29sLWRlcGxveW1lbnRzL2Rpc3QvY2h1bmstUFI0UU41SFguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDJEQUEyRCxhQUFhO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBOztBQU9FO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnFsZS93ZWIzcmV2aWV3ZXIvZGVtb3MvYmFzZS1hcHAtY29pbnMvbm9kZV9tb2R1bGVzL0B6b3JhbGFicy9wcm90b2NvbC1kZXBsb3ltZW50cy9kaXN0L2NodW5rLVBSNFFONUhYLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19yZXF1aXJlID0gLyogQF9fUFVSRV9fICovICgoeCkgPT4gdHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIgPyByZXF1aXJlIDogdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiID8gbmV3IFByb3h5KHgsIHtcbiAgZ2V0OiAoYSwgYikgPT4gKHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWlyZSA6IGEpW2JdXG59KSA6IHgpKGZ1bmN0aW9uKHgpIHtcbiAgaWYgKHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aHJvdyBFcnJvcignRHluYW1pYyByZXF1aXJlIG9mIFwiJyArIHggKyAnXCIgaXMgbm90IHN1cHBvcnRlZCcpO1xufSk7XG52YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUyKCkge1xuICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbn07XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xuXG5leHBvcnQge1xuICBfX3JlcXVpcmUsXG4gIF9fY29tbW9uSlMsXG4gIF9fZXhwb3J0LFxuICBfX3RvRVNNXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstUFI0UU41SFguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-PR4QN5HX.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@zoralabs/protocol-deployments/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PremintConfigVersion: () => (/* binding */ PremintConfigVersion),\n/* harmony export */   autoSwapperABI: () => (/* binding */ autoSwapperABI),\n/* harmony export */   buySupplyWithSwapRouterHookABI: () => (/* binding */ buySupplyWithSwapRouterHookABI),\n/* harmony export */   buySupplyWithSwapRouterHookAbiParameters: () => (/* binding */ buySupplyWithSwapRouterHookAbiParameters),\n/* harmony export */   buySupplyWithSwapRouterHookAddress: () => (/* binding */ buySupplyWithSwapRouterHookAddress),\n/* harmony export */   buySupplyWithSwapRouterHookConfig: () => (/* binding */ buySupplyWithSwapRouterHookConfig),\n/* harmony export */   buySupplyWithSwapRouterHookReturnParameters: () => (/* binding */ buySupplyWithSwapRouterHookReturnParameters),\n/* harmony export */   callerAndCommenterABI: () => (/* binding */ callerAndCommenterABI),\n/* harmony export */   callerAndCommenterAddress: () => (/* binding */ callerAndCommenterAddress),\n/* harmony export */   callerAndCommenterConfig: () => (/* binding */ callerAndCommenterConfig),\n/* harmony export */   coinABI: () => (/* binding */ coinABI),\n/* harmony export */   coinFactoryABI: () => (/* binding */ coinFactoryABI),\n/* harmony export */   coinFactoryAddress: () => (/* binding */ coinFactoryAddress),\n/* harmony export */   coinFactoryConfig: () => (/* binding */ coinFactoryConfig),\n/* harmony export */   coinV4ABI: () => (/* binding */ coinV4ABI),\n/* harmony export */   cointagABI: () => (/* binding */ cointagABI),\n/* harmony export */   cointagFactoryABI: () => (/* binding */ cointagFactoryABI),\n/* harmony export */   cointagFactoryAddress: () => (/* binding */ cointagFactoryAddress),\n/* harmony export */   cointagFactoryConfig: () => (/* binding */ cointagFactoryConfig),\n/* harmony export */   commentsABI: () => (/* binding */ commentsABI),\n/* harmony export */   commentsAddress: () => (/* binding */ commentsAddress),\n/* harmony export */   commentsConfig: () => (/* binding */ commentsConfig),\n/* harmony export */   contracts1155: () => (/* binding */ __exports),\n/* harmony export */   decodeBuySupplyWithSwapRouterHookReturn: () => (/* binding */ decodeBuySupplyWithSwapRouterHookReturn),\n/* harmony export */   devBuySupplyWithSwapRouterHookABI: () => (/* binding */ devBuySupplyWithSwapRouterHookABI),\n/* harmony export */   devBuySupplyWithSwapRouterHookAddress: () => (/* binding */ devBuySupplyWithSwapRouterHookAddress),\n/* harmony export */   devBuySupplyWithSwapRouterHookConfig: () => (/* binding */ devBuySupplyWithSwapRouterHookConfig),\n/* harmony export */   devCoinFactoryABI: () => (/* binding */ devCoinFactoryABI),\n/* harmony export */   devCoinFactoryAddress: () => (/* binding */ devCoinFactoryAddress),\n/* harmony export */   devCoinFactoryConfig: () => (/* binding */ devCoinFactoryConfig),\n/* harmony export */   emptyCommentIdentifier: () => (/* binding */ emptyCommentIdentifier),\n/* harmony export */   encodeBuySupplyWithMultiHopSwapRouterHookCall: () => (/* binding */ encodeBuySupplyWithMultiHopSwapRouterHookCall),\n/* harmony export */   encodeBuySupplyWithSingleHopSwapRouterHookCall: () => (/* binding */ encodeBuySupplyWithSingleHopSwapRouterHookCall),\n/* harmony export */   encodeBuySupplyWithSwapRouterHookCalldata: () => (/* binding */ encodeBuySupplyWithSwapRouterHookCalldata),\n/* harmony export */   encodeMultiCurvePoolConfig: () => (/* binding */ encodeMultiCurvePoolConfig),\n/* harmony export */   encodePremintConfig: () => (/* binding */ encodePremintConfig),\n/* harmony export */   erc20MinterABI: () => (/* binding */ erc20MinterABI),\n/* harmony export */   erc20MinterAddress: () => (/* binding */ erc20MinterAddress),\n/* harmony export */   erc20MinterConfig: () => (/* binding */ erc20MinterConfig),\n/* harmony export */   erc20ZABI: () => (/* binding */ erc20ZABI),\n/* harmony export */   erc20ZRoyaltiesABI: () => (/* binding */ erc20ZRoyaltiesABI),\n/* harmony export */   erc20ZRoyaltiesAddress: () => (/* binding */ erc20ZRoyaltiesAddress),\n/* harmony export */   erc20ZRoyaltiesConfig: () => (/* binding */ erc20ZRoyaltiesConfig),\n/* harmony export */   iPremintDefinitionsABI: () => (/* binding */ iPremintDefinitionsABI),\n/* harmony export */   iSponsoredSparksSpenderActionABI: () => (/* binding */ iSponsoredSparksSpenderActionABI),\n/* harmony export */   iUniswapV3PoolABI: () => (/* binding */ iUniswapV3PoolABI),\n/* harmony export */   iUnwrapAndForwardActionABI: () => (/* binding */ iUnwrapAndForwardActionABI),\n/* harmony export */   mintsEthUnwrapperAndCallerABI: () => (/* binding */ mintsEthUnwrapperAndCallerABI),\n/* harmony export */   mintsEthUnwrapperAndCallerAddress: () => (/* binding */ mintsEthUnwrapperAndCallerAddress),\n/* harmony export */   mintsEthUnwrapperAndCallerConfig: () => (/* binding */ mintsEthUnwrapperAndCallerConfig),\n/* harmony export */   mintsSafeTransferBatchTypedDataDefinition: () => (/* binding */ mintsSafeTransferBatchTypedDataDefinition),\n/* harmony export */   mintsSafeTransferTypedDataDefinition: () => (/* binding */ mintsSafeTransferTypedDataDefinition),\n/* harmony export */   permit2ABI: () => (/* binding */ permit2ABI),\n/* harmony export */   permit2Address: () => (/* binding */ permit2Address),\n/* harmony export */   permit2Config: () => (/* binding */ permit2Config),\n/* harmony export */   permitBuyOnSecondaryAndCommentTypedDataDefinition: () => (/* binding */ permitBuyOnSecondaryAndCommentTypedDataDefinition),\n/* harmony export */   permitCommentTypedDataDefinition: () => (/* binding */ permitCommentTypedDataDefinition),\n/* harmony export */   permitMintAndCommentTypedDataDefinition: () => (/* binding */ permitMintAndCommentTypedDataDefinition),\n/* harmony export */   permitSparkCommentTypedDataDefinition: () => (/* binding */ permitSparkCommentTypedDataDefinition),\n/* harmony export */   poolConfigEncodingABI: () => (/* binding */ poolConfigEncodingABI),\n/* harmony export */   premintTypedDataDefinition: () => (/* binding */ premintTypedDataDefinition),\n/* harmony export */   premintV1TypedDataDefinition: () => (/* binding */ premintV1TypedDataDefinition),\n/* harmony export */   premintV2TypedDataDefinition: () => (/* binding */ premintV2TypedDataDefinition),\n/* harmony export */   protocolRewardsABI: () => (/* binding */ protocolRewardsABI),\n/* harmony export */   protocolRewardsAddress: () => (/* binding */ protocolRewardsAddress),\n/* harmony export */   protocolRewardsConfig: () => (/* binding */ protocolRewardsConfig),\n/* harmony export */   safeTransferSwapAbiParameters: () => (/* binding */ safeTransferSwapAbiParameters),\n/* harmony export */   secondarySwapABI: () => (/* binding */ secondarySwapABI),\n/* harmony export */   secondarySwapAddress: () => (/* binding */ secondarySwapAddress),\n/* harmony export */   secondarySwapConfig: () => (/* binding */ secondarySwapConfig),\n/* harmony export */   sparkValue: () => (/* binding */ sparkValue),\n/* harmony export */   sparks: () => (/* binding */ sparks_exports),\n/* harmony export */   sponsoredSparksBatchTransferTypedDataType: () => (/* binding */ sponsoredSparksBatchTransferTypedDataType),\n/* harmony export */   sponsoredSparksBatchTypedDataDefinition: () => (/* binding */ sponsoredSparksBatchTypedDataDefinition),\n/* harmony export */   sponsoredSparksSpenderABI: () => (/* binding */ sponsoredSparksSpenderABI),\n/* harmony export */   sponsoredSparksSpenderAddress: () => (/* binding */ sponsoredSparksSpenderAddress),\n/* harmony export */   sponsoredSparksSpenderConfig: () => (/* binding */ sponsoredSparksSpenderConfig),\n/* harmony export */   uniswapQuoterV2ABI: () => (/* binding */ uniswapQuoterV2ABI),\n/* harmony export */   uniswapQuoterV2Address: () => (/* binding */ uniswapQuoterV2Address),\n/* harmony export */   uniswapQuoterV2Config: () => (/* binding */ uniswapQuoterV2Config),\n/* harmony export */   uniswapUniversalRouterABI: () => (/* binding */ uniswapUniversalRouterABI),\n/* harmony export */   uniswapUniversalRouterAddress: () => (/* binding */ uniswapUniversalRouterAddress),\n/* harmony export */   uniswapUniversalRouterConfig: () => (/* binding */ uniswapUniversalRouterConfig),\n/* harmony export */   uniswapV3SwapRouterABI: () => (/* binding */ uniswapV3SwapRouterABI),\n/* harmony export */   uniswapV3SwapRouterAddress: () => (/* binding */ uniswapV3SwapRouterAddress),\n/* harmony export */   uniswapV3SwapRouterConfig: () => (/* binding */ uniswapV3SwapRouterConfig),\n/* harmony export */   upgradeGateABI: () => (/* binding */ upgradeGateABI),\n/* harmony export */   upgradeGateAddress: () => (/* binding */ upgradeGateAddress),\n/* harmony export */   upgradeGateConfig: () => (/* binding */ upgradeGateConfig),\n/* harmony export */   wethABI: () => (/* binding */ wethABI),\n/* harmony export */   wethAddress: () => (/* binding */ wethAddress),\n/* harmony export */   wethConfig: () => (/* binding */ wethConfig),\n/* harmony export */   zoraAccountManagerABI: () => (/* binding */ zoraAccountManagerABI),\n/* harmony export */   zoraAccountManagerAddress: () => (/* binding */ zoraAccountManagerAddress),\n/* harmony export */   zoraAccountManagerConfig: () => (/* binding */ zoraAccountManagerConfig),\n/* harmony export */   zoraCreator1155FactoryImplABI: () => (/* binding */ zoraCreator1155FactoryImplABI),\n/* harmony export */   zoraCreator1155FactoryImplAddress: () => (/* binding */ zoraCreator1155FactoryImplAddress),\n/* harmony export */   zoraCreator1155FactoryImplConfig: () => (/* binding */ zoraCreator1155FactoryImplConfig),\n/* harmony export */   zoraCreator1155ImplABI: () => (/* binding */ zoraCreator1155ImplABI),\n/* harmony export */   zoraCreator1155PremintExecutorImplABI: () => (/* binding */ zoraCreator1155PremintExecutorImplABI),\n/* harmony export */   zoraCreator1155PremintExecutorImplAddress: () => (/* binding */ zoraCreator1155PremintExecutorImplAddress),\n/* harmony export */   zoraCreator1155PremintExecutorImplConfig: () => (/* binding */ zoraCreator1155PremintExecutorImplConfig),\n/* harmony export */   zoraCreatorFixedPriceSaleStrategyABI: () => (/* binding */ zoraCreatorFixedPriceSaleStrategyABI),\n/* harmony export */   zoraCreatorFixedPriceSaleStrategyAddress: () => (/* binding */ zoraCreatorFixedPriceSaleStrategyAddress),\n/* harmony export */   zoraCreatorFixedPriceSaleStrategyConfig: () => (/* binding */ zoraCreatorFixedPriceSaleStrategyConfig),\n/* harmony export */   zoraCreatorMerkleMinterStrategyABI: () => (/* binding */ zoraCreatorMerkleMinterStrategyABI),\n/* harmony export */   zoraCreatorMerkleMinterStrategyAddress: () => (/* binding */ zoraCreatorMerkleMinterStrategyAddress),\n/* harmony export */   zoraCreatorMerkleMinterStrategyConfig: () => (/* binding */ zoraCreatorMerkleMinterStrategyConfig),\n/* harmony export */   zoraCreatorRedeemMinterFactoryABI: () => (/* binding */ zoraCreatorRedeemMinterFactoryABI),\n/* harmony export */   zoraCreatorRedeemMinterFactoryAddress: () => (/* binding */ zoraCreatorRedeemMinterFactoryAddress),\n/* harmony export */   zoraCreatorRedeemMinterFactoryConfig: () => (/* binding */ zoraCreatorRedeemMinterFactoryConfig),\n/* harmony export */   zoraMints1155ABI: () => (/* binding */ zoraMints1155ABI),\n/* harmony export */   zoraMints1155Address: () => (/* binding */ zoraMints1155Address),\n/* harmony export */   zoraMints1155Config: () => (/* binding */ zoraMints1155Config),\n/* harmony export */   zoraMintsManagerImplABI: () => (/* binding */ zoraMintsManagerImplABI),\n/* harmony export */   zoraMintsManagerImplAddress: () => (/* binding */ zoraMintsManagerImplAddress),\n/* harmony export */   zoraMintsManagerImplConfig: () => (/* binding */ zoraMintsManagerImplConfig),\n/* harmony export */   zoraSparks1155ABI: () => (/* binding */ zoraSparks1155ABI),\n/* harmony export */   zoraSparks1155Address: () => (/* binding */ zoraSparks1155Address),\n/* harmony export */   zoraSparks1155Config: () => (/* binding */ zoraSparks1155Config),\n/* harmony export */   zoraSparksManagerImplABI: () => (/* binding */ zoraSparksManagerImplABI),\n/* harmony export */   zoraSparksManagerImplAddress: () => (/* binding */ zoraSparksManagerImplAddress),\n/* harmony export */   zoraSparksManagerImplConfig: () => (/* binding */ zoraSparksManagerImplConfig),\n/* harmony export */   zoraTimedSaleStrategyABI: () => (/* binding */ zoraTimedSaleStrategyABI),\n/* harmony export */   zoraTimedSaleStrategyAddress: () => (/* binding */ zoraTimedSaleStrategyAddress),\n/* harmony export */   zoraTimedSaleStrategyConfig: () => (/* binding */ zoraTimedSaleStrategyConfig)\n/* harmony export */ });\n/* harmony import */ var _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-NPNNGXR4.js */ \"(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-NPNNGXR4.js\");\n/* harmony import */ var _chunk_PR4QN5HX_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-PR4QN5HX.js */ \"(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/chunk-PR4QN5HX.js\");\n\n\n\n// src/generated/wagmi.ts\nvar autoSwapperABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_router\",\n        internalType: \"contract ISwapRouter\",\n        type: \"address\"\n      },\n      { name: \"_swapRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"_swapper\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"router\",\n    outputs: [\n      { name: \"\", internalType: \"contract ISwapRouter\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct AutoSwapper.ExactInputParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"path\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"amountOutMinimum\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          }\n        ]\n      }\n    ],\n    name: \"swapExactInput\",\n    outputs: [{ name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct AutoSwapper.ExactInputSingleParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenIn\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenOut\", internalType: \"address\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"amountOutMinimum\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          }\n        ]\n      }\n    ],\n    name: \"swapExactInputSingle\",\n    outputs: [{ name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"swapRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"swapper\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidRecipient\" },\n  { type: \"error\", inputs: [], name: \"InvalidSelector\" },\n  { type: \"error\", inputs: [], name: \"NotSwapper\" }\n];\nvar buySupplyWithSwapRouterHookABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_factory\",\n        internalType: \"contract IZoraFactory\",\n        type: \"address\"\n      },\n      { name: \"_swapRouter\", internalType: \"address\", type: \"address\" },\n      { name: \"_poolManager\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"coin\", internalType: \"contract ICoin\", type: \"address\" },\n      { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"afterCoinDeploy\",\n    outputs: [{ name: \"\", internalType: \"bytes\", type: \"bytes\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"factory\",\n    outputs: [\n      { name: \"\", internalType: \"contract IZoraFactory\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"data\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"unlockCallback\",\n    outputs: [{ name: \"\", internalType: \"bytes\", type: \"bytes\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"balance\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"CoinBalanceNot0\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"balance\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"CurrencyBalanceNot0\"\n  },\n  { type: \"error\", inputs: [], name: \"Erc20NotReceived\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"HookNotImplemented\" },\n  { type: \"error\", inputs: [], name: \"InvalidSwapRouterCall\" },\n  { type: \"error\", inputs: [], name: \"NotFactory\" },\n  { type: \"error\", inputs: [], name: \"OnlyPoolManager\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"error\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"SwapReverted\"\n  }\n];\nvar buySupplyWithSwapRouterHookAddress = {\n  8453: \"0xc90e349360C43a0217CEF289f231C66D4748960F\",\n  84532: \"0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE\"\n};\nvar buySupplyWithSwapRouterHookConfig = {\n  address: buySupplyWithSwapRouterHookAddress,\n  abi: buySupplyWithSwapRouterHookABI\n};\nvar callerAndCommenterABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"_comments\", internalType: \"address\", type: \"address\" },\n      { name: \"_zoraTimedSale\", internalType: \"address\", type: \"address\" },\n      { name: \"_swapHelper\", internalType: \"address\", type: \"address\" },\n      { name: \"_sparksValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"commenter\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"excessRefundRecipient\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"maxEthToSpend\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"sqrtPriceLimitX96\", internalType: \"uint160\", type: \"uint160\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"buyOnSecondaryAndComment\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"comments\",\n    outputs: [\n      { name: \"\", internalType: \"contract IComments\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"collection\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"maxEthToSpend\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          },\n          { name: \"comment\", internalType: \"string\", type: \"string\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      }\n    ],\n    name: \"hashPermitBuyOnSecondaryAndComment\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ICallerAndCommenter.PermitTimedSaleMintAndComment\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"collection\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"mintReferral\", internalType: \"address\", type: \"address\" },\n          { name: \"comment\", internalType: \"string\", type: \"string\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      }\n    ],\n    name: \"hashPermitTimedSaleMintAndComment\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"nonceUsed\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"collection\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"maxEthToSpend\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          },\n          { name: \"comment\", internalType: \"string\", type: \"string\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitBuyOnSecondaryAndComment\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ICallerAndCommenter.PermitTimedSaleMintAndComment\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"collection\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"mintReferral\", internalType: \"address\", type: \"address\" },\n          { name: \"comment\", internalType: \"string\", type: \"string\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitTimedSaleMintAndComment\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"secondarySwap\",\n    outputs: [\n      { name: \"\", internalType: \"contract ISecondarySwap\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"commenter\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address payable\", type: \"address\" },\n      { name: \"minEthToAcquire\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"sqrtPriceLimitX96\", internalType: \"uint160\", type: \"uint160\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"sellOnSecondaryAndComment\",\n    outputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"sparkValue\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"commenter\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"mintReferral\", internalType: \"address\", type: \"address\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"timedSaleMintAndComment\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zoraTimedSale\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"contract IZoraTimedSaleStrategy\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"commentId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      },\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      { name: \"text\", internalType: \"string\", type: \"string\", indexed: false }\n    ],\n    name: \"MintedAndCommented\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"commentId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      },\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"swapDirection\",\n        internalType: \"enum ICallerAndCommenter.SwapDirection\",\n        type: \"uint8\",\n        indexed: true\n      }\n    ],\n    name: \"SwappedOnSecondaryAndCommented\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"address\", type: \"address\" },\n      { name: \"actual\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"CommenterMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  {\n    type: \"error\",\n    inputs: [\n      {\n        name: \"wrongDestinationChainId\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"IncorrectDestinationChain\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"SaleNotSet\"\n  },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"currentName\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"WrongValueSent\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ERC1167FailedCreateClone\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"EndTimeCannotBeInThePast\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InsufficientFunds\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"MarketAlreadyLaunched\" },\n  { type: \"error\", inputs: [], name: \"MarketMinimumNotReached\" },\n  { type: \"error\", inputs: [], name: \"MinimumMarketEthNotMet\" },\n  { type: \"error\", inputs: [], name: \"NeedsToBeAtLeastOneSaleToStartMarket\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"OnlyZoraRewardRecipient\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"RequestMintInvalidUseMint\" },\n  { type: \"error\", inputs: [], name: \"ResetSaleNotAvailable\" },\n  { type: \"error\", inputs: [], name: \"SaleAlreadySet\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleInProgress\" },\n  { type: \"error\", inputs: [], name: \"SaleNotSet\" },\n  { type: \"error\", inputs: [], name: \"SaleV2AlreadyStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleV2Ended\" },\n  { type: \"error\", inputs: [], name: \"SaleV2NotSet\" },\n  { type: \"error\", inputs: [], name: \"StartTimeCannotBeAfterEndTime\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ZoraCreator1155ContractNeedsToSupportReduceSupply\"\n  },\n  { type: \"error\", inputs: [], name: \"ADDRESS_DELEGATECALL_TO_NON_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ADDRESS_LOW_LEVEL_CALL_FAILED\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Burn_NotOwnerOrApproved\"\n  },\n  { type: \"error\", inputs: [], name: \"CREATOR_FUNDS_RECIPIENT_NOT_SET\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"reason\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"Call_TokenIdMismatch\" },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  { type: \"error\", inputs: [], name: \"CanOnlyReduceMaxSupply\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CannotMintMoreTokens\"\n  },\n  { type: \"error\", inputs: [], name: \"CannotReduceMaxSupplyBelowMinted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"proposedAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Config_TransferHookNotSupported\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_BURN_FROM_ZERO_ADDRESS\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ERC1155RECEIVER_REJECTED_TOKENS\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_SETTING_APPROVAL_FOR_SELF\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_TRANSFER_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_UUPS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_UNSUPPORTED_PROXIABLEUUID\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ETHWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  { type: \"error\", inputs: [], name: \"FirstMinterAddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"contractValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"FundsWithdrawInsolvent\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"INVALID_ADDRESS_ZERO\" },\n  { type: \"error\", inputs: [], name: \"INVALID_ETH_AMOUNT\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidPremintVersion\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignatureVersion\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"magicValue\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"MintNotYetStarted\" },\n  { type: \"error\", inputs: [], name: \"Mint_InsolventSaleTransfer\" },\n  { type: \"error\", inputs: [], name: \"Mint_InvalidMintArrayLength\" },\n  { type: \"error\", inputs: [], name: \"Mint_TokenIDMintNotAllowed\" },\n  { type: \"error\", inputs: [], name: \"Mint_UnknownCommand\" },\n  { type: \"error\", inputs: [], name: \"Mint_ValueTransferFail\" },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"NewOwnerNeedsToBeAdmin\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"NoRendererForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"NonEthRedemption\" },\n  { type: \"error\", inputs: [], name: \"ONLY_CREATE_REFERRAL\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForRegisteredMinter\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForTimedSaleStrategy\" },\n  { type: \"error\", inputs: [], name: \"OnlyTransfersFromZoraMints\" },\n  { type: \"error\", inputs: [], name: \"PremintDeleted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ProtocolRewardsWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"renderer\", internalType: \"address\", type: \"address\" }],\n    name: \"RendererNotValid\"\n  },\n  { type: \"error\", inputs: [], name: \"Renderer_NotValidRendererContract\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"targetContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Sale_CannotCallNonSalesContract\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"TokenIdMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"role\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserMissingRoleForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"premintSignerContractFailedToRecoverSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"premintSignerContractNotAContract\" },\n  { type: \"error\", inputs: [], name: \"AccessControlBadConfirmation\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"neededRole\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"AccessControlUnauthorizedAccount\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ArrayLengthMismatch\" },\n  { type: \"error\", inputs: [], name: \"CannotSparkOwnComment\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"commentAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"commentTokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"replyAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"replyTokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CommentAddressOrTokenIdsDoNotMatch\"\n  },\n  { type: \"error\", inputs: [], name: \"CommentDoesntExist\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"address\", type: \"address\" },\n      { name: \"actual\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"CommenterMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"commentId\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"DuplicateComment\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  { type: \"error\", inputs: [], name: \"EmptyComment\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  {\n    type: \"error\",\n    inputs: [\n      {\n        name: \"wrongDestinationChainId\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"IncorrectDestinationChain\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"IncorrectETHAmountForSparks\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"MustSendAtLeastOneSpark\" },\n  { type: \"error\", inputs: [], name: \"NoFundsRecipient\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NotSmartWallet\" },\n  { type: \"error\", inputs: [], name: \"NotSmartWalletOwner\" },\n  { type: \"error\", inputs: [], name: \"OnlySparksContract\" },\n  { type: \"error\", inputs: [], name: \"TransferFailed\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"currentName\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  }\n];\nvar callerAndCommenterAddress = {\n  1: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  10: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  8453: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  42161: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  81457: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  84532: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  7777777: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  11155111: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  11155420: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\",\n  999999999: \"0x77777775C5074b74540d9cC63Dd840A8c692B4B5\"\n};\nvar callerAndCommenterConfig = {\n  address: callerAndCommenterAddress,\n  abi: callerAndCommenterABI\n};\nvar coinABI = [\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"addOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" }\n    ],\n    name: \"addOwners\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"airlock\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"amount\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"currency\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", internalType: \"uint8\", type: \"uint8\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"dopplerFeeRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"coinVersionLookup\",\n        internalType: \"contract IDeployedCoinVersionLookup\",\n        type: \"address\"\n      }\n    ],\n    name: \"getPayoutSwapPath\",\n    outputs: [\n      {\n        name: \"payoutSwapPath\",\n        internalType: \"struct IHasSwapPath.PayoutSwapPath\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"path\",\n            internalType: \"struct PathKey[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"intermediateCurrency\",\n                internalType: \"Currency\",\n                type: \"address\"\n              },\n              { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n              { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n              {\n                name: \"hooks\",\n                internalType: \"contract IHooks\",\n                type: \"address\"\n              },\n              { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"currencyIn\", internalType: \"Currency\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getPoolConfiguration\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct PoolConfiguration\",\n        type: \"tuple\",\n        components: [\n          { name: \"version\", internalType: \"uint8\", type: \"uint8\" },\n          { name: \"numPositions\", internalType: \"uint16\", type: \"uint16\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          {\n            name: \"numDiscoveryPositions\",\n            internalType: \"uint16[]\",\n            type: \"uint16[]\"\n          },\n          { name: \"tickLower\", internalType: \"int24[]\", type: \"int24[]\" },\n          { name: \"tickUpper\", internalType: \"int24[]\", type: \"int24[]\" },\n          {\n            name: \"maxDiscoverySupplyShare\",\n            internalType: \"uint256[]\",\n            type: \"uint256[]\"\n          }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getPoolKey\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"hooks\",\n    outputs: [{ name: \"\", internalType: \"contract IHooks\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient_\", internalType: \"address\", type: \"address\" },\n      { name: \"owners_\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"tokenURI_\", internalType: \"string\", type: \"string\" },\n      { name: \"name_\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol_\", internalType: \"string\", type: \"string\" },\n      { name: \"platformReferrer_\", internalType: \"address\", type: \"address\" },\n      { name: \"currency_\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"poolKey_\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ]\n      },\n      { name: \"sqrtPriceX96\", internalType: \"uint160\", type: \"uint160\" },\n      {\n        name: \"poolConfiguration_\",\n        internalType: \"struct PoolConfiguration\",\n        type: \"tuple\",\n        components: [\n          { name: \"version\", internalType: \"uint8\", type: \"uint8\" },\n          { name: \"numPositions\", internalType: \"uint16\", type: \"uint16\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          {\n            name: \"numDiscoveryPositions\",\n            internalType: \"uint16[]\",\n            type: \"uint16[]\"\n          },\n          { name: \"tickLower\", internalType: \"int24[]\", type: \"int24[]\" },\n          { name: \"tickUpper\", internalType: \"int24[]\", type: \"int24[]\" },\n          {\n            name: \"maxDiscoverySupplyShare\",\n            internalType: \"uint256[]\",\n            type: \"uint256[]\"\n          }\n        ]\n      }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"isOwner\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newHook\", internalType: \"address\", type: \"address\" },\n      { name: \"additionalData\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"migrateLiquidity\",\n    outputs: [\n      {\n        name: \"newPoolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owners\",\n    outputs: [{ name: \"\", internalType: \"address[]\", type: \"address[]\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"payoutRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"v\", internalType: \"uint8\", type: \"uint8\" },\n      { name: \"r\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"s\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"platformReferrer\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"poolManager\",\n    outputs: [\n      { name: \"\", internalType: \"contract IPoolManager\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewardRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewards\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"removeOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" }\n    ],\n    name: \"removeOwners\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"revokeOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newURI\", internalType: \"string\", type: \"string\" }],\n    name: \"setContractURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newName\", internalType: \"string\", type: \"string\" },\n      { name: \"newSymbol\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"setNameAndSymbol\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newPayoutRecipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"setPayoutRecipient\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"tokenURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Approval\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"buyer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tradeReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"coinsPurchased\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"amountFee\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountSold\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CoinBuy\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"protocolRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"marketRewards\",\n        internalType: \"struct ICoin.MarketRewards\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"totalAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"totalAmountCoin\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"creatorPayoutAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"creatorPayoutAmountCoin\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"platformReferrerAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"platformReferrerAmountCoin\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"protocolAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"protocolAmountCoin\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"CoinMarketRewards\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"prevRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"CoinPayoutRecipientUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"seller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tradeReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"coinsSold\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"amountFee\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountPurchased\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CoinSell\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tradeReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"protocolRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"creatorReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"platformReferrerReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"traderReferrerReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"protocolReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"CoinTradeRewards\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"senderBalance\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"recipientBalance\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CoinTransfer\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false }\n    ],\n    name: \"ContractMetadataUpdated\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"ContractURIUpdated\" },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"fromPoolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"fromPoolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"toPoolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"toPoolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      }\n    ],\n    name: \"LiquidityMigrated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newName\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"newSymbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"NameAndSymbolUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"prevOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Transfer\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"AlreadyOwner\" },\n  { type: \"error\", inputs: [], name: \"CannotMintZeroLiquidity\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"DopplerPoolMustHaveMoreThan2DiscoveryPositions\"\n  },\n  { type: \"error\", inputs: [], name: \"ECDSAInvalidSignature\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"length\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ECDSAInvalidSignatureLength\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"s\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"ECDSAInvalidSignatureS\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"allowance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC20InsufficientAllowance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC20InsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"approver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidApprover\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"receiver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidReceiver\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"sender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidSender\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"spender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidSpender\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC20TransferAmountMismatch\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"signer\", internalType: \"address\", type: \"address\" },\n      { name: \"owner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC2612InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"EthAmountMismatch\" },\n  { type: \"error\", inputs: [], name: \"EthAmountTooSmall\" },\n  { type: \"error\", inputs: [], name: \"EthTransferFailed\" },\n  { type: \"error\", inputs: [], name: \"EthTransferInvalid\" },\n  { type: \"error\", inputs: [], name: \"InitialOrderSizeTooLarge\" },\n  { type: \"error\", inputs: [], name: \"InsufficientFunds\" },\n  { type: \"error\", inputs: [], name: \"InsufficientLiquidity\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidCurrencyLowerTick\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidMarketType\" },\n  { type: \"error\", inputs: [], name: \"InvalidPoolVersion\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tickLower\", internalType: \"int24\", type: \"int24\" },\n      { name: \"tickUpper\", internalType: \"int24\", type: \"int24\" }\n    ],\n    name: \"InvalidTickRangeMisordered\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidWethLowerTick\" },\n  { type: \"error\", inputs: [], name: \"LegacyPoolMustHaveOneDiscoveryPosition\" },\n  { type: \"error\", inputs: [], name: \"MarketAlreadyGraduated\" },\n  { type: \"error\", inputs: [], name: \"MarketNotGraduated\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"MaxShareToBeSoldExceeded\"\n  },\n  { type: \"error\", inputs: [], name: \"NameIsRequired\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NotOwner\" },\n  { type: \"error\", inputs: [], name: \"NumDiscoveryPositionsOutOfRange\" },\n  { type: \"error\", inputs: [], name: \"OneOwnerRequired\" },\n  { type: \"error\", inputs: [], name: \"OnlyOwner\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"pool\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"OnlyPool\"\n  },\n  { type: \"error\", inputs: [], name: \"OnlyWeth\" },\n  { type: \"error\", inputs: [], name: \"OwnerCannotBeAddressZero\" },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"SlippageBoundsExceeded\" },\n  { type: \"error\", inputs: [], name: \"UseRevokeOwnershipToRemoveSelf\" }\n];\nvar coinFactoryABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"_coinV4Impl\", internalType: \"address\", type: \"address\" },\n      { name: \"_creatorCoinImpl\", internalType: \"address\", type: \"address\" },\n      { name: \"_contentCoinHook\", internalType: \"address\", type: \"address\" },\n      { name: \"_creatorCoinHook\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"msgSender\", internalType: \"address\", type: \"address\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"coinSalt\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"coinAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"coinV4Impl\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contentCoinHook\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"creatorCoinHook\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"creatorCoinImpl\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"currency\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"int24\", type: \"int24\" },\n      { name: \"orderSize\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"deploy\",\n    outputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"postDeployHook\", internalType: \"address\", type: \"address\" },\n      { name: \"postDeployHookData\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"coinSalt\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"deploy\",\n    outputs: [\n      { name: \"coin\", internalType: \"address\", type: \"address\" },\n      { name: \"postDeployHookDataOut\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"deploy\",\n    outputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"coinSalt\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"deployCreatorCoin\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"hook\", internalType: \"address\", type: \"address\" },\n      { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"deployWithHook\",\n    outputs: [\n      { name: \"coin\", internalType: \"address\", type: \"address\" },\n      { name: \"hookDataOut\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"coin\", internalType: \"address\", type: \"address\" }],\n    name: \"getVersionForDeployedCoin\",\n    outputs: [{ name: \"\", internalType: \"uint8\", type: \"uint8\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"initialOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"symbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"coin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"pool\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"CoinCreated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"symbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"coin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"poolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"poolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"CoinCreatedV4\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"symbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"coin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"poolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"poolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"CreatorCoinCreated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  { type: \"error\", inputs: [], name: \"ArrayLengthMismatch\" },\n  { type: \"error\", inputs: [], name: \"ConfigTickLowerMustBeLessThanTickUpper\" },\n  { type: \"error\", inputs: [], name: \"Deprecated\" },\n  { type: \"error\", inputs: [], name: \"ERC1167FailedCreateClone\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"EthTransferInvalid\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InvalidConfig\" },\n  { type: \"error\", inputs: [], name: \"InvalidHook\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidPoolVersion\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tickLower\", internalType: \"int24\", type: \"int24\" },\n      { name: \"tickUpper\", internalType: \"int24\", type: \"int24\" }\n    ],\n    name: \"InvalidTickRangeMisordered\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"MaxShareToBeSoldExceeded\"\n  },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NumDiscoveryPositionsOutOfRange\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"currentName\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  },\n  { type: \"error\", inputs: [], name: \"ZeroDiscoveryPositions\" },\n  { type: \"error\", inputs: [], name: \"ZeroDiscoverySupplyShare\" }\n];\nvar coinFactoryAddress = {\n  8453: \"0x777777751622c0d3258f214F9DF38E35BF45baF3\",\n  84532: \"0xaF88840cb637F2684A9E460316b1678AD6245e4a\"\n};\nvar coinFactoryConfig = {\n  address: coinFactoryAddress,\n  abi: coinFactoryABI\n};\nvar coinV4ABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_protocolRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"_protocolRewards\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"_poolManager\",\n        internalType: \"contract IPoolManager\",\n        type: \"address\"\n      },\n      { name: \"_airlock\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"addOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" }\n    ],\n    name: \"addOwners\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"airlock\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"amount\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"claimVesting\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"currency\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", internalType: \"uint8\", type: \"uint8\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"dopplerFeeRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getClaimableAmount\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"coinVersionLookup\",\n        internalType: \"contract IDeployedCoinVersionLookup\",\n        type: \"address\"\n      }\n    ],\n    name: \"getPayoutSwapPath\",\n    outputs: [\n      {\n        name: \"payoutSwapPath\",\n        internalType: \"struct IHasSwapPath.PayoutSwapPath\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"path\",\n            internalType: \"struct PathKey[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"intermediateCurrency\",\n                internalType: \"Currency\",\n                type: \"address\"\n              },\n              { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n              { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n              {\n                name: \"hooks\",\n                internalType: \"contract IHooks\",\n                type: \"address\"\n              },\n              { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"currencyIn\", internalType: \"Currency\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getPoolConfiguration\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct PoolConfiguration\",\n        type: \"tuple\",\n        components: [\n          { name: \"version\", internalType: \"uint8\", type: \"uint8\" },\n          { name: \"numPositions\", internalType: \"uint16\", type: \"uint16\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          {\n            name: \"numDiscoveryPositions\",\n            internalType: \"uint16[]\",\n            type: \"uint16[]\"\n          },\n          { name: \"tickLower\", internalType: \"int24[]\", type: \"int24[]\" },\n          { name: \"tickUpper\", internalType: \"int24[]\", type: \"int24[]\" },\n          {\n            name: \"maxDiscoverySupplyShare\",\n            internalType: \"uint256[]\",\n            type: \"uint256[]\"\n          }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getPoolKey\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"hooks\",\n    outputs: [{ name: \"\", internalType: \"contract IHooks\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient_\", internalType: \"address\", type: \"address\" },\n      { name: \"owners_\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"tokenURI_\", internalType: \"string\", type: \"string\" },\n      { name: \"name_\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol_\", internalType: \"string\", type: \"string\" },\n      { name: \"platformReferrer_\", internalType: \"address\", type: \"address\" },\n      { name: \"currency_\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"poolKey_\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ]\n      },\n      { name: \"sqrtPriceX96\", internalType: \"uint160\", type: \"uint160\" },\n      {\n        name: \"poolConfiguration_\",\n        internalType: \"struct PoolConfiguration\",\n        type: \"tuple\",\n        components: [\n          { name: \"version\", internalType: \"uint8\", type: \"uint8\" },\n          { name: \"numPositions\", internalType: \"uint16\", type: \"uint16\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          {\n            name: \"numDiscoveryPositions\",\n            internalType: \"uint16[]\",\n            type: \"uint16[]\"\n          },\n          { name: \"tickLower\", internalType: \"int24[]\", type: \"int24[]\" },\n          { name: \"tickUpper\", internalType: \"int24[]\", type: \"int24[]\" },\n          {\n            name: \"maxDiscoverySupplyShare\",\n            internalType: \"uint256[]\",\n            type: \"uint256[]\"\n          }\n        ]\n      }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"isOwner\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newHook\", internalType: \"address\", type: \"address\" },\n      { name: \"additionalData\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"migrateLiquidity\",\n    outputs: [\n      {\n        name: \"newPoolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owners\",\n    outputs: [{ name: \"\", internalType: \"address[]\", type: \"address[]\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"payoutRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"v\", internalType: \"uint8\", type: \"uint8\" },\n      { name: \"r\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"s\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"platformReferrer\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"poolManager\",\n    outputs: [\n      { name: \"\", internalType: \"contract IPoolManager\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewardRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewards\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"removeOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" }\n    ],\n    name: \"removeOwners\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"revokeOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newURI\", internalType: \"string\", type: \"string\" }],\n    name: \"setContractURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newName\", internalType: \"string\", type: \"string\" },\n      { name: \"newSymbol\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"setNameAndSymbol\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newPayoutRecipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"setPayoutRecipient\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"tokenURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"totalClaimed\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"vestingEndTime\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"vestingStartTime\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Approval\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"buyer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tradeReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"coinsPurchased\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"amountFee\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountSold\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CoinBuy\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"protocolRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"marketRewards\",\n        internalType: \"struct ICoin.MarketRewards\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"totalAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"totalAmountCoin\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"creatorPayoutAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"creatorPayoutAmountCoin\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"platformReferrerAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"platformReferrerAmountCoin\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"protocolAmountCurrency\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"protocolAmountCoin\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"CoinMarketRewards\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"prevRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"CoinPayoutRecipientUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"seller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tradeReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"coinsSold\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"amountFee\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountPurchased\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CoinSell\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tradeReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"protocolRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"creatorReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"platformReferrerReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"traderReferrerReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"protocolReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"CoinTradeRewards\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"senderBalance\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"recipientBalance\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CoinTransfer\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false }\n    ],\n    name: \"ContractMetadataUpdated\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"ContractURIUpdated\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"claimAmount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"totalClaimed\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"vestingStartTime\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"vestingEndTime\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"CreatorVestingClaimed\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"fromPoolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"fromPoolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"toPoolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"toPoolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      }\n    ],\n    name: \"LiquidityMigrated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newName\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"newSymbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"NameAndSymbolUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"prevOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Transfer\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"AlreadyOwner\" },\n  { type: \"error\", inputs: [], name: \"CannotMintZeroLiquidity\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"DopplerPoolMustHaveMoreThan2DiscoveryPositions\"\n  },\n  { type: \"error\", inputs: [], name: \"ECDSAInvalidSignature\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"length\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ECDSAInvalidSignatureLength\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"s\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"ECDSAInvalidSignatureS\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"allowance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC20InsufficientAllowance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC20InsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"approver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidApprover\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"receiver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidReceiver\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"sender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidSender\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"spender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidSpender\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC20TransferAmountMismatch\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"signer\", internalType: \"address\", type: \"address\" },\n      { name: \"owner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC2612InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"EthAmountMismatch\" },\n  { type: \"error\", inputs: [], name: \"EthAmountTooSmall\" },\n  { type: \"error\", inputs: [], name: \"EthTransferFailed\" },\n  { type: \"error\", inputs: [], name: \"EthTransferInvalid\" },\n  { type: \"error\", inputs: [], name: \"InitialOrderSizeTooLarge\" },\n  { type: \"error\", inputs: [], name: \"InsufficientFunds\" },\n  { type: \"error\", inputs: [], name: \"InsufficientLiquidity\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidCurrency\" },\n  { type: \"error\", inputs: [], name: \"InvalidCurrencyLowerTick\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidMarketType\" },\n  { type: \"error\", inputs: [], name: \"InvalidPoolVersion\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tickLower\", internalType: \"int24\", type: \"int24\" },\n      { name: \"tickUpper\", internalType: \"int24\", type: \"int24\" }\n    ],\n    name: \"InvalidTickRangeMisordered\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidWethLowerTick\" },\n  { type: \"error\", inputs: [], name: \"LegacyPoolMustHaveOneDiscoveryPosition\" },\n  { type: \"error\", inputs: [], name: \"MarketAlreadyGraduated\" },\n  { type: \"error\", inputs: [], name: \"MarketNotGraduated\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"MaxShareToBeSoldExceeded\"\n  },\n  { type: \"error\", inputs: [], name: \"NameIsRequired\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NotOwner\" },\n  { type: \"error\", inputs: [], name: \"NumDiscoveryPositionsOutOfRange\" },\n  { type: \"error\", inputs: [], name: \"OneOwnerRequired\" },\n  { type: \"error\", inputs: [], name: \"OnlyOwner\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"pool\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"OnlyPool\"\n  },\n  { type: \"error\", inputs: [], name: \"OnlyWeth\" },\n  { type: \"error\", inputs: [], name: \"OwnerCannotBeAddressZero\" },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"SlippageBoundsExceeded\" },\n  { type: \"error\", inputs: [], name: \"UseRevokeOwnershipToRemoveSelf\" }\n];\nvar cointagABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"protocolRewards_\", internalType: \"address\", type: \"address\" },\n      { name: \"weth_\", internalType: \"address\", type: \"address\" },\n      { name: \"upgradeGate_\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERCENTAGE_BASIS\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"config\",\n    outputs: [\n      {\n        name: \"cointagStorage\",\n        internalType: \"struct ICointag.CointagStorageV1\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"creatorRewardRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          { name: \"erc20\", internalType: \"contract IERC20\", type: \"address\" },\n          {\n            name: \"pool\",\n            internalType: \"contract IUniswapV3Pool\",\n            type: \"address\"\n          },\n          {\n            name: \"percentageToBuyBurn\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          }\n        ]\n      }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"distribute\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"erc20\",\n    outputs: [{ name: \"\", internalType: \"contract IERC20\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"creatorRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"pool_\", internalType: \"address\", type: \"address\" },\n      { name: \"percentageToBuyBurn\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pool\",\n    outputs: [\n      { name: \"\", internalType: \"contract IUniswapV3Pool\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewards\",\n    outputs: [\n      { name: \"\", internalType: \"contract IProtocolRewards\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pull\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"amount0Delta\", internalType: \"int256\", type: \"int256\" },\n      { name: \"amount1Delta\", internalType: \"int256\", type: \"int256\" },\n      { name: \"\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"uniswapV3SwapCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"upgradeGate\",\n    outputs: [\n      { name: \"\", internalType: \"contract IUpgradeGate\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"weth\",\n    outputs: [{ name: \"\", internalType: \"contract IWETH\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"amountERC20Received\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountERC20Burned\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountETHSpent\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amountETHToCreator\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"totalETHReceived\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"buyFailureError\",\n        internalType: \"bytes\",\n        type: \"bytes\",\n        indexed: false\n      },\n      {\n        name: \"burnFailureError\",\n        internalType: \"bytes\",\n        type: \"bytes\",\n        indexed: false\n      }\n    ],\n    name: \"BuyBurn\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"EthReceived\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"creatorRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"erc20\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"pool\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"percentageToBuyBurn\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"oldImpl\", internalType: \"address\", type: \"address\" },\n      { name: \"newImpl\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"InvalidUpgradePath\"\n  },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NotUniswapV3Pool\" },\n  { type: \"error\", inputs: [], name: \"OnlyPool\" },\n  { type: \"error\", inputs: [], name: \"OnlyProtocolRewardsOrWeth\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"PoolNeedsOneTokenToBeWETH\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  { type: \"error\", inputs: [], name: \"UnknownBurnError\" },\n  { type: \"error\", inputs: [], name: \"UnknownSwapError\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"current\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  }\n];\nvar cointagFactoryABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_cointagImplementation\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"cointagImplementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"_creatorRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"_pool\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"_percentageToBuyBurn\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"saltSource\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"getCointagAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"_creatorRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"_pool\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"_percentageToBuyBurn\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"saltSource\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"getOrCreateCointag\",\n    outputs: [{ name: \"\", internalType: \"contract ICointag\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"_creatorRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"_pool\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"_percentageToBuyBurn\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"saltSource\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"expectedAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"getOrCreateCointagAtExpectedAddress\",\n    outputs: [{ name: \"\", internalType: \"contract ICointag\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_defaultOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"upgradeGate\",\n    outputs: [\n      { name: \"\", internalType: \"contract IUpgradeGate\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"cointag\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"creatorRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"erc20\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"pool\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"percentageToBuyBurn\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"saltSource\",\n        internalType: \"bytes\",\n        type: \"bytes\",\n        indexed: false\n      }\n    ],\n    name: \"SetupNewCointag\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"address\", type: \"address\" },\n      { name: \"actual\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"UnexpectedCointagAddress\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"currentName\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  }\n];\nvar cointagFactoryAddress = {\n  8453: \"0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F\",\n  84532: \"0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F\",\n  7777777: \"0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F\",\n  999999999: \"0x77777773Bd7Cccb7E704315CA51245707E19B0DE\"\n};\nvar cointagFactoryConfig = {\n  address: cointagFactoryAddress,\n  abi: cointagFactoryABI\n};\nvar commentsABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"_sparkValue\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"_protocolRewards\", internalType: \"address\", type: \"address\" },\n      { name: \"_zoraRecipient\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"BACKFILLER_ROLE\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DELEGATE_COMMENTER\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DOMAIN_NAME\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DOMAIN_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERMISSION_BIT_ADMIN\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"REFERRER_REWARD_PCT\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"ZORA_REWARD_NO_REFERRER_PCT\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"ZORA_REWARD_PCT\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"commentIdentifiers\",\n        internalType: \"struct IComments.CommentIdentifier[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      },\n      { name: \"texts\", internalType: \"string[]\", type: \"string[]\" },\n      { name: \"timestamps\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      {\n        name: \"originalTransactionHashes\",\n        internalType: \"bytes32[]\",\n        type: \"bytes32[]\"\n      }\n    ],\n    name: \"backfillBatchAddComment\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"commenter\", internalType: \"address\", type: \"address\" },\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"text\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"replyTo\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      },\n      {\n        name: \"commenterSmartWallet\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"referrer\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"comment\",\n    outputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    name: \"commentSparksQuantity\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"commenter\", internalType: \"address\", type: \"address\" },\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"text\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"replyTo\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      },\n      {\n        name: \"commenterSmartWalletOwner\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"referrer\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"delegateComment\",\n    outputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      },\n      { name: \"commentId\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"role\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"getRoleAdmin\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"account\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"account\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"hasRole\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    name: \"hashAndCheckCommentExists\",\n    outputs: [\n      { name: \"commentId\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"exists\", internalType: \"bool\", type: \"bool\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    name: \"hashAndValidateCommentExists\",\n    outputs: [{ name: \"commentId\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    name: \"hashCommentIdentifier\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IComments.PermitComment\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"commenterSmartWallet\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"replyTo\",\n            internalType: \"struct IComments.CommentIdentifier\",\n            type: \"tuple\",\n            components: [\n              { name: \"commenter\", internalType: \"address\", type: \"address\" },\n              {\n                name: \"contractAddress\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n              { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n            ]\n          },\n          { name: \"text\", internalType: \"string\", type: \"string\" },\n          { name: \"referrer\", internalType: \"address\", type: \"address\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      }\n    ],\n    name: \"hashPermitComment\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IComments.PermitSparkComment\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"comment\",\n            internalType: \"struct IComments.CommentIdentifier\",\n            type: \"tuple\",\n            components: [\n              { name: \"commenter\", internalType: \"address\", type: \"address\" },\n              {\n                name: \"contractAddress\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n              { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n            ]\n          },\n          { name: \"sparker\", internalType: \"address\", type: \"address\" },\n          { name: \"sparksQuantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"referrer\", internalType: \"address\", type: \"address\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      }\n    ],\n    name: \"hashPermitSparkComment\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"defaultAdmin\", internalType: \"address\", type: \"address\" },\n      { name: \"backfiller\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"delegateCommenters\",\n        internalType: \"address[]\",\n        type: \"address[]\"\n      }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"nextNonce\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"nonceUsed\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IComments.PermitComment\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"commenterSmartWallet\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"replyTo\",\n            internalType: \"struct IComments.CommentIdentifier\",\n            type: \"tuple\",\n            components: [\n              { name: \"commenter\", internalType: \"address\", type: \"address\" },\n              {\n                name: \"contractAddress\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n              { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n            ]\n          },\n          { name: \"text\", internalType: \"string\", type: \"string\" },\n          { name: \"referrer\", internalType: \"address\", type: \"address\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitComment\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IComments.PermitSparkComment\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"comment\",\n            internalType: \"struct IComments.CommentIdentifier\",\n            type: \"tuple\",\n            components: [\n              { name: \"commenter\", internalType: \"address\", type: \"address\" },\n              {\n                name: \"contractAddress\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n              { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n            ]\n          },\n          { name: \"sparker\", internalType: \"address\", type: \"address\" },\n          { name: \"sparksQuantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" },\n          { name: \"referrer\", internalType: \"address\", type: \"address\" },\n          { name: \"sourceChainId\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"destinationChainId\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitSparkComment\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewards\",\n    outputs: [\n      { name: \"\", internalType: \"contract IProtocolRewards\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"callerConfirmation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"account\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      },\n      { name: \"sparksQuantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"referrer\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"sparkComment\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"sparkValue\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"commentId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      },\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      },\n      { name: \"text\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"timestamp\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"originalTransactionId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      }\n    ],\n    name: \"BackfilledComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"commentId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      },\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"replyToId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"replyTo\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"sparksQuantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      { name: \"text\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"timestamp\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"referrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"Commented\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\", indexed: true },\n      {\n        name: \"previousAdminRole\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      },\n      {\n        name: \"newAdminRole\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      }\n    ],\n    name: \"RoleAdminChanged\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\", indexed: true },\n      {\n        name: \"account\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"RoleGranted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"role\", internalType: \"bytes32\", type: \"bytes32\", indexed: true },\n      {\n        name: \"account\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"RoleRevoked\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"commentId\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: true\n      },\n      {\n        name: \"commentIdentifier\",\n        internalType: \"struct IComments.CommentIdentifier\",\n        type: \"tuple\",\n        components: [\n          { name: \"commenter\", internalType: \"address\", type: \"address\" },\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"sparksQuantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"sparker\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"timestamp\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"referrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"SparkedComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  { type: \"error\", inputs: [], name: \"AccessControlBadConfirmation\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"neededRole\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"AccessControlUnauthorizedAccount\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ArrayLengthMismatch\" },\n  { type: \"error\", inputs: [], name: \"CannotSparkOwnComment\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"commentAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"commentTokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"replyAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"replyTokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CommentAddressOrTokenIdsDoNotMatch\"\n  },\n  { type: \"error\", inputs: [], name: \"CommentDoesntExist\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"address\", type: \"address\" },\n      { name: \"actual\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"CommenterMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"commentId\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"DuplicateComment\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  { type: \"error\", inputs: [], name: \"EmptyComment\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  {\n    type: \"error\",\n    inputs: [\n      {\n        name: \"wrongDestinationChainId\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"IncorrectDestinationChain\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"IncorrectETHAmountForSparks\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"MustSendAtLeastOneSpark\" },\n  { type: \"error\", inputs: [], name: \"NoFundsRecipient\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NotSmartWallet\" },\n  { type: \"error\", inputs: [], name: \"NotSmartWalletOwner\" },\n  { type: \"error\", inputs: [], name: \"OnlySparksContract\" },\n  { type: \"error\", inputs: [], name: \"TransferFailed\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"currentName\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  }\n];\nvar commentsAddress = {\n  1: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  10: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  8453: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  42161: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  81457: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  84532: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  7777777: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  11155111: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  11155420: \"0x7777777C2B3132e03a65721a41745C07170a5877\",\n  999999999: \"0x7777777C2B3132e03a65721a41745C07170a5877\"\n};\nvar commentsConfig = {\n  address: commentsAddress,\n  abi: commentsABI\n};\nvar devBuySupplyWithSwapRouterHookABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_factory\",\n        internalType: \"contract IZoraFactory\",\n        type: \"address\"\n      },\n      { name: \"_swapRouter\", internalType: \"address\", type: \"address\" },\n      { name: \"_poolManager\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"coin\", internalType: \"contract ICoin\", type: \"address\" },\n      { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"afterCoinDeploy\",\n    outputs: [{ name: \"\", internalType: \"bytes\", type: \"bytes\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"factory\",\n    outputs: [\n      { name: \"\", internalType: \"contract IZoraFactory\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"data\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"unlockCallback\",\n    outputs: [{ name: \"\", internalType: \"bytes\", type: \"bytes\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"balance\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"CoinBalanceNot0\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"balance\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"CurrencyBalanceNot0\"\n  },\n  { type: \"error\", inputs: [], name: \"Erc20NotReceived\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"HookNotImplemented\" },\n  { type: \"error\", inputs: [], name: \"InvalidSwapRouterCall\" },\n  { type: \"error\", inputs: [], name: \"NotFactory\" },\n  { type: \"error\", inputs: [], name: \"OnlyPoolManager\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"error\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"SwapReverted\"\n  }\n];\nvar devBuySupplyWithSwapRouterHookAddress = {\n  8453: \"0x62B95629F965bf48E15BB110A1729B9b9dF1C07D\"\n};\nvar devBuySupplyWithSwapRouterHookConfig = {\n  address: devBuySupplyWithSwapRouterHookAddress,\n  abi: devBuySupplyWithSwapRouterHookABI\n};\nvar devCoinFactoryABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"_coinV4Impl\", internalType: \"address\", type: \"address\" },\n      { name: \"_creatorCoinImpl\", internalType: \"address\", type: \"address\" },\n      { name: \"_contentCoinHook\", internalType: \"address\", type: \"address\" },\n      { name: \"_creatorCoinHook\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"msgSender\", internalType: \"address\", type: \"address\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"coinSalt\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"coinAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"coinV4Impl\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contentCoinHook\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"creatorCoinHook\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"creatorCoinImpl\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"currency\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"int24\", type: \"int24\" },\n      { name: \"orderSize\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"deploy\",\n    outputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"postDeployHook\", internalType: \"address\", type: \"address\" },\n      { name: \"postDeployHookData\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"coinSalt\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"deploy\",\n    outputs: [\n      { name: \"coin\", internalType: \"address\", type: \"address\" },\n      { name: \"postDeployHookDataOut\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"deploy\",\n    outputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"coinSalt\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"deployCreatorCoin\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"owners\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"uri\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" },\n      { name: \"poolConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"platformReferrer\", internalType: \"address\", type: \"address\" },\n      { name: \"hook\", internalType: \"address\", type: \"address\" },\n      { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"deployWithHook\",\n    outputs: [\n      { name: \"coin\", internalType: \"address\", type: \"address\" },\n      { name: \"hookDataOut\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"coin\", internalType: \"address\", type: \"address\" }],\n    name: \"getVersionForDeployedCoin\",\n    outputs: [{ name: \"\", internalType: \"uint8\", type: \"uint8\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"initialOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"symbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"coin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"pool\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"CoinCreated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"symbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"coin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"poolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"poolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"CoinCreatedV4\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"caller\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"payoutRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"platformReferrer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"symbol\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"coin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"poolKey\",\n        internalType: \"struct PoolKey\",\n        type: \"tuple\",\n        components: [\n          { name: \"currency0\", internalType: \"Currency\", type: \"address\" },\n          { name: \"currency1\", internalType: \"Currency\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"tickSpacing\", internalType: \"int24\", type: \"int24\" },\n          { name: \"hooks\", internalType: \"contract IHooks\", type: \"address\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"poolKeyHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"CreatorCoinCreated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  { type: \"error\", inputs: [], name: \"ArrayLengthMismatch\" },\n  { type: \"error\", inputs: [], name: \"ConfigTickLowerMustBeLessThanTickUpper\" },\n  { type: \"error\", inputs: [], name: \"Deprecated\" },\n  { type: \"error\", inputs: [], name: \"ERC1167FailedCreateClone\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"EthTransferInvalid\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InvalidConfig\" },\n  { type: \"error\", inputs: [], name: \"InvalidHook\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidPoolVersion\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tickLower\", internalType: \"int24\", type: \"int24\" },\n      { name: \"tickUpper\", internalType: \"int24\", type: \"int24\" }\n    ],\n    name: \"InvalidTickRangeMisordered\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"MaxShareToBeSoldExceeded\"\n  },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NumDiscoveryPositionsOutOfRange\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"currentName\", internalType: \"string\", type: \"string\" },\n      { name: \"newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  },\n  { type: \"error\", inputs: [], name: \"ZeroDiscoveryPositions\" },\n  { type: \"error\", inputs: [], name: \"ZeroDiscoverySupplyShare\" }\n];\nvar devCoinFactoryAddress = {\n  8453: \"0x47B0C1205B01e5e967dB24A186968152e5cCf764\"\n};\nvar devCoinFactoryConfig = {\n  address: devCoinFactoryAddress,\n  abi: devCoinFactoryABI\n};\nvar erc20MinterABI = [\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"config\",\n        internalType: \"struct IERC20Minter.PremintSalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"duration\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"currency\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"buildSalesConfigForPremint\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IERC20Minter.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"currency\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"cancelOwnershipTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"totalReward\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"computePaidMintRewards\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IERC20Minter.RewardsSettings\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"createReferralReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"mintReferralReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"zoraReward\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"firstMinterReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          }\n        ]\n      }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"totalReward\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"rewardPct\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"computeReward\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"totalValue\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"computeTotalReward\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"ethRewardAmount\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"getCreateReferral\",\n    outputs: [\n      { name: \"createReferral\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getERC20MinterConfig\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IERC20Minter.ERC20MinterConfig\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"zoraRewardRecipientAddress\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          {\n            name: \"rewardRecipientPercentage\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"ethReward\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"getFirstMinter\",\n    outputs: [\n      { name: \"firstMinter\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"wallet\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"getMintedPerWallet\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"_zoraRewardRecipientAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"_owner\", internalType: \"address\", type: \"address\" },\n      { name: \"_rewardPct\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"_ethReward\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"totalValue\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"currency\", internalType: \"address\", type: \"address\" },\n      { name: \"mintReferral\", internalType: \"address\", type: \"address\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"minterConfig\",\n    outputs: [\n      {\n        name: \"zoraRewardRecipientAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      {\n        name: \"rewardRecipientPercentage\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"ethReward\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"requestMint\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct ICreatorCommands.CommandSet\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"commands\",\n            internalType: \"struct ICreatorCommands.Command[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"method\",\n                internalType: \"enum ICreatorCommands.CreatorActions\",\n                type: \"uint8\"\n              },\n              { name: \"args\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"at\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"resetSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"resignOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"safeTransferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"sale\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IERC20Minter.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"currency\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"config\",\n        internalType: \"struct IERC20Minter.ERC20MinterConfig\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"zoraRewardRecipientAddress\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          {\n            name: \"rewardRecipientPercentage\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"ethReward\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"setERC20MinterConfig\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"encodedPremintSalesConfig\",\n        internalType: \"bytes\",\n        type: \"bytes\"\n      }\n    ],\n    name: \"setPremintSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct IERC20Minter.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"currency\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"setSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"totalRewardPct\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"config\",\n        internalType: \"struct IERC20Minter.ERC20MinterConfig\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"zoraRewardRecipientAddress\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          {\n            name: \"rewardRecipientPercentage\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"ethReward\", internalType: \"uint256\", type: \"uint256\" }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"ERC20MinterConfigSet\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"createReferral\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"mintReferral\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"firstMinter\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"zora\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"currency\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"createReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"mintReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"firstMinterReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"zoraReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"ERC20RewardsDeposit\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"version\", internalType: \"uint8\", type: \"uint8\", indexed: false }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"MintComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"canceledOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerCanceled\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"pendingOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerPending\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"prevOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"mediaContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct IERC20Minter.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"currency\", internalType: \"address\", type: \"address\" }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"SaleSet\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ERC20TransferSlippage\" },\n  { type: \"error\", inputs: [], name: \"FailedToSendEthReward\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidCurrency\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expectedValue\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actualValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"InvalidETHValue\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidValue\" },\n  { type: \"error\", inputs: [], name: \"ONLY_OWNER\" },\n  { type: \"error\", inputs: [], name: \"ONLY_PENDING_OWNER\" },\n  { type: \"error\", inputs: [], name: \"OWNER_CANNOT_BE_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"PricePerTokenTooLow\" },\n  { type: \"error\", inputs: [], name: \"RequestMintInvalidUseMint\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" }\n];\nvar erc20MinterAddress = {\n  1: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  10: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  8453: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  42161: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  81457: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  84532: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  421614: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  7777777: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  11155111: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n  999999999: \"0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2\"\n};\nvar erc20MinterConfig = {\n  address: erc20MinterAddress,\n  abi: erc20MinterABI\n};\nvar erc20ZABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_royalties\",\n        internalType: \"contract IRoyalties\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{ name: \"\", internalType: \"contract IWETH\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"erc20TotalSupply\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"erc20Reserve\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"erc20Liquidity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"erc20Excess\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"erc1155Excess\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"activate\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", internalType: \"uint8\", type: \"uint8\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"symbol\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"initialize\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"nonfungiblePositionManager\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"contract INonfungiblePositionManager\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"values\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155BatchReceived\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC721Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"royalties\",\n    outputs: [\n      { name: \"\", internalType: \"contract IRoyalties\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"tokenInfo\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IERC20Z.TokenInfo\",\n        type: \"tuple\",\n        components: [\n          { name: \"collection\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"creator\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"tokenLiquidityInfo\",\n    outputs: [\n      { name: \"pool\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"initialLiquidityPositionId\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"tokenURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"amount20z\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"unwrap\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"amount1155\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"wrap\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Approval\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"erc20z\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount20z\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amount1155\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"ConvertedTo1155\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"erc20z\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount20z\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"amount1155\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"ConvertedTo20z\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"ReceivedAdminMintNFTs\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"token0\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount0\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"token1\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"amount1\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      { name: \"fee\", internalType: \"uint256\", type: \"uint256\", indexed: false },\n      {\n        name: \"positionId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"lpLiquidity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"erc20Excess\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"erc1155Excess\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SecondaryMarketActivated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Transfer\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AlreadyActivatedCannotReactivate\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"allowance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC20InsufficientAllowance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC20InsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"approver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidApprover\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"receiver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidReceiver\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"sender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidSender\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"spender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC20InvalidSpender\"\n  },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"IDsDoNotMatchValuesLength\" },\n  { type: \"error\", inputs: [], name: \"InsufficientBalance\" },\n  { type: \"error\", inputs: [], name: \"Invalid20zTransfer\" },\n  { type: \"error\", inputs: [], name: \"InvalidAmount20z\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidParams\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"OnlySaleStrategy\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"OnlySupportReceivingERC1155AssociatedZoraNFT\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"OnlySupportReceivingERC721UniswapPoolNFTs\"\n  },\n  { type: \"error\", inputs: [], name: \"PoolCreationFailed\" },\n  { type: \"error\", inputs: [], name: \"RecipientAddressZero\" },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  { type: \"error\", inputs: [], name: \"SecondaryMarketHasNotYetStarted\" },\n  { type: \"error\", inputs: [], name: \"TokenIdNotValidToSwap\" },\n  { type: \"error\", inputs: [], name: \"UnknownReceiveActionDataCall\" }\n];\nvar erc20ZRoyaltiesABI = [\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{ name: \"\", internalType: \"contract IWETH\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"erc20z\", internalType: \"address\", type: \"address\" },\n      { name: \"recipient\", internalType: \"address payable\", type: \"address\" }\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"erc20z\", internalType: \"address\", type: \"address\" }],\n    name: \"claimFor\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"feeBps\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"feeRecipient\",\n    outputs: [{ name: \"\", internalType: \"address payable\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"amount\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getFee\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"erc20z\", internalType: \"address\", type: \"address\" }],\n    name: \"getUnclaimedFees\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IRoyalties.UnclaimedFees\",\n        type: \"tuple\",\n        components: [\n          { name: \"token0\", internalType: \"address\", type: \"address\" },\n          { name: \"token1\", internalType: \"address\", type: \"address\" },\n          { name: \"token0Amount\", internalType: \"uint128\", type: \"uint128\" },\n          { name: \"token1Amount\", internalType: \"uint128\", type: \"uint128\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"erc20z\", internalType: \"address[]\", type: \"address[]\" }],\n    name: \"getUnclaimedFeesBatch\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IRoyalties.UnclaimedFees[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"token0\", internalType: \"address\", type: \"address\" },\n          { name: \"token1\", internalType: \"address\", type: \"address\" },\n          { name: \"token0Amount\", internalType: \"uint128\", type: \"uint128\" },\n          { name: \"token1Amount\", internalType: \"uint128\", type: \"uint128\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_weth\", internalType: \"contract IWETH\", type: \"address\" },\n      {\n        name: \"_nonfungiblePositionManager\",\n        internalType: \"contract INonfungiblePositionManager\",\n        type: \"address\"\n      },\n      {\n        name: \"_feeRecipient\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"_feeBps\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"nonfungiblePositionManager\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"contract INonfungiblePositionManager\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"positionId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC721Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"erc20z\", internalType: \"address\", type: \"address\" }],\n    name: \"positionsByErc20z\",\n    outputs: [{ name: \"positionId\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"creator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"positionAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"positionId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"token0\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"token0Amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"token1\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"token1Amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"RoyaltyClaim\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"erc20zAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"positionAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"positionId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"RoyaltyDeposit\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressCannotBeZero\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"AlreadyInitialized\" },\n  { type: \"error\", inputs: [], name: \"CreatorMustBeSet\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC721SenderRoyaltiesNeedsToBePositionManager\"\n  },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"OnlyCreatorCanCall\" },\n  { type: \"error\", inputs: [], name: \"OnlyErc20z\" },\n  { type: \"error\", inputs: [], name: \"OnlyWeth\" },\n  { type: \"error\", inputs: [], name: \"ParamsCannotBeZero\" },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  }\n];\nvar erc20ZRoyaltiesAddress = {\n  1: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  10: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  8453: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  42161: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  81457: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  84532: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  421614: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  7777777: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\",\n  11155111: \"0x53a85FbD2955EF713AA489Ae0C48523E727a0c07\",\n  999999999: \"0x77777771DF91C56c5468746E80DFA8b880f9719F\"\n};\nvar erc20ZRoyaltiesConfig = {\n  address: erc20ZRoyaltiesAddress,\n  abi: erc20ZRoyaltiesABI\n};\nvar iPremintDefinitionsABI = [\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"\",\n        internalType: \"struct TokenCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n          { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n          { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          {\n            name: \"fixedPriceMinter\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      }\n    ],\n    name: \"tokenConfigV1Definition\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"\",\n        internalType: \"struct TokenCreationConfigV2\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n          { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n          { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"fixedPriceMinter\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          { name: \"createReferral\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"tokenConfigV2Definition\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"\",\n        internalType: \"struct TokenCreationConfigV3\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n          { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"payoutRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"createReferral\", internalType: \"address\", type: \"address\" },\n          { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"minter\", internalType: \"address\", type: \"address\" },\n          { name: \"premintSalesConfig\", internalType: \"bytes\", type: \"bytes\" }\n        ]\n      }\n    ],\n    name: \"tokenConfigV3Definition\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  }\n];\nvar iSponsoredSparksSpenderActionABI = [\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"sponsoredMintBatch\",\n        internalType: \"struct SponsoredMintBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"verifier\", internalType: \"address\", type: \"address\" },\n          { name: \"from\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"destination\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"data\", internalType: \"bytes\", type: \"bytes\" },\n          {\n            name: \"expectedRedeemAmount\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"totalAmount\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"sponsoredMintBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  }\n];\nvar iUniswapV3PoolABI = [\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"fee\",\n    outputs: [{ name: \"\", internalType: \"uint24\", type: \"uint24\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"feeGrowthGlobal0X128\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"feeGrowthGlobal1X128\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"observationCardinalityNext\",\n        internalType: \"uint16\",\n        type: \"uint16\"\n      }\n    ],\n    name: \"increaseObservationCardinalityNext\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"secondsAgos\", internalType: \"uint32[]\", type: \"uint32[]\" }\n    ],\n    name: \"observe\",\n    outputs: [\n      { name: \"tickCumulatives\", internalType: \"int56[]\", type: \"int56[]\" },\n      {\n        name: \"secondsPerLiquidityCumulativeX128s\",\n        internalType: \"uint160[]\",\n        type: \"uint160[]\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"slot0\",\n    outputs: [\n      {\n        name: \"slot0\",\n        internalType: \"struct IUniswapV3Pool.Slot0\",\n        type: \"tuple\",\n        components: [\n          { name: \"sqrtPriceX96\", internalType: \"uint160\", type: \"uint160\" },\n          { name: \"tick\", internalType: \"int24\", type: \"int24\" },\n          { name: \"observationIndex\", internalType: \"uint16\", type: \"uint16\" },\n          {\n            name: \"observationCardinality\",\n            internalType: \"uint16\",\n            type: \"uint16\"\n          },\n          {\n            name: \"observationCardinalityNext\",\n            internalType: \"uint16\",\n            type: \"uint16\"\n          },\n          { name: \"feeProtocol\", internalType: \"uint8\", type: \"uint8\" },\n          { name: \"unlocked\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"zeroForOne\", internalType: \"bool\", type: \"bool\" },\n      { name: \"amountSpecified\", internalType: \"int256\", type: \"int256\" },\n      { name: \"sqrtPriceLimitX96\", internalType: \"uint160\", type: \"uint160\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"swap\",\n    outputs: [\n      { name: \"amount0\", internalType: \"int256\", type: \"int256\" },\n      { name: \"amount1\", internalType: \"int256\", type: \"int256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"token0\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"token1\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  }\n];\nvar iUnwrapAndForwardActionABI = [\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"receiverAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"call\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"valueToSend\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"callWithEth\",\n    outputs: [],\n    stateMutability: \"payable\"\n  }\n];\nvar mintsEthUnwrapperAndCallerABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_zoraSparks1155\",\n        internalType: \"contract IZoraSparks1155\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"values\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155BatchReceived\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitWithAdditionalValue\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"data\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC20NotSupported\"\n  },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"NotExpectingReceive\" },\n  { type: \"error\", inputs: [], name: \"NotZoraSparks1155\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"data\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"TransferFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"UnknownUserAction\" }\n];\nvar mintsEthUnwrapperAndCallerAddress = {\n  7777777: \"0xb0994EB9520C98C97e1F3953a5964535C2bd271A\",\n  999999999: \"0xb0994EB9520C98C97e1F3953a5964535C2bd271A\"\n};\nvar mintsEthUnwrapperAndCallerConfig = {\n  address: mintsEthUnwrapperAndCallerAddress,\n  abi: mintsEthUnwrapperAndCallerABI\n};\nvar permit2ABI = [\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"token\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"allowance\",\n    outputs: [\n      { name: \"amount\", internalType: \"uint160\", type: \"uint160\" },\n      { name: \"expiration\", internalType: \"uint48\", type: \"uint48\" },\n      { name: \"nonce\", internalType: \"uint48\", type: \"uint48\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"token\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint160\", type: \"uint160\" },\n      { name: \"expiration\", internalType: \"uint48\", type: \"uint48\" }\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"token\", internalType: \"address\", type: \"address\" },\n      { name: \"spender\", internalType: \"address\", type: \"address\" },\n      { name: \"newNonce\", internalType: \"uint48\", type: \"uint48\" }\n    ],\n    name: \"invalidateNonces\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"wordPos\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"mask\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"invalidateUnorderedNonces\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"approvals\",\n        internalType: \"struct IAllowanceTransfer.TokenSpenderPair[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"token\", internalType: \"address\", type: \"address\" },\n          { name: \"spender\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"lockdown\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"nonceBitmap\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"permitBatch\",\n        internalType: \"struct IAllowanceTransfer.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"details\",\n            internalType: \"struct IAllowanceTransfer.PermitDetails[]\",\n            type: \"tuple[]\",\n            components: [\n              { name: \"token\", internalType: \"address\", type: \"address\" },\n              { name: \"amount\", internalType: \"uint160\", type: \"uint160\" },\n              { name: \"expiration\", internalType: \"uint48\", type: \"uint48\" },\n              { name: \"nonce\", internalType: \"uint48\", type: \"uint48\" }\n            ]\n          },\n          { name: \"spender\", internalType: \"address\", type: \"address\" },\n          { name: \"sigDeadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"permitSingle\",\n        internalType: \"struct IAllowanceTransfer.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"details\",\n            internalType: \"struct IAllowanceTransfer.PermitDetails\",\n            type: \"tuple\",\n            components: [\n              { name: \"token\", internalType: \"address\", type: \"address\" },\n              { name: \"amount\", internalType: \"uint160\", type: \"uint160\" },\n              { name: \"expiration\", internalType: \"uint48\", type: \"uint48\" },\n              { name: \"nonce\", internalType: \"uint48\", type: \"uint48\" }\n            ]\n          },\n          { name: \"spender\", internalType: \"address\", type: \"address\" },\n          { name: \"sigDeadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ISignatureTransfer.PermitTransferFrom\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"permitted\",\n            internalType: \"struct ISignatureTransfer.TokenPermissions\",\n            type: \"tuple\",\n            components: [\n              { name: \"token\", internalType: \"address\", type: \"address\" },\n              { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n            ]\n          },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      {\n        name: \"transferDetails\",\n        internalType: \"struct ISignatureTransfer.SignatureTransferDetails\",\n        type: \"tuple\",\n        components: [\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ISignatureTransfer.PermitBatchTransferFrom\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"permitted\",\n            internalType: \"struct ISignatureTransfer.TokenPermissions[]\",\n            type: \"tuple[]\",\n            components: [\n              { name: \"token\", internalType: \"address\", type: \"address\" },\n              { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n            ]\n          },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      {\n        name: \"transferDetails\",\n        internalType: \"struct ISignatureTransfer.SignatureTransferDetails[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ISignatureTransfer.PermitTransferFrom\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"permitted\",\n            internalType: \"struct ISignatureTransfer.TokenPermissions\",\n            type: \"tuple\",\n            components: [\n              { name: \"token\", internalType: \"address\", type: \"address\" },\n              { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n            ]\n          },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      {\n        name: \"transferDetails\",\n        internalType: \"struct ISignatureTransfer.SignatureTransferDetails\",\n        type: \"tuple\",\n        components: [\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"witness\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"witnessTypeString\", internalType: \"string\", type: \"string\" },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitWitnessTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct ISignatureTransfer.PermitBatchTransferFrom\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"permitted\",\n            internalType: \"struct ISignatureTransfer.TokenPermissions[]\",\n            type: \"tuple[]\",\n            components: [\n              { name: \"token\", internalType: \"address\", type: \"address\" },\n              { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n            ]\n          },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      {\n        name: \"transferDetails\",\n        internalType: \"struct ISignatureTransfer.SignatureTransferDetails[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"witness\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"witnessTypeString\", internalType: \"string\", type: \"string\" },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitWitnessTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"transferDetails\",\n        internalType: \"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"from\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"amount\", internalType: \"uint160\", type: \"uint160\" },\n          { name: \"token\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint160\", type: \"uint160\" },\n      { name: \"token\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"token\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount\",\n        internalType: \"uint160\",\n        type: \"uint160\",\n        indexed: false\n      },\n      {\n        name: \"expiration\",\n        internalType: \"uint48\",\n        type: \"uint48\",\n        indexed: false\n      }\n    ],\n    name: \"Approval\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"token\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"Lockdown\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"token\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newNonce\",\n        internalType: \"uint48\",\n        type: \"uint48\",\n        indexed: false\n      },\n      {\n        name: \"oldNonce\",\n        internalType: \"uint48\",\n        type: \"uint48\",\n        indexed: false\n      }\n    ],\n    name: \"NonceInvalidation\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"token\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"spender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount\",\n        internalType: \"uint160\",\n        type: \"uint160\",\n        indexed: false\n      },\n      {\n        name: \"expiration\",\n        internalType: \"uint48\",\n        type: \"uint48\",\n        indexed: false\n      },\n      { name: \"nonce\", internalType: \"uint48\", type: \"uint48\", indexed: false }\n    ],\n    name: \"Permit\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"word\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"mask\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"UnorderedNonceInvalidation\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"AllowanceExpired\"\n  },\n  { type: \"error\", inputs: [], name: \"ExcessiveInvalidation\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"amount\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"InsufficientAllowance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"maxAmount\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"InvalidAmount\"\n  },\n  { type: \"error\", inputs: [], name: \"LengthMismatch\" }\n];\nvar permit2Address = {\n  8453: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n  84532: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\"\n};\nvar permit2Config = {\n  address: permit2Address,\n  abi: permit2ABI\n};\nvar poolConfigEncodingABI = [\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"version\", internalType: \"uint8\", type: \"uint8\" },\n      { name: \"currency\", internalType: \"address\", type: \"address\" },\n      { name: \"tickLower\", internalType: \"int24[]\", type: \"int24[]\" },\n      { name: \"tickUpper\", internalType: \"int24[]\", type: \"int24[]\" },\n      {\n        name: \"numDiscoveryPositions\",\n        internalType: \"uint16[]\",\n        type: \"uint16[]\"\n      },\n      {\n        name: \"maxDiscoverySupplyShare\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\"\n      }\n    ],\n    name: \"encodeMultiCurvePoolConfig\",\n    outputs: [{ name: \"\", internalType: \"bytes\", type: \"bytes\" }],\n    stateMutability: \"pure\"\n  }\n];\nvar protocolRewardsABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"WITHDRAW_TYPEHASH\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"reason\", internalType: \"bytes4\", type: \"bytes4\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"recipients\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"amounts\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"reasons\", internalType: \"bytes4[]\", type: \"bytes4[]\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"depositBatch\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"creator\", internalType: \"address\", type: \"address\" },\n      { name: \"creatorReward\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"createReferral\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"createReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"mintReferral\", internalType: \"address\", type: \"address\" },\n      { name: \"mintReferralReward\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"firstMinter\", internalType: \"address\", type: \"address\" },\n      { name: \"firstMinterReward\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"zora\", internalType: \"address\", type: \"address\" },\n      { name: \"zoraReward\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"depositRewards\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"withdrawFor\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"v\", internalType: \"uint8\", type: \"uint8\" },\n      { name: \"r\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"s\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"withdrawWithSig\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"reason\", internalType: \"bytes4\", type: \"bytes4\", indexed: true },\n      {\n        name: \"amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"Deposit\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"creator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"createReferral\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"mintReferral\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"firstMinter\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"zora\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"from\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"creatorReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"createReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"mintReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"firstMinterReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"zoraReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"RewardsDeposit\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Withdraw\"\n  },\n  { type: \"error\", inputs: [], name: \"ADDRESS_ZERO\" },\n  { type: \"error\", inputs: [], name: \"ARRAY_LENGTH_MISMATCH\" },\n  { type: \"error\", inputs: [], name: \"INVALID_DEPOSIT\" },\n  { type: \"error\", inputs: [], name: \"INVALID_SIGNATURE\" },\n  { type: \"error\", inputs: [], name: \"INVALID_WITHDRAW\" },\n  { type: \"error\", inputs: [], name: \"InvalidShortString\" },\n  { type: \"error\", inputs: [], name: \"SIGNATURE_DEADLINE_EXPIRED\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"str\", internalType: \"string\", type: \"string\" }],\n    name: \"StringTooLong\"\n  },\n  { type: \"error\", inputs: [], name: \"TRANSFER_FAILED\" }\n];\nvar protocolRewardsAddress = {\n  1: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  10: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  999: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  8453: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  42161: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  81457: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  84532: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  421614: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  7777777: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  11155111: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  168587773: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\",\n  999999999: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n};\nvar protocolRewardsConfig = {\n  address: protocolRewardsAddress,\n  abi: protocolRewardsABI\n};\nvar secondarySwapABI = [\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{ name: \"\", internalType: \"contract IWETH\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"erc20zAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"num1155ToBuy\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address payable\", type: \"address\" },\n      {\n        name: \"excessRefundRecipient\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"maxEthToSpend\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"sqrtPriceLimitX96\", internalType: \"uint160\", type: \"uint160\" }\n    ],\n    name: \"buy1155\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"weth_\", internalType: \"contract IWETH\", type: \"address\" },\n      {\n        name: \"swapRouter_\",\n        internalType: \"contract ISwapRouter\",\n        type: \"address\"\n      },\n      { name: \"uniswapFee_\", internalType: \"uint24\", type: \"uint24\" },\n      {\n        name: \"zoraTimedSaleStrategy_\",\n        internalType: \"contract IZoraTimedSaleStrategy\",\n        type: \"address\"\n      }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155BatchReceived\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"erc20zAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"num1155ToSell\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address payable\", type: \"address\" },\n      { name: \"minEthToAcquire\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"sqrtPriceLimitX96\", internalType: \"uint160\", type: \"uint160\" }\n    ],\n    name: \"sell1155\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"swapRouter\",\n    outputs: [\n      { name: \"\", internalType: \"contract ISwapRouter\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"uniswapFee\",\n    outputs: [{ name: \"\", internalType: \"uint24\", type: \"uint24\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zoraTimedSaleStrategy\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"contract IZoraTimedSaleStrategy\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"msgSender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"erc20zAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amountETHSold\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"num1155Purchased\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SecondaryBuy\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"secondaryType\",\n        internalType: \"enum ISecondarySwap.SecondaryType\",\n        type: \"uint8\",\n        indexed: false\n      }\n    ],\n    name: \"SecondaryComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"msgSender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"recipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"erc20zAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amountETHPurchased\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"num1155Sold\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SecondarySell\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"AlreadyInitialized\" },\n  { type: \"error\", inputs: [], name: \"ERC20ZEquivalentAmountNotConverted\" },\n  { type: \"error\", inputs: [], name: \"ERC20ZMinimumAmountNotReceived\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InvalidRecipient\" },\n  { type: \"error\", inputs: [], name: \"NoETHSent\" },\n  { type: \"error\", inputs: [], name: \"NotSupported\" },\n  { type: \"error\", inputs: [], name: \"OnlyWETH\" },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"SaleNotSet\" }\n];\nvar secondarySwapAddress = {\n  1: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  10: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  8453: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  42161: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  81457: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  84532: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  421614: \"0x777777794a6e310F2A55da6f157b16ED28Fa5D91\",\n  7777777: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  11155111: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\",\n  999999999: \"0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1\"\n};\nvar secondarySwapConfig = {\n  address: secondarySwapAddress,\n  abi: secondarySwapABI\n};\nvar sponsoredSparksSpenderABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_zoraSparks1155\",\n        internalType: \"contract IZoraSparks1155\",\n        type: \"address\"\n      },\n      { name: \"fundsManager\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"defaultVerifiers\",\n        internalType: \"address[]\",\n        type: \"address[]\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"NAME\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"SPONSORED_SPEND_TYPEHASH\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"SPONSORSHIP_TYPEHASH\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    name: \"allowedVerifiers\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"fund\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"sponsorship\",\n        internalType: \"struct SponsoredMintBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"verifier\", internalType: \"address\", type: \"address\" },\n          { name: \"from\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"destination\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"data\", internalType: \"bytes\", type: \"bytes\" },\n          {\n            name: \"expectedRedeemAmount\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"totalAmount\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"hashSponsoredMint\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"sponsoredSpend\",\n        internalType: \"struct SponsoredSpend\",\n        type: \"tuple\",\n        components: [\n          { name: \"verifier\", internalType: \"address\", type: \"address\" },\n          { name: \"from\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"destination\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"data\", internalType: \"bytes\", type: \"bytes\" },\n          {\n            name: \"expectedInputAmount\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"totalAmount\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"hashSponsoredSpend\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"values\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155BatchReceived\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"verifier\", internalType: \"address\", type: \"address\" },\n      { name: \"enabled\", internalType: \"bool\", type: \"bool\" }\n    ],\n    name: \"setVerifierStatus\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"sponsoredSpend\",\n        internalType: \"struct SponsoredSpend\",\n        type: \"tuple\",\n        components: [\n          { name: \"verifier\", internalType: \"address\", type: \"address\" },\n          { name: \"from\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"destination\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"data\", internalType: \"bytes\", type: \"bytes\" },\n          {\n            name: \"expectedInputAmount\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"totalAmount\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"sponsoredExecute\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"usedNonces\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"amount\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"amount\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      }\n    ],\n    name: \"ContractFunded\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"verifier\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"amountSpent\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"contractValue\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SentSponsoredCallFromMintBalances\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"verifier\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"enabled\", internalType: \"bool\", type: \"bool\", indexed: true }\n    ],\n    name: \"SetVerifierStatus\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"data\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC20NotSupported\"\n  },\n  { type: \"error\", inputs: [], name: \"IdsMismatch\" },\n  { type: \"error\", inputs: [], name: \"InvalidShortString\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"LengthMismatch\" },\n  { type: \"error\", inputs: [], name: \"NoMoreFundsToSponsor\" },\n  { type: \"error\", inputs: [], name: \"NonceUsed\" },\n  { type: \"error\", inputs: [], name: \"NotExpectingReceive\" },\n  { type: \"error\", inputs: [], name: \"NotZoraSparks1155\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      {\n        name: \"expectedRedeemAmount\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      {\n        name: \"transientReceivedAmount\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"RedeemAmountIsIncorrect\"\n  },\n  { type: \"error\", inputs: [], name: \"SenderNotAllowedInSignature\" },\n  { type: \"error\", inputs: [], name: \"SignatureExpired\" },\n  { type: \"error\", inputs: [], name: \"SingleTransferNotSupported\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"str\", internalType: \"string\", type: \"string\" }],\n    name: \"StringTooLong\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"data\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"TransferFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"UnknownAction\" },\n  { type: \"error\", inputs: [], name: \"UnknownUserAction\" },\n  { type: \"error\", inputs: [], name: \"ValuesMismatch\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"verifier\", internalType: \"address\", type: \"address\" }],\n    name: \"VerifierNotAllowed\"\n  },\n  { type: \"error\", inputs: [], name: \"WithdrawFailed\" }\n];\nvar sponsoredSparksSpenderAddress = {\n  10: \"0x35ca784918bf11692708c1D530691704AAcEA95E\",\n  8453: \"0x6958A8866A40118e2CC21ab4752353835321b5e6\",\n  42161: \"0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7\",\n  81457: \"0x786F0f6aE196715Cd6d65693f06DA57426ac8463\",\n  84532: \"0x23150f60E233F519A01C735C29c1591f9E8353dE\",\n  7777777: \"0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d\",\n  999999999: \"0x3A98313fB00918a81d98f9986aED089365428293\"\n};\nvar sponsoredSparksSpenderConfig = {\n  address: sponsoredSparksSpenderAddress,\n  abi: sponsoredSparksSpenderABI\n};\nvar uniswapQuoterV2ABI = [\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"path\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"quoteExactInput\",\n    outputs: [\n      { name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"sqrtPriceX96AfterList\",\n        internalType: \"uint160[]\",\n        type: \"uint160[]\"\n      },\n      {\n        name: \"initializedTicksCrossedList\",\n        internalType: \"uint32[]\",\n        type: \"uint32[]\"\n      },\n      { name: \"gasEstimate\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenIn\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenOut\", internalType: \"address\", type: \"address\" },\n          { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          }\n        ]\n      }\n    ],\n    name: \"quoteExactInputSingle\",\n    outputs: [\n      { name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"sqrtPriceX96After\", internalType: \"uint160\", type: \"uint160\" },\n      {\n        name: \"initializedTicksCrossed\",\n        internalType: \"uint32\",\n        type: \"uint32\"\n      },\n      { name: \"gasEstimate\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"path\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"quoteExactOutput\",\n    outputs: [\n      { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"sqrtPriceX96AfterList\",\n        internalType: \"uint160[]\",\n        type: \"uint160[]\"\n      },\n      {\n        name: \"initializedTicksCrossedList\",\n        internalType: \"uint32[]\",\n        type: \"uint32[]\"\n      },\n      { name: \"gasEstimate\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct IQuoterV2.QuoteExactOutputSingleParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenIn\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenOut\", internalType: \"address\", type: \"address\" },\n          { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          }\n        ]\n      }\n    ],\n    name: \"quoteExactOutputSingle\",\n    outputs: [\n      { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"sqrtPriceX96After\", internalType: \"uint160\", type: \"uint160\" },\n      {\n        name: \"initializedTicksCrossed\",\n        internalType: \"uint32\",\n        type: \"uint32\"\n      },\n      { name: \"gasEstimate\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  }\n];\nvar uniswapQuoterV2Address = {\n  8453: \"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a\",\n  84532: \"0xC5290058841028F1614F3A6F0F5816cAd0df5E27\"\n};\nvar uniswapQuoterV2Config = {\n  address: uniswapQuoterV2Address,\n  abi: uniswapQuoterV2ABI\n};\nvar uniswapUniversalRouterABI = [\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"commands\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"inputs\", internalType: \"bytes[]\", type: \"bytes[]\" },\n      { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  { type: \"error\", inputs: [], name: \"ETHNotAccepted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"commandIndex\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"message\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"ExecutionFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidEthSender\" },\n  { type: \"error\", inputs: [], name: \"LengthMismatch\" },\n  { type: \"error\", inputs: [], name: \"TransactionDeadlinePassed\" }\n];\nvar uniswapUniversalRouterAddress = {\n  8453: \"0x6fF5693b99212Da76ad316178A184AB56D299b43\",\n  84532: \"0x492E6456D9528771018DeB9E87ef7750EF184104\"\n};\nvar uniswapUniversalRouterConfig = {\n  address: uniswapUniversalRouterAddress,\n  abi: uniswapUniversalRouterABI\n};\nvar uniswapV3SwapRouterABI = [\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct ISwapRouter.ExactInputParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"path\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"recipient\", internalType: \"address\", type: \"address\" },\n          { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"amountOutMinimum\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          }\n        ]\n      }\n    ],\n    name: \"exactInput\",\n    outputs: [{ name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenIn\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenOut\", internalType: \"address\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"recipient\", internalType: \"address\", type: \"address\" },\n          { name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"amountOutMinimum\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          }\n        ]\n      }\n    ],\n    name: \"exactInputSingle\",\n    outputs: [{ name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct ISwapRouter.ExactOutputParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"path\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"recipient\", internalType: \"address\", type: \"address\" },\n          { name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"amountInMaximum\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"exactOutput\",\n    outputs: [{ name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"params\",\n        internalType: \"struct ISwapRouter.ExactOutputSingleParams\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenIn\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenOut\", internalType: \"address\", type: \"address\" },\n          { name: \"fee\", internalType: \"uint24\", type: \"uint24\" },\n          { name: \"recipient\", internalType: \"address\", type: \"address\" },\n          { name: \"amountOut\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"amountInMaximum\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"sqrtPriceLimitX96\",\n            internalType: \"uint160\",\n            type: \"uint160\"\n          }\n        ]\n      }\n    ],\n    name: \"exactOutputSingle\",\n    outputs: [{ name: \"amountIn\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"amount0Delta\", internalType: \"int256\", type: \"int256\" },\n      { name: \"amount1Delta\", internalType: \"int256\", type: \"int256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"uniswapV3SwapCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  }\n];\nvar uniswapV3SwapRouterAddress = {\n  1: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n  10: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n  8453: \"0x2626664c2603336E57B271c5C0b26F421741e481\",\n  42161: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n  81457: \"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66\",\n  84532: \"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4\",\n  421614: \"0x101F443B4d1b059569D643917553c771E1b9663E\",\n  7777777: \"0x7De04c96BE5159c3b5CeffC82aa176dc81281557\",\n  11155111: \"0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E\",\n  11155420: \"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4\",\n  999999999: \"0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a\"\n};\nvar uniswapV3SwapRouterConfig = {\n  address: uniswapV3SwapRouterAddress,\n  abi: uniswapV3SwapRouterABI\n};\nvar upgradeGateABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"cancelOwnershipTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_initialOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"isAllowedUpgrade\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"baseImpl\", internalType: \"address\", type: \"address\" },\n      { name: \"upgradeImpl\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"isRegisteredUpgradePath\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"baseImpls\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"upgradeImpl\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"registerUpgradePath\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"baseImpl\", internalType: \"address\", type: \"address\" },\n      { name: \"upgradeImpl\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"removeUpgradePath\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"resignOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"safeTransferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"version\", internalType: \"uint8\", type: \"uint8\", indexed: false }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"canceledOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerCanceled\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"pendingOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerPending\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"prevOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerUpdated\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"UpgradeGateSetup\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"baseImpl\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"upgradeImpl\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"UpgradeRegistered\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"baseImpl\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"upgradeImpl\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"UpgradeRemoved\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"ONLY_OWNER\" },\n  { type: \"error\", inputs: [], name: \"ONLY_PENDING_OWNER\" },\n  { type: \"error\", inputs: [], name: \"OWNER_CANNOT_BE_ZERO_ADDRESS\" }\n];\nvar upgradeGateAddress = {\n  1: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  10: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  8453: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  42161: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  81457: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  84532: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  421614: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  7777777: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  11155111: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n  168587773: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\"\n};\nvar upgradeGateConfig = {\n  address: upgradeGateAddress,\n  abi: upgradeGateABI\n};\nvar wethABI = [\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"guy\", internalType: \"address\", type: \"address\" },\n      { name: \"wad\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"guy\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"dst\", internalType: \"address\", type: \"address\" },\n      { name: \"wad\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transfer\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"src\", internalType: \"address\", type: \"address\" },\n      { name: \"dst\", internalType: \"address\", type: \"address\" },\n      { name: \"wad\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"transferFrom\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"wad\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  }\n];\nvar wethAddress = {\n  1: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  10: \"0x4200000000000000000000000000000000000006\",\n  8453: \"0x4200000000000000000000000000000000000006\",\n  42161: \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n  81457: \"0x4300000000000000000000000000000000000004\",\n  84532: \"0x4200000000000000000000000000000000000006\",\n  421614: \"0xc556bAe1e86B2aE9c22eA5E036b07E55E7596074\",\n  7777777: \"0x4200000000000000000000000000000000000006\",\n  11155111: \"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9\",\n  11155420: \"0x4200000000000000000000000000000000000006\",\n  999999999: \"0x4200000000000000000000000000000000000006\"\n};\nvar wethConfig = { address: wethAddress, abi: wethABI };\nvar zoraAccountManagerABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"encodedOwners\", internalType: \"bytes[]\", type: \"bytes[]\" },\n      { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"createSmartWallet\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"entryPoint\",\n    outputs: [\n      { name: \"\", internalType: \"contract IEntryPoint\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"encodedOwners\", internalType: \"bytes[]\", type: \"bytes[]\" },\n      { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"getAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"smartWallet\", internalType: \"address\", type: \"address\" },\n      { name: \"key\", internalType: \"uint192\", type: \"uint192\" }\n    ],\n    name: \"getKeyNonce\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"smartWallet\", internalType: \"address\", type: \"address\" }],\n    name: \"getNonce\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"initialOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"smartWalletFactory\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"contract ICoinbaseSmartWalletFactory\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"smartWallet\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"baseOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"owners\",\n        internalType: \"address[]\",\n        type: \"address[]\",\n        indexed: false\n      },\n      {\n        name: \"nonce\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"ZoraSmartWalletCreated\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  }\n];\nvar zoraAccountManagerAddress = {\n  8453: \"0x0Ba958A449701907302e28F5955fa9d16dDC45c3\",\n  7777777: \"0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52\"\n};\nvar zoraAccountManagerConfig = {\n  address: zoraAccountManagerAddress,\n  abi: zoraAccountManagerABI\n};\nvar zoraCreator1155FactoryImplABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_zora1155Impl\",\n        internalType: \"contract IZoraCreator1155\",\n        type: \"address\"\n      },\n      {\n        name: \"_merkleMinter\",\n        internalType: \"contract IMinter1155\",\n        type: \"address\"\n      },\n      {\n        name: \"_fixedPriceMinter\",\n        internalType: \"contract IMinter1155\",\n        type: \"address\"\n      },\n      {\n        name: \"_redeemMinterFactory\",\n        internalType: \"contract IMinter1155\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"cancelOwnershipTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"defaultRoyaltyConfiguration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      },\n      {\n        name: \"defaultAdmin\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"setupActions\", internalType: \"bytes[]\", type: \"bytes[]\" }\n    ],\n    name: \"createContract\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"defaultRoyaltyConfiguration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      },\n      {\n        name: \"defaultAdmin\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"setupActions\", internalType: \"bytes[]\", type: \"bytes[]\" }\n    ],\n    name: \"createContractDeterministic\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"defaultMinters\",\n    outputs: [\n      {\n        name: \"minters\",\n        internalType: \"contract IMinter1155[]\",\n        type: \"address[]\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"msgSender\", internalType: \"address\", type: \"address\" },\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"contractAdmin\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"deterministicContractAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"msgSender\", internalType: \"address\", type: \"address\" },\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n      { name: \"setupActions\", internalType: \"bytes[]\", type: \"bytes[]\" }\n    ],\n    name: \"deterministicContractAddressWithSetupActions\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"fixedPriceMinter\",\n    outputs: [\n      { name: \"\", internalType: \"contract IMinter1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"expectedContractAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"defaultRoyaltyConfiguration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      },\n      {\n        name: \"defaultAdmin\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"setupActions\", internalType: \"bytes[]\", type: \"bytes[]\" }\n    ],\n    name: \"getOrCreateContractDeterministic\",\n    outputs: [\n      {\n        name: \"calculatedContractAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_initialOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"merkleMinter\",\n    outputs: [\n      { name: \"\", internalType: \"contract IMinter1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"redeemMinterFactory\",\n    outputs: [\n      { name: \"\", internalType: \"contract IMinter1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"resignOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"safeTransferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zora1155Impl\",\n    outputs: [\n      { name: \"\", internalType: \"contract IZoraCreator1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"newAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"AdminChanged\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"beacon\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"BeaconUpgraded\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"calculatedContractAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"ContractAlreadyExistsSkippingDeploy\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"FactorySetup\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"version\", internalType: \"uint8\", type: \"uint8\", indexed: false }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"canceledOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerCanceled\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"pendingOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerPending\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"prevOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"newContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"creator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"defaultAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"contractURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false },\n      {\n        name: \"defaultRoyaltyConfiguration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"SetupNewContract\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  { type: \"error\", inputs: [], name: \"ADDRESS_DELEGATECALL_TO_NON_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ADDRESS_LOW_LEVEL_CALL_FAILED\" },\n  { type: \"error\", inputs: [], name: \"Constructor_ImplCannotBeZero\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_UUPS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_UNSUPPORTED_PROXIABLEUUID\" },\n  {\n    type: \"error\",\n    inputs: [\n      {\n        name: \"expectedContractAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      {\n        name: \"calculcatedContractAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    name: \"ExpectedContractAddressDoesNotMatchCalculatedContractAddress\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"ONLY_OWNER\" },\n  { type: \"error\", inputs: [], name: \"ONLY_PENDING_OWNER\" },\n  { type: \"error\", inputs: [], name: \"OWNER_CANNOT_BE_ZERO_ADDRESS\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"string\", type: \"string\" },\n      { name: \"actual\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  },\n  { type: \"error\", inputs: [], name: \"ADDRESS_DELEGATECALL_TO_NON_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ADDRESS_LOW_LEVEL_CALL_FAILED\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Burn_NotOwnerOrApproved\"\n  },\n  { type: \"error\", inputs: [], name: \"CREATOR_FUNDS_RECIPIENT_NOT_SET\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"reason\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"Call_TokenIdMismatch\" },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  { type: \"error\", inputs: [], name: \"CanOnlyReduceMaxSupply\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CannotMintMoreTokens\"\n  },\n  { type: \"error\", inputs: [], name: \"CannotReduceMaxSupplyBelowMinted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"proposedAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Config_TransferHookNotSupported\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_BURN_FROM_ZERO_ADDRESS\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ERC1155RECEIVER_REJECTED_TOKENS\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_SETTING_APPROVAL_FOR_SELF\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_TRANSFER_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_UUPS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_UNSUPPORTED_PROXIABLEUUID\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ETHWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  { type: \"error\", inputs: [], name: \"FirstMinterAddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"contractValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"FundsWithdrawInsolvent\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"INVALID_ADDRESS_ZERO\" },\n  { type: \"error\", inputs: [], name: \"INVALID_ETH_AMOUNT\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidPremintVersion\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignatureVersion\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"magicValue\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"MintNotYetStarted\" },\n  { type: \"error\", inputs: [], name: \"Mint_InsolventSaleTransfer\" },\n  { type: \"error\", inputs: [], name: \"Mint_InvalidMintArrayLength\" },\n  { type: \"error\", inputs: [], name: \"Mint_TokenIDMintNotAllowed\" },\n  { type: \"error\", inputs: [], name: \"Mint_UnknownCommand\" },\n  { type: \"error\", inputs: [], name: \"Mint_ValueTransferFail\" },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"NewOwnerNeedsToBeAdmin\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"NoRendererForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"NonEthRedemption\" },\n  { type: \"error\", inputs: [], name: \"ONLY_CREATE_REFERRAL\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForRegisteredMinter\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForTimedSaleStrategy\" },\n  { type: \"error\", inputs: [], name: \"OnlyTransfersFromZoraMints\" },\n  { type: \"error\", inputs: [], name: \"PremintDeleted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ProtocolRewardsWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"renderer\", internalType: \"address\", type: \"address\" }],\n    name: \"RendererNotValid\"\n  },\n  { type: \"error\", inputs: [], name: \"Renderer_NotValidRendererContract\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"targetContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Sale_CannotCallNonSalesContract\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"TokenIdMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"role\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserMissingRoleForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"premintSignerContractFailedToRecoverSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"premintSignerContractNotAContract\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ERC1167FailedCreateClone\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"EndTimeCannotBeInThePast\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InsufficientFunds\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"MarketAlreadyLaunched\" },\n  { type: \"error\", inputs: [], name: \"MarketMinimumNotReached\" },\n  { type: \"error\", inputs: [], name: \"MinimumMarketEthNotMet\" },\n  { type: \"error\", inputs: [], name: \"NeedsToBeAtLeastOneSaleToStartMarket\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"OnlyZoraRewardRecipient\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"RequestMintInvalidUseMint\" },\n  { type: \"error\", inputs: [], name: \"ResetSaleNotAvailable\" },\n  { type: \"error\", inputs: [], name: \"SaleAlreadySet\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleInProgress\" },\n  { type: \"error\", inputs: [], name: \"SaleNotSet\" },\n  { type: \"error\", inputs: [], name: \"SaleV2AlreadyStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleV2Ended\" },\n  { type: \"error\", inputs: [], name: \"SaleV2NotSet\" },\n  { type: \"error\", inputs: [], name: \"StartTimeCannotBeAfterEndTime\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ZoraCreator1155ContractNeedsToSupportReduceSupply\"\n  }\n];\nvar zoraCreator1155FactoryImplAddress = {\n  1: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  10: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  999: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  8453: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  42161: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  81457: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  84532: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  421614: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  7777777: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  11155111: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  168587773: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n  999999999: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\"\n};\nvar zoraCreator1155FactoryImplConfig = {\n  address: zoraCreator1155FactoryImplAddress,\n  abi: zoraCreator1155FactoryImplABI\n};\nvar zoraCreator1155ImplABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"_mintFeeRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"_upgradeGate\", internalType: \"address\", type: \"address\" },\n      { name: \"_protocolRewards\", internalType: \"address\", type: \"address\" },\n      { name: \"_timedSaleStrategy\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  { type: \"receive\", stateMutability: \"payable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"CONTRACT_BASE_ID\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERMISSION_BIT_ADMIN\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERMISSION_BIT_FUNDS_MANAGER\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERMISSION_BIT_METADATA\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERMISSION_BIT_MINTER\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"PERMISSION_BIT_SALES\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"permissionBits\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"addPermission\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"adminMint\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"lastTokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"assumeLastTokenIdMatches\",\n    outputs: [],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    name: \"balanceOfBatch\",\n    outputs: [\n      { name: \"batchBalances\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"amounts\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    name: \"burnBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"callRenderer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"salesConfig\",\n        internalType: \"contract IMinter1155\",\n        type: \"address\"\n      },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"callSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"mintPrice\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"computeTotalReward\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"config\",\n    outputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"__gap1\", internalType: \"uint96\", type: \"uint96\" },\n      {\n        name: \"fundsRecipient\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"__gap2\", internalType: \"uint96\", type: \"uint96\" },\n      {\n        name: \"transferHook\",\n        internalType: \"contract ITransferHookReceiver\",\n        type: \"address\"\n      },\n      { name: \"__gap3\", internalType: \"uint96\", type: \"uint96\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"createReferrals\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"customRenderers\",\n    outputs: [\n      { name: \"\", internalType: \"contract IRenderer1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"premintConfig\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"premintVersion\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"firstMinter\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"premintSignerContract\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    name: \"delegateSetupNewToken\",\n    outputs: [{ name: \"newTokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"uint32\", type: \"uint32\" }],\n    name: \"delegatedTokenId\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"firstMinters\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getCreatorRewardRecipient\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getCustomRenderer\",\n    outputs: [\n      {\n        name: \"customRenderer\",\n        internalType: \"contract IRenderer1155\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getRoyalties\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getTokenInfo\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IZoraCreator1155TypesV1.TokenData\",\n        type: \"tuple\",\n        components: [\n          { name: \"uri\", internalType: \"string\", type: \"string\" },\n          { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"contractName\", internalType: \"string\", type: \"string\" },\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"defaultRoyaltyConfiguration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      },\n      {\n        name: \"defaultAdmin\",\n        internalType: \"address payable\",\n        type: \"address\"\n      },\n      { name: \"setupActions\", internalType: \"bytes[]\", type: \"bytes[]\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"role\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"isAdminOrRole\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"operator\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"metadataRendererContract\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"minter\", internalType: \"contract IMinter1155\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"rewardsRecipients\",\n        internalType: \"address[]\",\n        type: \"address[]\"\n      },\n      { name: \"minterArguments\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"mintFee\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"data\", internalType: \"bytes[]\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ name: \"results\", internalType: \"bytes[]\", type: \"bytes[]\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"nextTokenId\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"permissions\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"newMaxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"reduceSupply\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"permissionBits\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"removePermission\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"royalties\",\n    outputs: [\n      { name: \"royaltyMintSchedule\", internalType: \"uint32\", type: \"uint32\" },\n      { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n      { name: \"royaltyRecipient\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"salePrice\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"royaltyInfo\",\n    outputs: [\n      { name: \"receiver\", internalType: \"address\", type: \"address\" },\n      { name: \"royaltyAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"amounts\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"safeBatchTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"approved\", internalType: \"bool\", type: \"bool\" }\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"fundsRecipient\",\n        internalType: \"address payable\",\n        type: \"address\"\n      }\n    ],\n    name: \"setFundsRecipient\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"renderer\",\n        internalType: \"contract IRenderer1155\",\n        type: \"address\"\n      }\n    ],\n    name: \"setTokenMetadataRenderer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"transferHook\",\n        internalType: \"contract ITransferHookReceiver\",\n        type: \"address\"\n      }\n    ],\n    name: \"setTransferHook\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newURI\", internalType: \"string\", type: \"string\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"setupNewToken\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newURI\", internalType: \"string\", type: \"string\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"createReferral\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"setupNewTokenWithCreateReferral\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"supportedPremintSignatureVersions\",\n    outputs: [{ name: \"\", internalType: \"string[]\", type: \"string[]\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_newURI\", internalType: \"string\", type: \"string\" },\n      { name: \"_newName\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"updateContractMetadata\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"updateCreateReferral\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"newConfiguration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ]\n      }\n    ],\n    name: \"updateRoyaltiesForToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"_newURI\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"updateTokenURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"uri\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"newAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"AdminChanged\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"account\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"approved\", internalType: \"bool\", type: \"bool\", indexed: false }\n    ],\n    name: \"ApprovalForAll\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"beacon\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"BeaconUpgraded\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"updater\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"updateType\",\n        internalType: \"enum IZoraCreator1155.ConfigUpdate\",\n        type: \"uint8\",\n        indexed: true\n      },\n      {\n        name: \"newConfig\",\n        internalType: \"struct IZoraCreator1155TypesV1.ContractConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"__gap1\", internalType: \"uint96\", type: \"uint96\" },\n          {\n            name: \"fundsRecipient\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"__gap2\", internalType: \"uint96\", type: \"uint96\" },\n          {\n            name: \"transferHook\",\n            internalType: \"contract ITransferHookReceiver\",\n            type: \"address\"\n          },\n          { name: \"__gap3\", internalType: \"uint96\", type: \"uint96\" }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"ConfigUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"updater\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"uri\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"name\", internalType: \"string\", type: \"string\", indexed: false }\n    ],\n    name: \"ContractMetadataUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"renderer\",\n        internalType: \"contract IRenderer1155\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"ContractRendererUpdated\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"ContractURIUpdated\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"structHash\",\n        internalType: \"bytes32\",\n        type: \"bytes32\",\n        indexed: false\n      },\n      {\n        name: \"domainName\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"version\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"creator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"signature\",\n        internalType: \"bytes\",\n        type: \"bytes\",\n        indexed: false\n      }\n    ],\n    name: \"CreatorAttribution\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"version\", internalType: \"uint8\", type: \"uint8\", indexed: false }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"lastOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"minter\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Purchased\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"renderer\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"user\", internalType: \"address\", type: \"address\", indexed: true }\n    ],\n    name: \"RendererUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"maxSupply\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SetupNewToken\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"ids\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      },\n      {\n        name: \"values\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      }\n    ],\n    name: \"TransferBatch\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\", indexed: false },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"TransferSingle\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"value\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\", indexed: true }\n    ],\n    name: \"URI\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      { name: \"user\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"permissions\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      }\n    ],\n    name: \"UpdatedPermissions\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      { name: \"user\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"configuration\",\n        internalType: \"struct ICreatorRoyaltiesControl.RoyaltyConfiguration\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"UpdatedRoyalties\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"tokenData\",\n        internalType: \"struct IZoraCreator1155TypesV1.TokenData\",\n        type: \"tuple\",\n        components: [\n          { name: \"uri\", internalType: \"string\", type: \"string\" },\n          { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"UpdatedToken\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  { type: \"error\", inputs: [], name: \"ADDRESS_DELEGATECALL_TO_NON_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ADDRESS_LOW_LEVEL_CALL_FAILED\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Burn_NotOwnerOrApproved\"\n  },\n  { type: \"error\", inputs: [], name: \"CREATOR_FUNDS_RECIPIENT_NOT_SET\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"reason\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"Call_TokenIdMismatch\" },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  { type: \"error\", inputs: [], name: \"CanOnlyReduceMaxSupply\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CannotMintMoreTokens\"\n  },\n  { type: \"error\", inputs: [], name: \"CannotReduceMaxSupplyBelowMinted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"proposedAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Config_TransferHookNotSupported\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_BURN_FROM_ZERO_ADDRESS\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_ERC1155RECEIVER_REJECTED_TOKENS\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_SETTING_APPROVAL_FOR_SELF\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_TRANSFER_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_UUPS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_UNSUPPORTED_PROXIABLEUUID\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ETHWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  { type: \"error\", inputs: [], name: \"FirstMinterAddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"contractValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"FundsWithdrawInsolvent\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"INVALID_ADDRESS_ZERO\" },\n  { type: \"error\", inputs: [], name: \"INVALID_ETH_AMOUNT\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidPremintVersion\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignatureVersion\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"magicValue\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"MintNotYetStarted\" },\n  { type: \"error\", inputs: [], name: \"Mint_InsolventSaleTransfer\" },\n  { type: \"error\", inputs: [], name: \"Mint_InvalidMintArrayLength\" },\n  { type: \"error\", inputs: [], name: \"Mint_TokenIDMintNotAllowed\" },\n  { type: \"error\", inputs: [], name: \"Mint_UnknownCommand\" },\n  { type: \"error\", inputs: [], name: \"Mint_ValueTransferFail\" },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"NewOwnerNeedsToBeAdmin\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"NoRendererForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"NonEthRedemption\" },\n  { type: \"error\", inputs: [], name: \"ONLY_CREATE_REFERRAL\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForRegisteredMinter\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForTimedSaleStrategy\" },\n  { type: \"error\", inputs: [], name: \"OnlyTransfersFromZoraMints\" },\n  { type: \"error\", inputs: [], name: \"PremintDeleted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ProtocolRewardsWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"renderer\", internalType: \"address\", type: \"address\" }],\n    name: \"RendererNotValid\"\n  },\n  { type: \"error\", inputs: [], name: \"Renderer_NotValidRendererContract\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"targetContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Sale_CannotCallNonSalesContract\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"TokenIdMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"role\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserMissingRoleForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"premintSignerContractFailedToRecoverSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"premintSignerContractNotAContract\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ERC1167FailedCreateClone\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"EndTimeCannotBeInThePast\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InsufficientFunds\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"MarketAlreadyLaunched\" },\n  { type: \"error\", inputs: [], name: \"MarketMinimumNotReached\" },\n  { type: \"error\", inputs: [], name: \"MinimumMarketEthNotMet\" },\n  { type: \"error\", inputs: [], name: \"NeedsToBeAtLeastOneSaleToStartMarket\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"OnlyZoraRewardRecipient\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"RequestMintInvalidUseMint\" },\n  { type: \"error\", inputs: [], name: \"ResetSaleNotAvailable\" },\n  { type: \"error\", inputs: [], name: \"SaleAlreadySet\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleInProgress\" },\n  { type: \"error\", inputs: [], name: \"SaleNotSet\" },\n  { type: \"error\", inputs: [], name: \"SaleV2AlreadyStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleV2Ended\" },\n  { type: \"error\", inputs: [], name: \"SaleV2NotSet\" },\n  { type: \"error\", inputs: [], name: \"StartTimeCannotBeAfterEndTime\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ZoraCreator1155ContractNeedsToSupportReduceSupply\"\n  }\n];\nvar zoraCreator1155PremintExecutorImplABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_factory\",\n        internalType: \"contract IZoraCreator1155Factory\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"cancelOwnershipTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" }\n        ]\n      }\n    ],\n    name: \"getContractAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractWithAdditionalAdminsCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"additionalAdmins\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      }\n    ],\n    name: \"getContractWithAdditionalAdminsAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_initialOwner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"signer\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"premintContractConfigContractAdmin\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"isAuthorizedToCreatePremint\",\n    outputs: [{ name: \"isAuthorized\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"signer\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"premintContractConfigContractAdmin\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"additionalAdmins\",\n        internalType: \"address[]\",\n        type: \"address[]\"\n      }\n    ],\n    name: \"isAuthorizedToCreatePremintWithAdditionalAdmins\",\n    outputs: [{ name: \"isAuthorized\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" }\n        ]\n      },\n      {\n        name: \"premintConfig\",\n        internalType: \"struct PremintConfig\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"tokenConfig\",\n            internalType: \"struct TokenCreationConfig\",\n            type: \"tuple\",\n            components: [\n              { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n              { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n              {\n                name: \"maxTokensPerAddress\",\n                internalType: \"uint64\",\n                type: \"uint64\"\n              },\n              { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n              { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n              { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n              {\n                name: \"royaltyMintSchedule\",\n                internalType: \"uint32\",\n                type: \"uint32\"\n              },\n              { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n              {\n                name: \"royaltyRecipient\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              {\n                name: \"fixedPriceMinter\",\n                internalType: \"address\",\n                type: \"address\"\n              }\n            ]\n          },\n          { name: \"uid\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"version\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"deleted\", internalType: \"bool\", type: \"bool\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"isValidSignature\",\n    outputs: [\n      { name: \"isValid\", internalType: \"bool\", type: \"bool\" },\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"recoveredSigner\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collectionAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"mintFee\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractWithAdditionalAdminsCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"additionalAdmins\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      },\n      { name: \"premintCollection\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"encodedPremintConfig\",\n        internalType: \"struct PremintConfigEncoded\",\n        type: \"tuple\",\n        components: [\n          { name: \"uid\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"version\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"deleted\", internalType: \"bool\", type: \"bool\" },\n          { name: \"tokenConfig\", internalType: \"bytes\", type: \"bytes\" },\n          {\n            name: \"premintConfigVersion\",\n            internalType: \"bytes32\",\n            type: \"bytes32\"\n          }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"quantityToMint\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"mintArguments\",\n        internalType: \"struct MintArguments\",\n        type: \"tuple\",\n        components: [\n          { name: \"mintRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"mintComment\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"mintRewardsRecipients\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      },\n      { name: \"firstMinter\", internalType: \"address\", type: \"address\" },\n      { name: \"signerContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"premint\",\n    outputs: [\n      {\n        name: \"premintResult\",\n        internalType: \"struct PremintResult\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"createdNewContract\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"uid\", internalType: \"uint32\", type: \"uint32\" }\n    ],\n    name: \"premintStatus\",\n    outputs: [\n      { name: \"contractCreated\", internalType: \"bool\", type: \"bool\" },\n      { name: \"tokenIdForPremint\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" }\n        ]\n      },\n      {\n        name: \"premintConfig\",\n        internalType: \"struct PremintConfig\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"tokenConfig\",\n            internalType: \"struct TokenCreationConfig\",\n            type: \"tuple\",\n            components: [\n              { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n              { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n              {\n                name: \"maxTokensPerAddress\",\n                internalType: \"uint64\",\n                type: \"uint64\"\n              },\n              { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n              { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n              { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n              {\n                name: \"royaltyMintSchedule\",\n                internalType: \"uint32\",\n                type: \"uint32\"\n              },\n              { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n              {\n                name: \"royaltyRecipient\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              {\n                name: \"fixedPriceMinter\",\n                internalType: \"address\",\n                type: \"address\"\n              }\n            ]\n          },\n          { name: \"uid\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"version\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"deleted\", internalType: \"bool\", type: \"bool\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"quantityToMint\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"mintArguments\",\n        internalType: \"struct MintArguments\",\n        type: \"tuple\",\n        components: [\n          { name: \"mintRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"mintComment\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"mintRewardsRecipients\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      }\n    ],\n    name: \"premintV1\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct PremintResult\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"createdNewContract\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" }\n        ]\n      },\n      {\n        name: \"premintConfig\",\n        internalType: \"struct PremintConfigV2\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"tokenConfig\",\n            internalType: \"struct TokenCreationConfigV2\",\n            type: \"tuple\",\n            components: [\n              { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n              { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n              {\n                name: \"maxTokensPerAddress\",\n                internalType: \"uint64\",\n                type: \"uint64\"\n              },\n              { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n              { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n              { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n              { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n              {\n                name: \"payoutRecipient\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              {\n                name: \"fixedPriceMinter\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              {\n                name: \"createReferral\",\n                internalType: \"address\",\n                type: \"address\"\n              }\n            ]\n          },\n          { name: \"uid\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"version\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"deleted\", internalType: \"bool\", type: \"bool\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"quantityToMint\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"mintArguments\",\n        internalType: \"struct MintArguments\",\n        type: \"tuple\",\n        components: [\n          { name: \"mintRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"mintComment\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"mintRewardsRecipients\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      }\n    ],\n    name: \"premintV2\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct PremintResult\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"createdNewContract\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"resignOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"safeTransferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"contractAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"supportedPremintSignatureVersions\",\n    outputs: [{ name: \"versions\", internalType: \"string[]\", type: \"string[]\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"_newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zora1155Factory\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"contract IZoraCreator1155Factory\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"newAdmin\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"AdminChanged\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"beacon\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"BeaconUpgraded\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"version\", internalType: \"uint8\", type: \"uint8\", indexed: false }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"canceledOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerCanceled\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"owner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"pendingOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerPending\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"prevOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnerUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"contractAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"createdNewContract\",\n        internalType: \"bool\",\n        type: \"bool\",\n        indexed: true\n      },\n      { name: \"uid\", internalType: \"uint32\", type: \"uint32\", indexed: false },\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"tokenConfig\",\n        internalType: \"struct TokenCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n          { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n          { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"royaltyMintSchedule\",\n            internalType: \"uint32\",\n            type: \"uint32\"\n          },\n          { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n          {\n            name: \"royaltyRecipient\",\n            internalType: \"address\",\n            type: \"address\"\n          },\n          {\n            name: \"fixedPriceMinter\",\n            internalType: \"address\",\n            type: \"address\"\n          }\n        ],\n        indexed: false\n      },\n      {\n        name: \"minter\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"quantityMinted\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"Preminted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"contractAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"createdNewContract\",\n        internalType: \"bool\",\n        type: \"bool\",\n        indexed: true\n      },\n      { name: \"uid\", internalType: \"uint32\", type: \"uint32\", indexed: false },\n      {\n        name: \"minter\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"quantityMinted\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"PremintedV2\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  { type: \"error\", inputs: [], name: \"ADDRESS_DELEGATECALL_TO_NON_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ADDRESS_LOW_LEVEL_CALL_FAILED\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Burn_NotOwnerOrApproved\"\n  },\n  { type: \"error\", inputs: [], name: \"CREATOR_FUNDS_RECIPIENT_NOT_SET\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"reason\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"Call_TokenIdMismatch\" },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  { type: \"error\", inputs: [], name: \"CanOnlyReduceMaxSupply\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CannotMintMoreTokens\"\n  },\n  { type: \"error\", inputs: [], name: \"CannotReduceMaxSupplyBelowMinted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"proposedAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Config_TransferHookNotSupported\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_CONTRACT\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_NEW_IMPL_NOT_UUPS\" },\n  { type: \"error\", inputs: [], name: \"ERC1967_UNSUPPORTED_PROXIABLEUUID\" },\n  { type: \"error\", inputs: [], name: \"ERC20TransferSlippage\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ETHWithdrawFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  { type: \"error\", inputs: [], name: \"FirstMinterAddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"contractValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"FundsWithdrawInsolvent\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED\"\n  },\n  { type: \"error\", inputs: [], name: \"INITIALIZABLE_CONTRACT_IS_INITIALIZING\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING\"\n  },\n  { type: \"error\", inputs: [], name: \"INVALID_ADDRESS_ZERO\" },\n  { type: \"error\", inputs: [], name: \"INVALID_ETH_AMOUNT\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidPremintVersion\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignatureVersion\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"magicValue\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"MintNotYetStarted\" },\n  { type: \"error\", inputs: [], name: \"Mint_InsolventSaleTransfer\" },\n  { type: \"error\", inputs: [], name: \"Mint_InvalidMintArrayLength\" },\n  { type: \"error\", inputs: [], name: \"Mint_TokenIDMintNotAllowed\" },\n  { type: \"error\", inputs: [], name: \"Mint_UnknownCommand\" },\n  { type: \"error\", inputs: [], name: \"Mint_ValueTransferFail\" },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"NewOwnerNeedsToBeAdmin\" },\n  { type: \"error\", inputs: [], name: \"NonEthRedemption\" },\n  { type: \"error\", inputs: [], name: \"ONLY_CREATE_REFERRAL\" },\n  { type: \"error\", inputs: [], name: \"ONLY_OWNER\" },\n  { type: \"error\", inputs: [], name: \"ONLY_PENDING_OWNER\" },\n  { type: \"error\", inputs: [], name: \"OWNER_CANNOT_BE_ZERO_ADDRESS\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForRegisteredMinter\" },\n  { type: \"error\", inputs: [], name: \"OnlyAllowedForTimedSaleStrategy\" },\n  { type: \"error\", inputs: [], name: \"OnlyTransfersFromZoraMints\" },\n  { type: \"error\", inputs: [], name: \"PremintDeleted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ProtocolRewardsWithdrawFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"Renderer_NotValidRendererContract\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"targetContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Sale_CannotCallNonSalesContract\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"TokenIdMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"string\", type: \"string\" },\n      { name: \"actual\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"role\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserMissingRoleForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"premintSignerContractFailedToRecoverSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"premintSignerContractNotAContract\" }\n];\nvar zoraCreator1155PremintExecutorImplAddress = {\n  1: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  10: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  999: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  8453: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  42161: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  81457: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  84532: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  421614: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  7777777: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  11155111: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  168587773: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n  999999999: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\"\n};\nvar zoraCreator1155PremintExecutorImplConfig = {\n  address: zoraCreator1155PremintExecutorImplAddress,\n  abi: zoraCreator1155PremintExecutorImplABI\n};\nvar zoraCreatorFixedPriceSaleStrategyABI = [\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"wallet\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"getMintedPerWallet\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"ethValueSent\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"minterArguments\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"requestMint\",\n    outputs: [\n      {\n        name: \"commands\",\n        internalType: \"struct ICreatorCommands.CommandSet\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"commands\",\n            internalType: \"struct ICreatorCommands.Command[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"method\",\n                internalType: \"enum ICreatorCommands.CreatorActions\",\n                type: \"uint8\"\n              },\n              { name: \"args\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"at\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"resetSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"sale\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"setSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"MintComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"mediaContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"maxTokensPerAddress\",\n            internalType: \"uint64\",\n            type: \"uint64\"\n          },\n          { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"SaleSet\"\n  },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" }\n];\nvar zoraCreatorFixedPriceSaleStrategyAddress = {\n  1: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n  10: \"0x3678862f04290E565cCA2EF163BAeb92Bb76790C\",\n  999: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n  8453: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n  42161: \"0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21\",\n  81457: \"0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0\",\n  84532: \"0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE\",\n  421614: \"0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21\",\n  7777777: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n  11155111: \"0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21\",\n  168587773: \"0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0\",\n  999999999: \"0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A\"\n};\nvar zoraCreatorFixedPriceSaleStrategyConfig = {\n  address: zoraCreatorFixedPriceSaleStrategyAddress,\n  abi: zoraCreatorFixedPriceSaleStrategyABI\n};\nvar zoraCreatorMerkleMinterStrategyABI = [\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"allowedMerkles\",\n    outputs: [\n      { name: \"presaleStart\", internalType: \"uint64\", type: \"uint64\" },\n      { name: \"presaleEnd\", internalType: \"uint64\", type: \"uint64\" },\n      { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"wallet\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"getMintedPerWallet\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"ethValueSent\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"minterArguments\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"requestMint\",\n    outputs: [\n      {\n        name: \"commands\",\n        internalType: \"struct ICreatorCommands.CommandSet\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"commands\",\n            internalType: \"struct ICreatorCommands.Command[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"method\",\n                internalType: \"enum ICreatorCommands.CreatorActions\",\n                type: \"uint8\"\n              },\n              { name: \"args\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"at\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"resetSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"sale\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings\",\n        type: \"tuple\",\n        components: [\n          { name: \"presaleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"presaleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"merkleSaleSettings\",\n        internalType: \"struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings\",\n        type: \"tuple\",\n        components: [\n          { name: \"presaleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"presaleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n        ]\n      }\n    ],\n    name: \"setSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"mediaContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"merkleSaleSettings\",\n        internalType: \"struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings\",\n        type: \"tuple\",\n        components: [\n          { name: \"presaleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"presaleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"fundsRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n        ],\n        indexed: false\n      }\n    ],\n    name: \"SaleSet\"\n  },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"MerkleClaimsExceeded\" },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" }\n];\nvar zoraCreatorMerkleMinterStrategyAddress = {\n  1: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n  10: \"0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8\",\n  999: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n  8453: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n  42161: \"0xe770E6f19aecF8ef3145A50087999b5556aB3610\",\n  81457: \"0xB9C997FcC46a27331CC986cc2416ee99C1d506c3\",\n  84532: \"0x3E8524770adD176bE381a0529E09f1c6c3502A5a\",\n  421614: \"0xe770E6f19aecF8ef3145A50087999b5556aB3610\",\n  7777777: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n  11155111: \"0xe770E6f19aecF8ef3145A50087999b5556aB3610\",\n  168587773: \"0xB9C997FcC46a27331CC986cc2416ee99C1d506c3\",\n  999999999: \"0x5e5fD4b758076BAD940db0284b711A67E8a3B88c\"\n};\nvar zoraCreatorMerkleMinterStrategyConfig = {\n  address: zoraCreatorMerkleMinterStrategyAddress,\n  abi: zoraCreatorMerkleMinterStrategyABI\n};\nvar zoraCreatorRedeemMinterFactoryABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"CONTRACT_BASE_ID\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"createMinterIfNoneExists\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_creatorContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"doesRedeemMinterExistForCreatorContract\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_creatorContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"getDeployedRedeemMinterForCreatorContract\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_creatorContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"predictMinterAddress\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"ethValueSent\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"minterArguments\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"requestMint\",\n    outputs: [\n      {\n        name: \"commands\",\n        internalType: \"struct ICreatorCommands.CommandSet\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"commands\",\n            internalType: \"struct ICreatorCommands.Command[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"method\",\n                internalType: \"enum ICreatorCommands.CreatorActions\",\n                type: \"uint8\"\n              },\n              { name: \"args\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"at\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zoraRedeemMinterImplementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"creatorContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"minterContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"RedeemMinterDeployed\"\n  },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" }\n];\nvar zoraCreatorRedeemMinterFactoryAddress = {\n  1: \"0x78964965cF77850224513a367f899435C5B69174\",\n  10: \"0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2\",\n  999: \"0x78964965cF77850224513a367f899435C5B69174\",\n  8453: \"0x78964965cF77850224513a367f899435C5B69174\",\n  42161: \"0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D\",\n  81457: \"0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614\",\n  84532: \"0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea\",\n  421614: \"0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D\",\n  7777777: \"0x78964965cF77850224513a367f899435C5B69174\",\n  11155111: \"0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D\",\n  168587773: \"0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614\",\n  999999999: \"0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6\"\n};\nvar zoraCreatorRedeemMinterFactoryConfig = {\n  address: zoraCreatorRedeemMinterFactoryAddress,\n  abi: zoraCreatorRedeemMinterFactoryABI\n};\nvar zoraMints1155ABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"ETH_ADDRESS\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"MINIMUM_ERC20_PRICE\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"MINIMUM_ETH_PRICE\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"NAME\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"authority\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOfAccount\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    name: \"balanceOfBatch\",\n    outputs: [{ name: \"\", internalType: \"uint256[]\", type: \"uint256[]\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"tokenConfig\",\n        internalType: \"struct TokenConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"price\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"redeemHandler\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"createToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getManager\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getTokenConfig\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct TokenConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"price\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"redeemHandler\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"hashPermitBatch\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"hashPermitSingle\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"operator\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"isConsumingScheduledOp\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"isValidSignatureTransferBatch\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"isValidSignatureTransferSingle\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"mintTokenWithERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"mintTokenWithEth\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"nonceUsed\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"newBaseURI\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"notifyURIsUpdated\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newUri\", internalType: \"string\", type: \"string\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"notifyUpdatedTokenURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitSafeTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitSafeTransferBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"redeem\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct Redemption\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"valueRedeemed\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"redeemBatch\",\n    outputs: [\n      {\n        name: \"redemptions\",\n        internalType: \"struct Redemption[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"valueRedeemed\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"values\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"safeBatchTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"approved\", internalType: \"bool\", type: \"bool\" }\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newAuthority\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"setAuthority\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"tokenExists\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"tokenPrice\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"call\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"transferBatchToManagerAndCall\",\n    outputs: [{ name: \"callReturn\", internalType: \"bytes\", type: \"bytes\" }],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"uri\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"account\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"approved\", internalType: \"bool\", type: \"bool\", indexed: false }\n    ],\n    name: \"ApprovalForAll\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"authority\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"AuthorityUpdated\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"ContractURIUpdated\" },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"price\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"tokenAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"TokenCreated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"ids\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      },\n      {\n        name: \"values\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      }\n    ],\n    name: \"TransferBatch\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\", indexed: false },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"TransferSingle\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"value\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\", indexed: true }\n    ],\n    name: \"URI\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"contractURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"baseURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"URIsUpdated\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"authority\", internalType: \"address\", type: \"address\" }],\n    name: \"AccessManagedInvalidAuthority\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"delay\", internalType: \"uint32\", type: \"uint32\" }\n    ],\n    name: \"AccessManagedRequiredDelay\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"caller\", internalType: \"address\", type: \"address\" }],\n    name: \"AccessManagedUnauthorized\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"lengthA\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"lengthB\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ArrayLengthMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"returnData\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC1155InsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"approver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidApprover\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"idsLength\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"valuesLength\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC1155InvalidArrayLength\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"operator\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidOperator\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"receiver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidReceiver\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"sender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidSender\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"owner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1155MissingApprovalForAll\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC20TransferSlippage\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  { type: \"error\", inputs: [], name: \"ETHTransferFailed\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"IncorrectAmountSent\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidRecipient\" },\n  { type: \"error\", inputs: [], name: \"InvalidShortString\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidTokenPrice\" },\n  { type: \"error\", inputs: [], name: \"NoUriForNonexistentToken\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"handler\", internalType: \"address\", type: \"address\" }],\n    name: \"NotARedeemHandler\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"str\", internalType: \"string\", type: \"string\" }],\n    name: \"StringTooLong\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenAlreadyCreated\" },\n  { type: \"error\", inputs: [], name: \"TokenDoesNotExist\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"storedTokenAddress\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"expectedTokenAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    name: \"TokenMismatch\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenNotMintable\" }\n];\nvar zoraMints1155Address = {\n  7777777: \"0x7777777d57c1C6e472fa379b7b3B6c6ba3835073\",\n  999999999: \"0x7777777d57c1C6e472fa379b7b3B6c6ba3835073\"\n};\nvar zoraMints1155Config = {\n  address: zoraMints1155Address,\n  abi: zoraMints1155ABI\n};\nvar zoraMintsManagerImplABI = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_premintExecutor\",\n        internalType: \"contract IZoraCreator1155PremintExecutorAllVersions\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"callFrom\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"call\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"callWithTransferTokens\",\n    outputs: [\n      { name: \"success\", internalType: \"bool\", type: \"bool\" },\n      { name: \"result\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"bytes4\", type: \"bytes4\" }\n    ],\n    name: \"canCall\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"zoraCreator1155Contract\",\n        internalType: \"contract IMintWithSparks\",\n        type: \"address\"\n      },\n      { name: \"minter\", internalType: \"contract IMinter1155\", type: \"address\" },\n      {\n        name: \"zoraCreator1155TokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      {\n        name: \"collectMintArguments\",\n        internalType: \"struct ICollectWithZoraSparks.CollectMintArguments\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"mintRewardsRecipients\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          },\n          { name: \"minterArguments\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"mintComment\", internalType: \"string\", type: \"string\" }\n        ]\n      }\n    ],\n    name: \"collect\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractWithAdditionalAdminsCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"additionalAdmins\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      },\n      { name: \"tokenContract\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"premintConfig\",\n        internalType: \"struct PremintConfigEncoded\",\n        type: \"tuple\",\n        components: [\n          { name: \"uid\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"version\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"deleted\", internalType: \"bool\", type: \"bool\" },\n          { name: \"tokenConfig\", internalType: \"bytes\", type: \"bytes\" },\n          {\n            name: \"premintConfigVersion\",\n            internalType: \"bytes32\",\n            type: \"bytes32\"\n          }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" },\n      {\n        name: \"mintArguments\",\n        internalType: \"struct MintArguments\",\n        type: \"tuple\",\n        components: [\n          { name: \"mintRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"mintComment\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"mintRewardsRecipients\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      },\n      { name: \"firstMinter\", internalType: \"address\", type: \"address\" },\n      { name: \"signerContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"collectPremint\",\n    outputs: [\n      {\n        name: \"result\",\n        internalType: \"struct PremintResult\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"createdNewContract\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"contractConfig\",\n        internalType: \"struct ContractCreationConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAdmin\", internalType: \"address\", type: \"address\" },\n          { name: \"contractURI\", internalType: \"string\", type: \"string\" },\n          { name: \"contractName\", internalType: \"string\", type: \"string\" }\n        ]\n      },\n      {\n        name: \"premintConfig\",\n        internalType: \"struct PremintConfigV2\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"tokenConfig\",\n            internalType: \"struct TokenCreationConfigV2\",\n            type: \"tuple\",\n            components: [\n              { name: \"tokenURI\", internalType: \"string\", type: \"string\" },\n              { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" },\n              {\n                name: \"maxTokensPerAddress\",\n                internalType: \"uint64\",\n                type: \"uint64\"\n              },\n              { name: \"pricePerToken\", internalType: \"uint96\", type: \"uint96\" },\n              { name: \"mintStart\", internalType: \"uint64\", type: \"uint64\" },\n              { name: \"mintDuration\", internalType: \"uint64\", type: \"uint64\" },\n              { name: \"royaltyBPS\", internalType: \"uint32\", type: \"uint32\" },\n              {\n                name: \"payoutRecipient\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              {\n                name: \"fixedPriceMinter\",\n                internalType: \"address\",\n                type: \"address\"\n              },\n              {\n                name: \"createReferral\",\n                internalType: \"address\",\n                type: \"address\"\n              }\n            ]\n          },\n          { name: \"uid\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"version\", internalType: \"uint32\", type: \"uint32\" },\n          { name: \"deleted\", internalType: \"bool\", type: \"bool\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" },\n      {\n        name: \"mintArguments\",\n        internalType: \"struct MintArguments\",\n        type: \"tuple\",\n        components: [\n          { name: \"mintRecipient\", internalType: \"address\", type: \"address\" },\n          { name: \"mintComment\", internalType: \"string\", type: \"string\" },\n          {\n            name: \"mintRewardsRecipients\",\n            internalType: \"address[]\",\n            type: \"address[]\"\n          }\n        ]\n      },\n      { name: \"signerContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"collectPremintV2\",\n    outputs: [\n      {\n        name: \"result\",\n        internalType: \"struct PremintResult\",\n        type: \"tuple\",\n        components: [\n          { name: \"contractAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"createdNewContract\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"tokenConfig\",\n        internalType: \"struct TokenConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"price\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"redeemHandler\", internalType: \"address\", type: \"address\" }\n        ]\n      },\n      { name: \"defaultMintable\", internalType: \"bool\", type: \"bool\" }\n    ],\n    name: \"createToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"minterArguments\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"decodeMintRecipientAndComment\",\n    outputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"mintComment\", internalType: \"string\", type: \"string\" }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"getEthPrice\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"defaultOwner\", internalType: \"address\", type: \"address\" },\n      { name: \"zoraSparksSalt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"zoraSparksCreationCode\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"initialEthTokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"initialEthTokenPrice\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"newBaseURI\", internalType: \"string\", type: \"string\" },\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"initialize\",\n    outputs: [\n      {\n        name: \"mints\",\n        internalType: \"contract IZoraSparks1155\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"mintWithERC20\",\n    outputs: [\n      { name: \"mintableTokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"mintWithEth\",\n    outputs: [\n      { name: \"mintableTokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"mintableEthToken\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"values\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155BatchReceived\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"onERC1155Received\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"setDefaultMintable\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"newBaseURI\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"tokenIdsToNotifyUpdate\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\"\n      }\n    ],\n    name: \"setMetadataURIs\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"uri\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zoraSparks1155\",\n    outputs: [\n      { name: \"\", internalType: \"contract IZoraSparks1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenIds\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: true\n      },\n      {\n        name: \"quantities\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      },\n      {\n        name: \"zoraCreator1155Contract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"zoraCreator1155TokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      }\n    ],\n    name: \"Collected\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"DefaultMintableTokenSet\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenContract\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"MintComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"contractURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"baseURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"URIsUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"lengthA\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"lengthB\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ArrayLengthMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"user\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Burn_NotOwnerOrApproved\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"reason\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"Call_TokenIdMismatch\" },\n  { type: \"error\", inputs: [], name: \"CallerNotZoraCreator1155\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"totalMinted\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"maxSupply\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"CannotMintMoreTokens\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"proposedAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Config_TransferHookNotSupported\"\n  },\n  { type: \"error\", inputs: [], name: \"Create2EmptyBytecode\" },\n  { type: \"error\", inputs: [], name: \"Create2FailedDeployment\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"Create2InsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"DefaultOwnerCannotBeZero\" },\n  { type: \"error\", inputs: [], name: \"ERC1155BatchReceivedCallFailed\" },\n  { type: \"error\", inputs: [], name: \"ERC1155_MINT_TO_ZERO_ADDRESS\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"ERC20TransferSlippage\" },\n  { type: \"error\", inputs: [], name: \"ETHTransferFailed\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ETHWithdrawFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"FirstMinterAddressZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"contractValue\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"FundsWithdrawInsolvent\"\n  },\n  { type: \"error\", inputs: [], name: \"IncorrectAmountSent\" },\n  { type: \"error\", inputs: [], name: \"InvalidAdminAction\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"merkleProof\", internalType: \"bytes32[]\", type: \"bytes32[]\" },\n      { name: \"merkleRoot\", internalType: \"bytes32\", type: \"bytes32\" }\n    ],\n    name: \"InvalidMerkleProof\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidMintSchedule\" },\n  { type: \"error\", inputs: [], name: \"InvalidOwnerForAssociatedZoraSparks\" },\n  { type: \"error\", inputs: [], name: \"InvalidPremintVersion\" },\n  { type: \"error\", inputs: [], name: \"InvalidRecipient\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignatureVersion\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"magicValue\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"InvalidSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidTokenPrice\" },\n  { type: \"error\", inputs: [], name: \"MintNotYetStarted\" },\n  { type: \"error\", inputs: [], name: \"MintWithSparksNotSupportedOnContract\" },\n  { type: \"error\", inputs: [], name: \"Mint_InsolventSaleTransfer\" },\n  { type: \"error\", inputs: [], name: \"Mint_InvalidMintArrayLength\" },\n  { type: \"error\", inputs: [], name: \"Mint_TokenIDMintNotAllowed\" },\n  { type: \"error\", inputs: [], name: \"Mint_UnknownCommand\" },\n  { type: \"error\", inputs: [], name: \"Mint_ValueTransferFail\" },\n  { type: \"error\", inputs: [], name: \"MinterContractAlreadyExists\" },\n  { type: \"error\", inputs: [], name: \"MinterContractDoesNotExist\" },\n  { type: \"error\", inputs: [], name: \"NewOwnerNeedsToBeAdmin\" },\n  { type: \"error\", inputs: [], name: \"NoTokensTransferred\" },\n  { type: \"error\", inputs: [], name: \"NoUriForNonexistentToken\" },\n  { type: \"error\", inputs: [], name: \"NonEthRedemption\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"handler\", internalType: \"address\", type: \"address\" }],\n    name: \"NotARedeemHandler\"\n  },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"NotSelfCall\" },\n  { type: \"error\", inputs: [], name: \"NotZoraSparks1155\" },\n  { type: \"error\", inputs: [], name: \"OnlyTransfersFromZoraSparks\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"PremintDeleted\" },\n  { type: \"error\", inputs: [], name: \"PremintExecutorCannotBeZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"amount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ProtocolRewardsWithdrawFailed\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"Renderer_NotValidRendererContract\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"targetContract\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"Sale_CannotCallNonSalesContract\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenAlreadyCreated\" },\n  { type: \"error\", inputs: [], name: \"TokenDoesNotExist\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"actual\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"TokenIdMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"storedTokenAddress\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"expectedTokenAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    name: \"TokenMismatch\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenNotMintable\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"selector\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"UnknownUserAction\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"string\", type: \"string\" },\n      { name: \"actual\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"limit\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"requestedAmount\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserExceedsMintLimit\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"user\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"role\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"UserMissingRoleForToken\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"premintSignerContractFailedToRecoverSigner\"\n  },\n  { type: \"error\", inputs: [], name: \"premintSignerContractNotAContract\" }\n];\nvar zoraMintsManagerImplAddress = {\n  7777777: \"0x77777770cA269366c7208aFcF36FE2C6F7f7608B\",\n  999999999: \"0x77777770cA269366c7208aFcF36FE2C6F7f7608B\"\n};\nvar zoraMintsManagerImplConfig = {\n  address: zoraMintsManagerImplAddress,\n  abi: zoraMintsManagerImplABI\n};\nvar zoraSparks1155ABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"ETH_ADDRESS\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"MINIMUM_ERC20_PRICE\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"MINIMUM_ETH_PRICE\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"NAME\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"authority\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"balanceOfAccount\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"accounts\", internalType: \"address[]\", type: \"address[]\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    name: \"balanceOfBatch\",\n    outputs: [{ name: \"\", internalType: \"uint256[]\", type: \"uint256[]\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"tokenConfig\",\n        internalType: \"struct TokenConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"price\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"redeemHandler\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"createToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"eip712Domain\",\n    outputs: [\n      { name: \"fields\", internalType: \"bytes1\", type: \"bytes1\" },\n      { name: \"name\", internalType: \"string\", type: \"string\" },\n      { name: \"version\", internalType: \"string\", type: \"string\" },\n      { name: \"chainId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"verifyingContract\", internalType: \"address\", type: \"address\" },\n      { name: \"salt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"extensions\", internalType: \"uint256[]\", type: \"uint256[]\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"getTokenConfig\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct TokenConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"price\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"redeemHandler\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"hashPermitBatch\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    name: \"hashPermitSingle\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"operator\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"isConsumingScheduledOp\",\n    outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"isValidSignatureTransferBatch\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"isValidSignatureTransferSingle\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"mintTokenWithERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"mintTokenWithEth\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"owner\", internalType: \"address\", type: \"address\" },\n      { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"nonceUsed\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"newBaseURI\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"notifyURIsUpdated\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newUri\", internalType: \"string\", type: \"string\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"notifyUpdatedTokenURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitSingle\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitSafeTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      {\n        name: \"permit\",\n        internalType: \"struct IZoraSparks1155Managed.PermitBatch\",\n        type: \"tuple\",\n        components: [\n          { name: \"owner\", internalType: \"address\", type: \"address\" },\n          { name: \"to\", internalType: \"address\", type: \"address\" },\n          { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n          { name: \"safeTransferData\", internalType: \"bytes\", type: \"bytes\" },\n          { name: \"deadline\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"nonce\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      },\n      { name: \"signature\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"permitSafeTransferBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"redeem\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct Redemption\",\n        type: \"tuple\",\n        components: [\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"valueRedeemed\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenIds\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"quantities\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"redeemBatch\",\n    outputs: [\n      {\n        name: \"redemptions\",\n        internalType: \"struct Redemption[]\",\n        type: \"tuple[]\",\n        components: [\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"valueRedeemed\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"ids\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"values\", internalType: \"uint256[]\", type: \"uint256[]\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"safeBatchTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"from\", internalType: \"address\", type: \"address\" },\n      { name: \"to\", internalType: \"address\", type: \"address\" },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"value\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"approved\", internalType: \"bool\", type: \"bool\" }\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newAuthority\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"setAuthority\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"tokenExists\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"tokenPrice\",\n    outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"uri\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"account\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"approved\", internalType: \"bool\", type: \"bool\", indexed: false }\n    ],\n    name: \"ApprovalForAll\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"authority\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"AuthorityUpdated\"\n  },\n  { type: \"event\", anonymous: false, inputs: [], name: \"ContractURIUpdated\" },\n  { type: \"event\", anonymous: false, inputs: [], name: \"EIP712DomainChanged\" },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"price\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"tokenAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"TokenCreated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      {\n        name: \"ids\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      },\n      {\n        name: \"values\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      }\n    ],\n    name: \"TransferBatch\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"from\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: false },\n      {\n        name: \"tokenIds\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      },\n      {\n        name: \"quantities\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\",\n        indexed: false\n      },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\", indexed: false }\n    ],\n    name: \"TransferBatchWithData\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"operator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      { name: \"from\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: true },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\", indexed: false },\n      {\n        name: \"value\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"TransferSingle\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"from\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      { name: \"to\", internalType: \"address\", type: \"address\", indexed: false },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\", indexed: false }\n    ],\n    name: \"TransferSingleWithData\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      { name: \"value\", internalType: \"string\", type: \"string\", indexed: false },\n      { name: \"id\", internalType: \"uint256\", type: \"uint256\", indexed: true }\n    ],\n    name: \"URI\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"contractURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"baseURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"URIsUpdated\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"authority\", internalType: \"address\", type: \"address\" }],\n    name: \"AccessManagedInvalidAuthority\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"delay\", internalType: \"uint32\", type: \"uint32\" }\n    ],\n    name: \"AccessManagedRequiredDelay\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"caller\", internalType: \"address\", type: \"address\" }],\n    name: \"AccessManagedUnauthorized\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"lengthA\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"lengthB\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ArrayLengthMismatch\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"returnData\", internalType: \"bytes\", type: \"bytes\" }],\n    name: \"CallFailed\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"sender\", internalType: \"address\", type: \"address\" },\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC1155InsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"approver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidApprover\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"idsLength\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"valuesLength\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ERC1155InvalidArrayLength\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"operator\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidOperator\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"receiver\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidReceiver\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"sender\", internalType: \"address\", type: \"address\" }],\n    name: \"ERC1155InvalidSender\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"operator\", internalType: \"address\", type: \"address\" },\n      { name: \"owner\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1155MissingApprovalForAll\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC20TransferSlippage\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"deadline\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"ERC2612ExpiredSignature\"\n  },\n  { type: \"error\", inputs: [], name: \"ETHTransferFailed\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"IncorrectAmountSent\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"account\", internalType: \"address\", type: \"address\" },\n      { name: \"currentNonce\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"InvalidAccountNonce\"\n  },\n  { type: \"error\", inputs: [], name: \"InvalidRecipient\" },\n  { type: \"error\", inputs: [], name: \"InvalidShortString\" },\n  { type: \"error\", inputs: [], name: \"InvalidSignature\" },\n  { type: \"error\", inputs: [], name: \"InvalidTokenPrice\" },\n  { type: \"error\", inputs: [], name: \"NoUriForNonexistentToken\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"handler\", internalType: \"address\", type: \"address\" }],\n    name: \"NotARedeemHandler\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"str\", internalType: \"string\", type: \"string\" }],\n    name: \"StringTooLong\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenAlreadyCreated\" },\n  { type: \"error\", inputs: [], name: \"TokenDoesNotExist\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"storedTokenAddress\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"expectedTokenAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    name: \"TokenMismatch\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenNotMintable\" }\n];\nvar zoraSparks1155Address = {\n  8453: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n  84532: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n  7777777: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n  999999999: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\"\n};\nvar zoraSparks1155Config = {\n  address: zoraSparks1155Address,\n  abi: zoraSparks1155ABI\n};\nvar zoraSparksManagerImplABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"caller\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"bytes4\", type: \"bytes4\" }\n    ],\n    name: \"canCall\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"tokenConfig\",\n        internalType: \"struct TokenConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"price\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"redeemHandler\", internalType: \"address\", type: \"address\" }\n        ]\n      }\n    ],\n    name: \"createToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"defaultOwner\", internalType: \"address\", type: \"address\" },\n      { name: \"zoraSparksSalt\", internalType: \"bytes32\", type: \"bytes32\" },\n      { name: \"zoraSparksCreationCode\", internalType: \"bytes\", type: \"bytes\" },\n      { name: \"initialEthTokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"initialEthTokenPrice\",\n        internalType: \"uint256\",\n        type: \"uint256\"\n      },\n      { name: \"newBaseURI\", internalType: \"string\", type: \"string\" },\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"initialize\",\n    outputs: [\n      {\n        name: \"sparks\",\n        internalType: \"contract IZoraSparks1155\",\n        type: \"address\"\n      }\n    ],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"tokenAddress\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"mintWithERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"recipient\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"mintWithEth\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newContractURI\", internalType: \"string\", type: \"string\" },\n      { name: \"newBaseURI\", internalType: \"string\", type: \"string\" },\n      {\n        name: \"tokenIdsToNotifyUpdate\",\n        internalType: \"uint256[]\",\n        type: \"uint256[]\"\n      }\n    ],\n    name: \"setMetadataURIs\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"uri\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"zoraSparks1155\",\n    outputs: [\n      { name: \"\", internalType: \"contract IZoraSparks1155\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"contractURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      },\n      {\n        name: \"baseURI\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"URIsUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"lengthA\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"lengthB\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"ArrayLengthMismatch\"\n  },\n  { type: \"error\", inputs: [], name: \"Create2EmptyBytecode\" },\n  { type: \"error\", inputs: [], name: \"Create2FailedDeployment\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"balance\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"needed\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"Create2InsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"DefaultOwnerCannotBeZero\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"ERC20TransferSlippage\" },\n  { type: \"error\", inputs: [], name: \"ETHTransferFailed\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"IncorrectAmountSent\" },\n  { type: \"error\", inputs: [], name: \"InvalidAdminAction\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"InvalidOwnerForAssociatedZoraSparks\" },\n  { type: \"error\", inputs: [], name: \"InvalidRecipient\" },\n  { type: \"error\", inputs: [], name: \"InvalidTokenPrice\" },\n  { type: \"error\", inputs: [], name: \"NoUriForNonexistentToken\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"handler\", internalType: \"address\", type: \"address\" }],\n    name: \"NotARedeemHandler\"\n  },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"PremintExecutorCannotBeZero\" },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"token\", internalType: \"address\", type: \"address\" }],\n    name: \"SafeERC20FailedOperation\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenAlreadyCreated\" },\n  { type: \"error\", inputs: [], name: \"TokenDoesNotExist\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"storedTokenAddress\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"expectedTokenAddress\",\n        internalType: \"address\",\n        type: \"address\"\n      }\n    ],\n    name: \"TokenMismatch\"\n  },\n  { type: \"error\", inputs: [], name: \"TokenNotMintable\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"expected\", internalType: \"string\", type: \"string\" },\n      { name: \"actual\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"UpgradeToMismatchedContractName\"\n  }\n];\nvar zoraSparksManagerImplAddress = {\n  8453: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n  84532: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n  7777777: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n  999999999: \"0x77777779acd6a96C0c57272112921A0b833c38fD\"\n};\nvar zoraSparksManagerImplConfig = {\n  address: zoraSparksManagerImplAddress,\n  abi: zoraSparksManagerImplABI\n};\nvar zoraTimedSaleStrategyABI = [\n  { type: \"constructor\", inputs: [], stateMutability: \"nonpayable\" },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"UPGRADE_INTERFACE_VERSION\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"acceptOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"erc20zAddress\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"calculateERC20zActivate\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IZoraTimedSaleStrategy.ERC20zActivate\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"finalTotalERC20ZSupply\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"erc20Reserve\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"erc20Liquidity\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"excessERC20\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"excessERC1155\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"additionalERC1155ToMint\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"final1155Supply\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"quantity\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"computeRewards\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IZoraTimedSaleStrategy.RewardsSettings\",\n        type: \"tuple\",\n        components: [\n          { name: \"totalReward\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"creatorReward\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"createReferralReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"mintReferralReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"marketReward\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"zoraReward\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"quantity\", internalType: \"uint256\", type: \"uint256\" }],\n    name: \"computeRewardsV2\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IZoraTimedSaleStrategy.RewardsSettings\",\n        type: \"tuple\",\n        components: [\n          { name: \"totalReward\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"creatorReward\", internalType: \"uint256\", type: \"uint256\" },\n          {\n            name: \"createReferralReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          {\n            name: \"mintReferralReward\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"marketReward\", internalType: \"uint256\", type: \"uint256\" },\n          { name: \"zoraReward\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractName\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"erc20zImpl\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"getCreateReferral\",\n    outputs: [\n      { name: \"createReferral\", internalType: \"address\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"implementation\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"_defaultOwner\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"_zoraRewardRecipient\",\n        internalType: \"address\",\n        type: \"address\"\n      },\n      { name: \"_erc20zImpl\", internalType: \"address\", type: \"address\" },\n      {\n        name: \"_protocolRewards\",\n        internalType: \"contract IProtocolRewards\",\n        type: \"address\"\n      }\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"launchMarket\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"mintTo\", internalType: \"address\", type: \"address\" },\n      { name: \"quantity\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"mintReferral\", internalType: \"address\", type: \"address\" },\n      { name: \"comment\", internalType: \"string\", type: \"string\" }\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"pendingOwner\",\n    outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"protocolRewards\",\n    outputs: [\n      { name: \"\", internalType: \"contract IProtocolRewards\", type: \"address\" }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"\", internalType: \"address\", type: \"address\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"requestMint\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct ICreatorCommands.CommandSet\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"commands\",\n            internalType: \"struct ICreatorCommands.Command[]\",\n            type: \"tuple[]\",\n            components: [\n              {\n                name: \"method\",\n                internalType: \"enum ICreatorCommands.CreatorActions\",\n                type: \"uint8\"\n              },\n              { name: \"args\", internalType: \"bytes\", type: \"bytes\" }\n            ]\n          },\n          { name: \"at\", internalType: \"uint256\", type: \"uint256\" }\n        ]\n      }\n    ],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"sale\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IZoraTimedSaleStrategy.SaleStorage\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"erc20zAddress\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"poolAddress\", internalType: \"address\", type: \"address\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"secondaryActivated\", internalType: \"bool\", type: \"bool\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"collection\", internalType: \"address\", type: \"address\" },\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" }\n    ],\n    name: \"saleV2\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct IZoraTimedSaleStrategy.SaleData\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"marketCountdown\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"secondaryActivated\", internalType: \"bool\", type: \"bool\" },\n          {\n            name: \"minimumMarketEth\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"poolAddress\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"erc20zAddress\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"name\", internalType: \"string\", type: \"string\" },\n          { name: \"symbol\", internalType: \"string\", type: \"string\" }\n        ]\n      }\n    ],\n    stateMutability: \"view\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct IZoraTimedSaleStrategy.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"name\", internalType: \"string\", type: \"string\" },\n          { name: \"symbol\", internalType: \"string\", type: \"string\" }\n        ]\n      }\n    ],\n    name: \"setSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct IZoraTimedSaleStrategy.SalesConfigV2\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"marketCountdown\", internalType: \"uint64\", type: \"uint64\" },\n          {\n            name: \"minimumMarketEth\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"name\", internalType: \"string\", type: \"string\" },\n          { name: \"symbol\", internalType: \"string\", type: \"string\" }\n        ]\n      }\n    ],\n    name: \"setSaleV2\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"recipient\", internalType: \"address\", type: \"address\" }],\n    name: \"setZoraRewardRecipient\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"interfaceId\", internalType: \"bytes4\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n    stateMutability: \"pure\"\n  },\n  {\n    type: \"function\",\n    inputs: [{ name: \"newOwner\", internalType: \"address\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"amount0Delta\", internalType: \"int256\", type: \"int256\" },\n      { name: \"amount1Delta\", internalType: \"int256\", type: \"int256\" },\n      { name: \"\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"uniswapV3SwapCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"tokenId\", internalType: \"uint256\", type: \"uint256\" },\n      { name: \"newStartTime\", internalType: \"uint64\", type: \"uint64\" },\n      { name: \"newMarketCountdown\", internalType: \"uint64\", type: \"uint64\" }\n    ],\n    name: \"updateSale\",\n    outputs: [],\n    stateMutability: \"nonpayable\"\n  },\n  {\n    type: \"function\",\n    inputs: [\n      { name: \"newImplementation\", internalType: \"address\", type: \"address\" },\n      { name: \"data\", internalType: \"bytes\", type: \"bytes\" }\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"version\",\n        internalType: \"uint64\",\n        type: \"uint64\",\n        indexed: false\n      }\n    ],\n    name: \"Initialized\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"erc20zAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"poolAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      }\n    ],\n    name: \"MarketLaunched\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"sender\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"quantity\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"comment\",\n        internalType: \"string\",\n        type: \"string\",\n        indexed: false\n      }\n    ],\n    name: \"MintComment\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferStarted\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"previousOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newOwner\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"OwnershipTransferred\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"salesConfig\",\n        internalType: \"struct IZoraTimedSaleStrategy.SalesConfig\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"name\", internalType: \"string\", type: \"string\" },\n          { name: \"symbol\", internalType: \"string\", type: \"string\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"erc20zAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"poolAddress\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"mintFee\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SaleSet\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"saleData\",\n        internalType: \"struct IZoraTimedSaleStrategy.SaleData\",\n        type: \"tuple\",\n        components: [\n          { name: \"saleStart\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"marketCountdown\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"saleEnd\", internalType: \"uint64\", type: \"uint64\" },\n          { name: \"secondaryActivated\", internalType: \"bool\", type: \"bool\" },\n          {\n            name: \"minimumMarketEth\",\n            internalType: \"uint256\",\n            type: \"uint256\"\n          },\n          { name: \"poolAddress\", internalType: \"address\", type: \"address\" },\n          {\n            name: \"erc20zAddress\",\n            internalType: \"address payable\",\n            type: \"address\"\n          },\n          { name: \"name\", internalType: \"string\", type: \"string\" },\n          { name: \"symbol\", internalType: \"string\", type: \"string\" }\n        ],\n        indexed: false\n      },\n      {\n        name: \"mintFee\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"SaleSetV2\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"implementation\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"Upgraded\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"prevRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"newRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      }\n    ],\n    name: \"ZoraRewardRecipientUpdated\"\n  },\n  {\n    type: \"event\",\n    anonymous: false,\n    inputs: [\n      {\n        name: \"collection\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: true\n      },\n      {\n        name: \"tokenId\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: true\n      },\n      {\n        name: \"creator\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"creatorReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"createReferral\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"createReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"mintReferral\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"mintReferralReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"market\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"marketReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      },\n      {\n        name: \"zoraRecipient\",\n        internalType: \"address\",\n        type: \"address\",\n        indexed: false\n      },\n      {\n        name: \"zoraReward\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n        indexed: false\n      }\n    ],\n    name: \"ZoraTimedSaleStrategyRewards\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressEmptyCode\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"AddressInsufficientBalance\"\n  },\n  { type: \"error\", inputs: [], name: \"AddressZero\" },\n  { type: \"error\", inputs: [], name: \"ERC1167FailedCreateClone\" },\n  {\n    type: \"error\",\n    inputs: [\n      { name: \"implementation\", internalType: \"address\", type: \"address\" }\n    ],\n    name: \"ERC1967InvalidImplementation\"\n  },\n  { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n  { type: \"error\", inputs: [], name: \"EndTimeCannotBeInThePast\" },\n  { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n  { type: \"error\", inputs: [], name: \"InsufficientFunds\" },\n  { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n  { type: \"error\", inputs: [], name: \"MarketAlreadyLaunched\" },\n  { type: \"error\", inputs: [], name: \"MarketMinimumNotReached\" },\n  { type: \"error\", inputs: [], name: \"MinimumMarketEthNotMet\" },\n  { type: \"error\", inputs: [], name: \"NeedsToBeAtLeastOneSaleToStartMarket\" },\n  { type: \"error\", inputs: [], name: \"NotInitializing\" },\n  { type: \"error\", inputs: [], name: \"OnlyZoraRewardRecipient\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"owner\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableInvalidOwner\"\n  },\n  {\n    type: \"error\",\n    inputs: [{ name: \"account\", internalType: \"address\", type: \"address\" }],\n    name: \"OwnableUnauthorizedAccount\"\n  },\n  { type: \"error\", inputs: [], name: \"ReentrancyGuardReentrantCall\" },\n  { type: \"error\", inputs: [], name: \"RequestMintInvalidUseMint\" },\n  { type: \"error\", inputs: [], name: \"ResetSaleNotAvailable\" },\n  { type: \"error\", inputs: [], name: \"SaleAlreadySet\" },\n  { type: \"error\", inputs: [], name: \"SaleEnded\" },\n  { type: \"error\", inputs: [], name: \"SaleHasNotStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleInProgress\" },\n  { type: \"error\", inputs: [], name: \"SaleNotSet\" },\n  { type: \"error\", inputs: [], name: \"SaleV2AlreadyStarted\" },\n  { type: \"error\", inputs: [], name: \"SaleV2Ended\" },\n  { type: \"error\", inputs: [], name: \"SaleV2NotSet\" },\n  { type: \"error\", inputs: [], name: \"StartTimeCannotBeAfterEndTime\" },\n  { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n  {\n    type: \"error\",\n    inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n    name: \"UUPSUnsupportedProxiableUUID\"\n  },\n  { type: \"error\", inputs: [], name: \"WrongValueSent\" },\n  {\n    type: \"error\",\n    inputs: [],\n    name: \"ZoraCreator1155ContractNeedsToSupportReduceSupply\"\n  }\n];\nvar zoraTimedSaleStrategyAddress = {\n  1: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  10: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  8453: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  42161: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  81457: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  84532: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  421614: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  7777777: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  11155111: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\",\n  999999999: \"0x777777722D078c97c6ad07d9f36801e653E356Ae\"\n};\nvar zoraTimedSaleStrategyConfig = {\n  address: zoraTimedSaleStrategyAddress,\n  abi: zoraTimedSaleStrategyABI\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/unit.js\nvar InvalidDecimalNumberError = class extends _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n  constructor({ value }) {\n    super(`Number \\`${value}\\` is not a valid decimal number.`, {\n      name: \"InvalidDecimalNumberError\"\n    });\n  }\n};\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/parseUnits.js\nfunction parseUnits(value, decimals) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n    throw new InvalidDecimalNumberError({ value });\n  let [integer, fraction = \"0\"] = value.split(\".\");\n  const negative = integer.startsWith(\"-\");\n  if (negative)\n    integer = integer.slice(1);\n  fraction = fraction.replace(/(0+)$/, \"\");\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1)\n      integer = `${BigInt(integer) + 1n}`;\n    fraction = \"\";\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [\n      fraction.slice(0, decimals - 1),\n      fraction.slice(decimals - 1, decimals),\n      fraction.slice(decimals)\n    ];\n    const rounded = Math.round(Number(`${unit}.${right}`));\n    if (rounded > 9)\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, \"0\");\n    else\n      fraction = `${left}${rounded}`;\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1);\n      integer = `${BigInt(integer) + 1n}`;\n    }\n    fraction = fraction.slice(0, decimals);\n  } else {\n    fraction = fraction.padEnd(decimals, \"0\");\n  }\n  return BigInt(`${negative ? \"-\" : \"\"}${integer}${fraction}`);\n}\n\n// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/parseEther.js\nfunction parseEther(ether, unit = \"wei\") {\n  return parseUnits(ether, _chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.etherUnits[unit]);\n}\n\n// src/types.ts\nvar PremintConfigVersion = /* @__PURE__ */ ((PremintConfigVersion2) => {\n  PremintConfigVersion2[\"V1\"] = \"1\";\n  PremintConfigVersion2[\"V2\"] = \"2\";\n  PremintConfigVersion2[\"V3\"] = \"3\";\n  return PremintConfigVersion2;\n})(PremintConfigVersion || {});\nvar emptyCommentIdentifier = () => {\n  const zeroAddress = \"0x0000000000000000000000000000000000000000\";\n  const zeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n  return {\n    commenter: zeroAddress,\n    contractAddress: zeroAddress,\n    tokenId: 0n,\n    nonce: zeroHash\n  };\n};\n\n// src/typedData.ts\nvar premintTypedDataDomain = ({\n  chainId,\n  version,\n  creator1155Contract: verifyingContract\n}) => ({\n  chainId,\n  name: \"Preminter\",\n  version,\n  verifyingContract\n});\nvar premintV1TypedDataType = {\n  CreatorAttribution: [\n    { name: \"tokenConfig\", type: \"TokenCreationConfig\" },\n    // unique id scoped to the contract and token to create.\n    // ensure that a signature can be replaced, as long as the replacement\n    // has the same uid, and a newer version.\n    { name: \"uid\", type: \"uint32\" },\n    { name: \"version\", type: \"uint32\" },\n    // if this update should result in the signature being deleted.\n    { name: \"deleted\", type: \"bool\" }\n  ],\n  TokenCreationConfig: [\n    { name: \"tokenURI\", type: \"string\" },\n    { name: \"maxSupply\", type: \"uint256\" },\n    { name: \"maxTokensPerAddress\", type: \"uint64\" },\n    { name: \"pricePerToken\", type: \"uint96\" },\n    { name: \"mintStart\", type: \"uint64\" },\n    { name: \"mintDuration\", type: \"uint64\" },\n    { name: \"royaltyMintSchedule\", type: \"uint32\" },\n    { name: \"royaltyBPS\", type: \"uint32\" },\n    { name: \"royaltyRecipient\", type: \"address\" },\n    { name: \"fixedPriceMinter\", type: \"address\" }\n  ]\n};\nvar encodeTokenConfigV1 = (config) => {\n  const abiItem = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.getAbiItem)({\n    abi: iPremintDefinitionsABI,\n    name: \"tokenConfigV1Definition\"\n  });\n  return (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeAbiParameters)(abiItem.inputs, [config]);\n};\nvar encodeTokenConfigV2 = (config) => {\n  const abiItem = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.getAbiItem)({\n    abi: iPremintDefinitionsABI,\n    name: \"tokenConfigV2Definition\"\n  });\n  return (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeAbiParameters)(abiItem.inputs, [config]);\n};\nvar encodeTokenConfigV3 = (config) => {\n  const abiItem = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.getAbiItem)({\n    abi: iPremintDefinitionsABI,\n    name: \"tokenConfigV3Definition\"\n  });\n  return (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeAbiParameters)(abiItem.inputs, [config]);\n};\nvar encodeTokenConfig = ({\n  tokenConfig,\n  premintConfigVersion\n}) => {\n  if (premintConfigVersion === \"1\" /* V1 */) {\n    return encodeTokenConfigV1(tokenConfig);\n  }\n  if (premintConfigVersion === \"2\" /* V2 */) {\n    return encodeTokenConfigV2(tokenConfig);\n  }\n  if (premintConfigVersion === \"3\" /* V3 */) {\n    return encodeTokenConfigV3(tokenConfig);\n  }\n  throw new Error(\"Invalid PremintConfigVersion: \" + premintConfigVersion);\n};\nvar encodePremintConfig = ({\n  premintConfig,\n  premintConfigVersion\n}) => {\n  const encodedTokenConfig = encodeTokenConfig({\n    premintConfigVersion,\n    tokenConfig: premintConfig.tokenConfig\n  });\n  return {\n    deleted: premintConfig.deleted,\n    uid: premintConfig.uid,\n    version: premintConfig.version,\n    premintConfigVersion: (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.toHex)(premintConfigVersion)),\n    tokenConfig: encodedTokenConfig\n  };\n};\nvar premintV1TypedDataDefinition = ({\n  chainId,\n  creator1155Contract,\n  message\n}) => ({\n  types: premintV1TypedDataType,\n  primaryType: \"CreatorAttribution\",\n  domain: premintTypedDataDomain({\n    chainId,\n    version: \"1\" /* V1 */,\n    creator1155Contract\n  }),\n  message\n});\nvar premintV2TypedDataType = {\n  CreatorAttribution: [\n    { name: \"tokenConfig\", type: \"TokenCreationConfig\" },\n    // unique id scoped to the contract and token to create.\n    // ensure that a signature can be replaced, as long as the replacement\n    // has the same uid, and a newer version.\n    { name: \"uid\", type: \"uint32\" },\n    { name: \"version\", type: \"uint32\" },\n    // if this update should result in the signature being deleted.\n    { name: \"deleted\", type: \"bool\" }\n  ],\n  TokenCreationConfig: [\n    { name: \"tokenURI\", type: \"string\" },\n    { name: \"maxSupply\", type: \"uint256\" },\n    { name: \"maxTokensPerAddress\", type: \"uint64\" },\n    { name: \"pricePerToken\", type: \"uint96\" },\n    { name: \"mintStart\", type: \"uint64\" },\n    { name: \"mintDuration\", type: \"uint64\" },\n    { name: \"royaltyBPS\", type: \"uint32\" },\n    { name: \"payoutRecipient\", type: \"address\" },\n    { name: \"fixedPriceMinter\", type: \"address\" },\n    { name: \"createReferral\", type: \"address\" }\n  ]\n};\nvar premintV2TypedDataDefinition = ({\n  chainId,\n  creator1155Contract,\n  message\n}) => ({\n  types: premintV2TypedDataType,\n  primaryType: \"CreatorAttribution\",\n  domain: premintTypedDataDomain({\n    chainId,\n    version: \"2\" /* V2 */,\n    creator1155Contract\n  }),\n  message\n});\nvar premintTypedDataDefinition = ({\n  verifyingContract,\n  chainId,\n  premintConfigVersion: version,\n  premintConfig\n}) => {\n  if (version === \"1\" /* V1 */)\n    return premintV1TypedDataDefinition({\n      chainId,\n      creator1155Contract: verifyingContract,\n      message: premintConfig\n    });\n  if (version === \"2\" /* V2 */) {\n    return premintV2TypedDataDefinition({\n      chainId,\n      creator1155Contract: verifyingContract,\n      message: premintConfig\n    });\n  }\n  throw new Error(`Invalid version ${version}`);\n};\nvar permitSafeTransferTypedDataType = {\n  PermitSafeTransfer: [\n    { name: \"owner\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"tokenId\", type: \"uint256\" },\n    { name: \"quantity\", type: \"uint256\" },\n    { name: \"safeTransferData\", type: \"bytes\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"deadline\", type: \"uint256\" }\n  ]\n};\nvar mintsSafeTransferTypedDataDefinition = ({\n  chainId,\n  message\n}) => ({\n  types: permitSafeTransferTypedDataType,\n  message,\n  primaryType: \"PermitSafeTransfer\",\n  domain: {\n    chainId,\n    name: \"Mints\",\n    version: \"1\",\n    verifyingContract: zoraMints1155Address[chainId]\n  }\n});\nvar permitSafeBatchTransferTypedDataType = {\n  Permit: [\n    {\n      name: \"owner\",\n      type: \"address\"\n    },\n    {\n      name: \"to\",\n      type: \"address\"\n    },\n    {\n      name: \"tokenIds\",\n      type: \"uint256[]\"\n    },\n    {\n      name: \"quantities\",\n      type: \"uint256[]\"\n    },\n    {\n      name: \"safeTransferData\",\n      type: \"bytes\"\n    },\n    {\n      name: \"nonce\",\n      type: \"uint256\"\n    },\n    {\n      name: \"deadline\",\n      type: \"uint256\"\n    }\n  ]\n};\nvar mintsSafeTransferBatchTypedDataDefinition = ({\n  chainId,\n  message\n}) => ({\n  types: permitSafeBatchTransferTypedDataType,\n  message,\n  primaryType: \"Permit\",\n  domain: {\n    chainId,\n    name: \"Mints\",\n    version: \"1\",\n    verifyingContract: zoraMints1155Address[chainId]\n  }\n});\nvar sponsoredSparksBatchTransferTypedDataType = {\n  SponsoredMintBatch: [\n    {\n      name: \"verifier\",\n      type: \"address\"\n    },\n    {\n      name: \"from\",\n      type: \"address\"\n    },\n    {\n      name: \"destination\",\n      type: \"address\"\n    },\n    {\n      name: \"data\",\n      type: \"bytes\"\n    },\n    {\n      name: \"expectedRedeemAmount\",\n      type: \"uint256\"\n    },\n    {\n      name: \"totalAmount\",\n      type: \"uint256\"\n    },\n    {\n      name: \"ids\",\n      type: \"uint256[]\"\n    },\n    {\n      name: \"quantities\",\n      type: \"uint256[]\"\n    },\n    {\n      name: \"nonce\",\n      type: \"uint256\"\n    },\n    {\n      name: \"deadline\",\n      type: \"uint256\"\n    }\n  ]\n};\nvar sponsoredSparksBatchTypedDataDefinition = ({\n  chainId,\n  message\n}) => ({\n  types: sponsoredSparksBatchTransferTypedDataType,\n  message,\n  primaryType: \"SponsoredMintBatch\",\n  domain: {\n    chainId,\n    name: \"SponsoredSparksSpender\",\n    version: \"1\",\n    verifyingContract: sponsoredSparksSpenderAddress[chainId]\n  }\n});\nvar commentIdentifierType = [\n  { name: \"contractAddress\", type: \"address\" },\n  { name: \"tokenId\", type: \"uint256\" },\n  { name: \"commenter\", type: \"address\" },\n  { name: \"nonce\", type: \"bytes32\" }\n];\nvar commentsDomain = ({\n  signingChainId,\n  destinationChainId\n}) => ({\n  chainId: signingChainId,\n  name: \"Comments\",\n  version: \"1\",\n  verifyingContract: commentsAddress[destinationChainId]\n});\nvar permitCommentTypedDataDefinition = (message, signingAccount) => {\n  const permitCommentTypedDataType = {\n    PermitComment: [\n      { name: \"contractAddress\", type: \"address\" },\n      { name: \"tokenId\", type: \"uint256\" },\n      { name: \"commenter\", type: \"address\" },\n      { name: \"replyTo\", type: \"CommentIdentifier\" },\n      { name: \"text\", type: \"string\" },\n      { name: \"deadline\", type: \"uint256\" },\n      { name: \"nonce\", type: \"bytes32\" },\n      { name: \"commenterSmartWallet\", type: \"address\" },\n      { name: \"referrer\", type: \"address\" },\n      { name: \"sourceChainId\", type: \"uint32\" },\n      { name: \"destinationChainId\", type: \"uint32\" }\n    ],\n    CommentIdentifier: commentIdentifierType\n  };\n  return {\n    types: permitCommentTypedDataType,\n    message,\n    primaryType: \"PermitComment\",\n    domain: commentsDomain({\n      signingChainId: message.sourceChainId,\n      destinationChainId: message.destinationChainId\n    }),\n    account: signingAccount || message.commenter\n  };\n};\nvar permitSparkCommentTypedDataDefinition = (message, signingAccount) => {\n  const permitSparkCommentTypedDataType = {\n    PermitSparkComment: [\n      { name: \"comment\", type: \"CommentIdentifier\" },\n      { name: \"sparker\", type: \"address\" },\n      { name: \"sparksQuantity\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n      { name: \"nonce\", type: \"bytes32\" },\n      { name: \"referrer\", type: \"address\" },\n      { name: \"sourceChainId\", type: \"uint32\" },\n      { name: \"destinationChainId\", type: \"uint32\" }\n    ],\n    CommentIdentifier: commentIdentifierType\n  };\n  return {\n    types: permitSparkCommentTypedDataType,\n    message,\n    primaryType: \"PermitSparkComment\",\n    domain: commentsDomain({\n      signingChainId: message.sourceChainId,\n      destinationChainId: message.destinationChainId\n    }),\n    account: signingAccount || message.sparker\n  };\n};\nvar sparkValue = () => parseEther(\"0.000001\");\nvar permitMintAndCommentTypedDataDefinition = (message, signingAccount) => {\n  const permitTimedSaleMintAndCommentTypedDataType = {\n    PermitTimedSaleMintAndComment: [\n      { name: \"commenter\", type: \"address\" },\n      { name: \"quantity\", type: \"uint256\" },\n      { name: \"collection\", type: \"address\" },\n      { name: \"tokenId\", type: \"uint256\" },\n      { name: \"mintReferral\", type: \"address\" },\n      { name: \"comment\", type: \"string\" },\n      { name: \"deadline\", type: \"uint256\" },\n      { name: \"nonce\", type: \"bytes32\" },\n      { name: \"sourceChainId\", type: \"uint32\" },\n      { name: \"destinationChainId\", type: \"uint32\" }\n    ]\n  };\n  const callerAndCommenterDomain = ({\n    signingChainId,\n    destinationChainId\n  }) => ({\n    name: \"CallerAndCommenter\",\n    version: \"1\",\n    chainId: signingChainId,\n    verifyingContract: callerAndCommenterAddress[destinationChainId]\n  });\n  return {\n    types: permitTimedSaleMintAndCommentTypedDataType,\n    message,\n    primaryType: \"PermitTimedSaleMintAndComment\",\n    domain: callerAndCommenterDomain({\n      signingChainId: message.sourceChainId,\n      destinationChainId: message.destinationChainId\n    }),\n    account: signingAccount || message.commenter\n  };\n};\nvar permitBuyOnSecondaryAndCommentTypedDataDefinition = (message, signingAccount) => {\n  const permitBuyOnSecondaryAndCommentTypedDataType = {\n    PermitBuyOnSecondaryAndComment: [\n      { name: \"commenter\", type: \"address\" },\n      { name: \"quantity\", type: \"uint256\" },\n      { name: \"collection\", type: \"address\" },\n      { name: \"tokenId\", type: \"uint256\" },\n      { name: \"maxEthToSpend\", type: \"uint256\" },\n      { name: \"sqrtPriceLimitX96\", type: \"uint160\" },\n      { name: \"comment\", type: \"string\" },\n      { name: \"deadline\", type: \"uint256\" },\n      { name: \"nonce\", type: \"bytes32\" },\n      { name: \"sourceChainId\", type: \"uint32\" },\n      { name: \"destinationChainId\", type: \"uint32\" }\n    ]\n  };\n  const callerAndCommenterDomain = ({\n    signingChainId,\n    destinationChainId\n  }) => ({\n    name: \"CallerAndCommenter\",\n    version: \"1\",\n    chainId: signingChainId,\n    verifyingContract: callerAndCommenterAddress[destinationChainId]\n  });\n  return {\n    types: permitBuyOnSecondaryAndCommentTypedDataType,\n    message,\n    primaryType: \"PermitBuyOnSecondaryAndComment\",\n    domain: callerAndCommenterDomain({\n      signingChainId: message.sourceChainId,\n      destinationChainId: message.destinationChainId\n    }),\n    account: signingAccount || message.commenter\n  };\n};\n\n// src/encoding.ts\nvar safeTransferSwapAbiParameters = [\n  { name: \"recipient\", internalType: \"address payable\", type: \"address\" },\n  { name: \"minEthToAcquire\", internalType: \"uint256\", type: \"uint256\" },\n  { name: \"sqrtPriceLimitX96\", internalType: \"uint160\", type: \"uint160\" }\n];\nvar buySupplyWithSwapRouterHookAbiParameters = [\n  { name: \"buyRecipient\", internalType: \"address\", type: \"address\" },\n  { name: \"swapRouterCall\", internalType: \"bytes\", type: \"bytes\" }\n];\nvar buySupplyWithSwapRouterHookReturnParameters = [\n  { name: \"amountCurrency\", internalType: \"uint256\", type: \"uint256\" },\n  { name: \"coinsPurchased\", internalType: \"uint256\", type: \"uint256\" }\n];\nvar encodeBuySupplyWithSwapRouterHookCalldata = (buyRecipient, swapRouterCall) => {\n  return (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeAbiParameters)(buySupplyWithSwapRouterHookAbiParameters, [\n    buyRecipient,\n    swapRouterCall\n  ]);\n};\nvar encodeBuySupplyWithSingleHopSwapRouterHookCall = ({\n  buyRecipient,\n  exactInputSingleParams,\n  chainId,\n  ethValue\n}) => {\n  const hook = buySupplyWithSwapRouterHookAddress[chainId];\n  const callToSwapRouter = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeFunctionData)({\n    abi: uniswapV3SwapRouterABI,\n    functionName: \"exactInputSingle\",\n    args: [\n      {\n        recipient: hook,\n        ...exactInputSingleParams\n      }\n    ]\n  });\n  return {\n    hook,\n    hookData: encodeBuySupplyWithSwapRouterHookCalldata(\n      buyRecipient,\n      callToSwapRouter\n    ),\n    value: ethValue\n  };\n};\nvar encodeBuySupplyWithMultiHopSwapRouterHookCall = ({\n  buyRecipient,\n  exactInputParams,\n  chainId,\n  ethValue\n}) => {\n  const hook = buySupplyWithSwapRouterHookAddress[chainId];\n  const callToSwapRouter = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeFunctionData)({\n    abi: uniswapV3SwapRouterABI,\n    functionName: \"exactInput\",\n    args: [\n      {\n        recipient: hook,\n        ...exactInputParams\n      }\n    ]\n  });\n  return {\n    hook,\n    hookData: encodeBuySupplyWithSwapRouterHookCalldata(\n      buyRecipient,\n      callToSwapRouter\n    ),\n    value: ethValue\n  };\n};\nvar decodeBuySupplyWithSwapRouterHookReturn = (returnData) => {\n  const result = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.decodeAbiParameters)(\n    buySupplyWithSwapRouterHookReturnParameters,\n    returnData\n  );\n  return {\n    amountCurrency: result[0],\n    coinsPurchased: result[1]\n  };\n};\nvar UNISWAP_V4_MULTICURVE_POOL_VERSION = 4;\nvar encodeMultiCurvePoolConfig = ({\n  currency,\n  tickLower,\n  tickUpper,\n  numDiscoveryPositions,\n  maxDiscoverySupplyShare\n}) => {\n  const abiItem = (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.getAbiItem)({\n    abi: poolConfigEncodingABI,\n    name: \"encodeMultiCurvePoolConfig\"\n  });\n  return (0,_chunk_NPNNGXR4_js__WEBPACK_IMPORTED_MODULE_0__.encodeAbiParameters)(abiItem.inputs, [\n    UNISWAP_V4_MULTICURVE_POOL_VERSION,\n    currency,\n    tickLower,\n    tickUpper,\n    numDiscoveryPositions,\n    maxDiscoverySupplyShare\n  ]);\n};\n\n// src/generated/1155.ts\nvar __exports = {};\n(0,_chunk_PR4QN5HX_js__WEBPACK_IMPORTED_MODULE_1__.__export)(__exports, {\n  addresses: () => addresses,\n  chainConfigs: () => chainConfigs\n});\nvar chainConfigs = {\n  1: {\n    FACTORY_OWNER: \"0xDB392f4391462d60B8B4413ef72018Ab595Af9D0\",\n    MINT_FEE_RECIPIENT: \"0xd1d1D4e36117aB794ec5d4c78cBD3a8904E691D0\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  10: {\n    FACTORY_OWNER: \"0x4c7f7b6067fac9a737ecf2ca1a733fc85dd65a2b\",\n    MINT_FEE_RECIPIENT: \"0x7A810DCd0f8d83B20212326813Db6EF7E9FD030c\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  999: {\n    FACTORY_OWNER: \"0xE84DBB2B25F761751231a9D0DAfbdD4dC3aa8252\",\n    MINT_FEE_RECIPIENT: \"0xE84DBB2B25F761751231a9D0DAfbdD4dC3aa8252\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  8453: {\n    FACTORY_OWNER: \"0x004d6611884B4A661749B64b2ADc78505c3e1AB3\",\n    MINT_FEE_RECIPIENT: \"0x7bf90111Ad7C22bec9E9dFf8A01A44713CC1b1B6\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  42161: {\n    FACTORY_OWNER: \"0xF7DafC329C93D84267c0E7B146C0bD68807f6A03\",\n    MINT_FEE_RECIPIENT: \"0x10Fb02A68C3EA8bD439A6f515dcE07CC049f5c94\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  81457: {\n    FACTORY_OWNER: \"0x5b297B1b87f8De28C9fA7AFe183Db9F9e6295523\",\n    MINT_FEE_RECIPIENT: \"0x72E6394056f9152D3a41e5A25De383c191D16134\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  84532: {\n    FACTORY_OWNER: \"0x5F14C23983c9e0840Dc60dA880349622f0785420\",\n    MINT_FEE_RECIPIENT: \"0x5F14C23983c9e0840Dc60dA880349622f0785420\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  421614: {\n    FACTORY_OWNER: \"0x256537b56007b32BabEB44E868EC8AA5cBF03D30\",\n    MINT_FEE_RECIPIENT: \"0x256537b56007b32BabEB44E868EC8AA5cBF03D30\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  7777777: {\n    FACTORY_OWNER: \"0xdEA20c96253dc2d64897D2b8d27A8d935dE74955\",\n    MINT_FEE_RECIPIENT: \"0xEcfc2ee50409E459c554a2b0376F882Ce916D853\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  11155111: {\n    FACTORY_OWNER: \"0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D\",\n    MINT_FEE_RECIPIENT: \"0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  168587773: {\n    FACTORY_OWNER: \"0x8cF22F26d528B09b3cc54b7ff956630Bf741b773\",\n    MINT_FEE_RECIPIENT: \"0x8cF22F26d528B09b3cc54b7ff956630Bf741b773\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  },\n  999999999: {\n    FACTORY_OWNER: \"0xdae22ce69Afcb7f4bc37D32E267645722949DE0E\",\n    MINT_FEE_RECIPIENT: \"0xdae22ce69Afcb7f4bc37D32E267645722949DE0E\",\n    PROTOCOL_REWARDS: \"0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B\"\n  }\n};\nvar addresses = {\n  1: {\n    CONTRACT_1155_IMPL: \"0x7FB277e8a6584D76bBbc72980719F36936825e29\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.0\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0x0379e37302e9d57fFd657F87e1180273826CE84F\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n    PREMINTER_IMPL: \"0xDfB3D291bA493e7a3c835F0EdBa0B1B52979609A\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x78964965cF77850224513a367f899435C5B69174\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730734767\n  },\n  10: {\n    CONTRACT_1155_IMPL: \"0xF77330C8b1c41f2e44470763Cf9E3ACa78Db4381\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0x2008C05685F9fA15BBD75d80e9A44ab0c7230577\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x3678862f04290E565cCA2EF163BAeb92Bb76790C\",\n    MERKLE_MINT_SALE_STRATEGY: \"0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8\",\n    PREMINTER_IMPL: \"0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1731019615\n  },\n  999: {\n    CONTRACT_1155_IMPL: \"0x2022AdEF470DA3543a19fac8c9be80618112704D\",\n    CONTRACT_1155_IMPL_VERSION: \"2.7.0\",\n    FACTORY_IMPL: \"0x4b0365Ec68C2D92Af2Fa56f120095F0859142Eff\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n    PREMINTER_IMPL: \"0x795Efc066f89DFB03048dDd0598F2D8521c99Df6\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x78964965cF77850224513a367f899435C5B69174\",\n    UPGRADE_GATE: \"0x0000000000000000000000000000000000000000\",\n    timestamp: 1704399834\n  },\n  8453: {\n    CONTRACT_1155_IMPL: \"0x5Eb5bABCEFEa846b220C82f222F00Df95934F5f0\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0x97898683c6950a986911fdfFEa12739bad5D2581\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n    PREMINTER_IMPL: \"0xDfB3D291bA493e7a3c835F0EdBa0B1B52979609A\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x78964965cF77850224513a367f899435C5B69174\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730931491\n  },\n  42161: {\n    CONTRACT_1155_IMPL: \"0xC04050e04708b33302E30E5A0fB1e8c38F4EBbB0\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0xe2606ac30752009ecec6FEaf5C2B4A6523256E7E\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xe770E6f19aecF8ef3145A50087999b5556aB3610\",\n    PREMINTER_IMPL: \"0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730931657\n  },\n  81457: {\n    CONTRACT_1155_IMPL: \"0x16cFE884B49E68Cae854f12Ea419Fb1F6Ad290A8\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0x23150f60E233F519A01C735C29c1591f9E8353dE\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xB9C997FcC46a27331CC986cc2416ee99C1d506c3\",\n    PREMINTER_IMPL: \"0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730931749\n  },\n  84532: {\n    CONTRACT_1155_IMPL: \"0x695C9A141748D308d26Bd4f8E9F9A5df5F0623f8\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0xd92F69d5581BF9536c77550aeA1d74DDaE88B5B7\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE\",\n    MERKLE_MINT_SALE_STRATEGY: \"0x3E8524770adD176bE381a0529E09f1c6c3502A5a\",\n    PREMINTER_IMPL: \"0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730928936\n  },\n  421614: {\n    CONTRACT_1155_IMPL: \"0x3Ed969bf88166B85608C13b633242611F6220a14\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0xA75f980Fdf9F02718423FDFDFf1fccc74bdDBa95\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xe770E6f19aecF8ef3145A50087999b5556aB3610\",\n    PREMINTER_IMPL: \"0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730928848\n  },\n  7777777: {\n    CONTRACT_1155_IMPL: \"0xDB07C4525E82340A27077Ad258160928f271BB7F\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0x517Ce60C6e66a4DB1ea705C98250770d01f9d0AE\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x04E2516A2c207E84a1839755675dfd8eF6302F0a\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7\",\n    PREMINTER_IMPL: \"0xa79928cCc270b0208e56BfF0e927ff55034e7C35\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x78964965cF77850224513a367f899435C5B69174\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730930939\n  },\n  11155111: {\n    CONTRACT_1155_IMPL: \"0x9b24FD165a371042e5CA81e8d066d25CAD11EDE7\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x777777E8850d8D6d98De2B5f64fae401F96eFF31\",\n    FACTORY_IMPL: \"0x3AE2804De4A54283601Db24a897856D9772eA0D8\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xe770E6f19aecF8ef3145A50087999b5556aB3610\",\n    PREMINTER_IMPL: \"0xa79928cCc270b0208e56BfF0e927ff55034e7C35\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1730928528\n  },\n  168587773: {\n    CONTRACT_1155_IMPL: \"0x192D663C3D6813a24a24582A76B8d872c4F6F7f9\",\n    CONTRACT_1155_IMPL_VERSION: \"2.12.3\",\n    ERC20_MINTER: \"0x0000000000000000000000000000000000000000\",\n    FACTORY_IMPL: \"0x46E772210f01647FA573b915bE287Ff9b65AD4B0\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0\",\n    MERKLE_MINT_SALE_STRATEGY: \"0xB9C997FcC46a27331CC986cc2416ee99C1d506c3\",\n    PREMINTER_IMPL: \"0xe3150ab94e3730D4B157ffD31Ad042323E122b4C\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614\",\n    UPGRADE_GATE: \"0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900\",\n    timestamp: 1722525339\n  },\n  999999999: {\n    CONTRACT_1155_IMPL: \"0x695C9A141748D308d26Bd4f8E9F9A5df5F0623f8\",\n    CONTRACT_1155_IMPL_VERSION: \"2.13.2\",\n    ERC20_MINTER: \"0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2\",\n    FACTORY_IMPL: \"0xd92F69d5581BF9536c77550aeA1d74DDaE88B5B7\",\n    FACTORY_PROXY: \"0x777777C338d93e2C7adf08D102d45CA7CC4Ed021\",\n    FIXED_PRICE_SALE_STRATEGY: \"0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A\",\n    MERKLE_MINT_SALE_STRATEGY: \"0x5e5fD4b758076BAD940db0284b711A67E8a3B88c\",\n    PREMINTER_IMPL: \"0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d\",\n    PREMINTER_PROXY: \"0x7777773606e7e46C8Ba8B98C08f5cD218e31d340\",\n    REDEEM_MINTER_FACTORY: \"0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6\",\n    UPGRADE_GATE: \"0x0000000000000000000000000000000000000000\",\n    timestamp: 1730928726\n  }\n};\n\n// src/generated/sparks.ts\nvar sparks_exports = {};\n(0,_chunk_PR4QN5HX_js__WEBPACK_IMPORTED_MODULE_1__.__export)(sparks_exports, {\n  addresses: () => addresses2,\n  chainConfigs: () => chainConfigs2\n});\nvar chainConfigs2 = {\n  1: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xC36442b4a4522E871399CD717aBDD847Ab11FE88\",\n    UNISWAP_SWAP_ROUTER: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n    PROXY_ADMIN: \"0xDB392f4391462d60B8B4413ef72018Ab595Af9D0\",\n    ZORA_RECIPIENT: \"0xd1d1D4e36117aB794ec5d4c78cBD3a8904E691D0\",\n    WETH: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n  },\n  10: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xC36442b4a4522E871399CD717aBDD847Ab11FE88\",\n    UNISWAP_SWAP_ROUTER: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n    PROXY_ADMIN: \"0x4c7f7b6067fac9a737ecf2ca1a733fc85dd65a2b\",\n    ZORA_RECIPIENT: \"0x7A810DCd0f8d83B20212326813Db6EF7E9FD030c\",\n    WETH: \"0x4200000000000000000000000000000000000006\"\n  },\n  8453: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1\",\n    UNISWAP_SWAP_ROUTER: \"0x2626664c2603336E57B271c5C0b26F421741e481\",\n    UNISWAP_V3_FACTORY: \"0x33128a8fC17869897dcE68Ed026d694621f6FDfD\",\n    UNISWAP_QUOTER_V2: \"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a\",\n    DOPPLER_AIRLOCK: \"0x660eAaEdEBc968f8f3694354FA8EC0b4c5Ba8D12\",\n    PROXY_ADMIN: \"0x004d6611884B4A661749B64b2ADc78505c3e1AB3\",\n    ZORA_RECIPIENT: \"0x7bf90111Ad7C22bec9E9dFf8A01A44713CC1b1B6\",\n    WETH: \"0x4200000000000000000000000000000000000006\",\n    UNISWAP_V4_POOL_MANAGER: \"0x498581ff718922c3f8e6a244956af099b2652b2b\",\n    UNISWAP_V4_POSITION_MANAGER: \"0x7c5f5a4bbd8fd63184577525326123b519429bdc\",\n    UNISWAP_PERMIT2: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n    UNISWAP_UNIVERSAL_ROUTER: \"0x6ff5693b99212da76ad316178a184ab56d299b43\"\n  },\n  42161: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xC36442b4a4522E871399CD717aBDD847Ab11FE88\",\n    UNISWAP_SWAP_ROUTER: \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\",\n    PROXY_ADMIN: \"0xF7DafC329C93D84267c0E7B146C0bD68807f6A03\",\n    ZORA_RECIPIENT: \"0x10Fb02A68C3EA8bD439A6f515dcE07CC049f5c94\",\n    WETH: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\"\n  },\n  81457: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xB218e4f7cF0533d4696fDfC419A0023D33345F28\",\n    UNISWAP_SWAP_ROUTER: \"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66\",\n    PROXY_ADMIN: \"0x5b297B1b87f8De28C9fA7AFe183Db9F9e6295523\",\n    ZORA_RECIPIENT: \"0x72E6394056f9152D3a41e5A25De383c191D16134\",\n    WETH: \"0x4300000000000000000000000000000000000004\"\n  },\n  84532: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0x27F971cb582BF9E50F397e4d29a5C7A34f11faA2\",\n    UNISWAP_SWAP_ROUTER: \"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4\",\n    UNISWAP_V3_FACTORY: \"0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24\",\n    UNISWAP_QUOTER_V2: \"0xC5290058841028F1614F3A6F0F5816cAd0df5E27\",\n    DOPPLER_AIRLOCK: \"0xa24E35a5d71d02a59b41E7c93567626302da1958\",\n    PROXY_ADMIN: \"0x5F14C23983c9e0840Dc60dA880349622f0785420\",\n    ZORA_RECIPIENT: \"0x5F14C23983c9e0840Dc60dA880349622f0785420\",\n    WETH: \"0x4200000000000000000000000000000000000006\",\n    UNISWAP_V4_POOL_MANAGER: \"0x05E73354cFDd6745C338b50BcFDfA3Aa6fA03408\",\n    UNISWAP_V4_POSITION_MANAGER: \"0x4b2c77d209d3405f41a037ec6c77f7f5b8e2ca80\",\n    UNISWAP_PERMIT2: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n    UNISWAP_UNIVERSAL_ROUTER: \"0x492E6456D9528771018DeB9E87ef7750EF184104\"\n  },\n  421614: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65\",\n    UNISWAP_SWAP_ROUTER: \"0x101F443B4d1b059569D643917553c771E1b9663E\",\n    PROXY_ADMIN: \"0x256537b56007b32BabEB44E868EC8AA5cBF03D30\",\n    ZORA_RECIPIENT: \"0x256537b56007b32BabEB44E868EC8AA5cBF03D30\",\n    WETH: \"0xc556bae1e86b2ae9c22ea5e036b07e55e7596074\"\n  },\n  7777777: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xbC91e8DfA3fF18De43853372A3d7dfe585137D78\",\n    UNISWAP_SWAP_ROUTER: \"0x7De04c96BE5159c3b5CeffC82aa176dc81281557\",\n    PROXY_ADMIN: \"0xdEA20c96253dc2d64897D2b8d27A8d935dE74955\",\n    ZORA_RECIPIENT: \"0xEcfc2ee50409E459c554a2b0376F882Ce916D853\",\n    WETH: \"0x4200000000000000000000000000000000000006\"\n  },\n  11155111: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0x1238536071E1c677A632429e3655c799b22cDA52\",\n    UNISWAP_SWAP_ROUTER: \"0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E\",\n    PROXY_ADMIN: \"0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D\",\n    ZORA_RECIPIENT: \"0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D\",\n    WETH: \"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9\"\n  },\n  11155420: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d\",\n    UNISWAP_SWAP_ROUTER: \"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4\",\n    PROXY_ADMIN: \"0xFA3748b2dcF94a9CBdb5087333E9F093476e8389\",\n    ZORA_RECIPIENT: \"0xFA3748b2dcF94a9CBdb5087333E9F093476e8389\",\n    WETH: \"0x4200000000000000000000000000000000000006\"\n  },\n  999999999: {\n    NONFUNGIBLE_POSITION_MANAGER: \"0xB8458EaAe43292e3c1F7994EFd016bd653d23c20\",\n    UNISWAP_SWAP_ROUTER: \"0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a\",\n    PROXY_ADMIN: \"0xdae22ce69Afcb7f4bc37D32E267645722949DE0E\",\n    ZORA_RECIPIENT: \"0xdae22ce69Afcb7f4bc37D32E267645722949DE0E\",\n    WETH: \"0x4200000000000000000000000000000000000006\"\n  }\n};\nvar addresses2 = {\n  10: {\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_MANAGER_IMPL: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_MANAGER_IMPL_VERSION: \"\",\n    SPONSORED_SPARKS_SPENDER: \"0x35ca784918bf11692708c1D530691704AAcEA95E\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  },\n  8453: {\n    MINTS_1155: \"0x0000000000000000000000000000000000000000\",\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0x0000000000000000000000000000000000000000\",\n    MINTS_MANAGER: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_1155: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n    SPARKS_MANAGER: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n    SPARKS_MANAGER_IMPL: \"0x122648369E390009F18c1B2b9B100AfB09B982fc\",\n    SPARKS_MANAGER_IMPL_VERSION: \"0.2.4\",\n    SPONSORED_SPARKS_SPENDER: \"0x6958A8866A40118e2CC21ab4752353835321b5e6\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  },\n  42161: {\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_MANAGER_IMPL: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_MANAGER_IMPL_VERSION: \"\",\n    SPONSORED_SPARKS_SPENDER: \"0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  },\n  81457: {\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_MANAGER_IMPL: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_MANAGER_IMPL_VERSION: \"\",\n    SPONSORED_SPARKS_SPENDER: \"0x786F0f6aE196715Cd6d65693f06DA57426ac8463\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  },\n  84532: {\n    MINTS_1155: \"0x0000000000000000000000000000000000000000\",\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0x0000000000000000000000000000000000000000\",\n    MINTS_MANAGER: \"0x0000000000000000000000000000000000000000\",\n    SPARKS_1155: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n    SPARKS_MANAGER: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n    SPARKS_MANAGER_IMPL: \"0x122648369E390009F18c1B2b9B100AfB09B982fc\",\n    SPARKS_MANAGER_IMPL_VERSION: \"0.2.4\",\n    SPONSORED_SPARKS_SPENDER: \"0x23150f60E233F519A01C735C29c1591f9E8353dE\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  },\n  7777777: {\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0xb0994EB9520C98C97e1F3953a5964535C2bd271A\",\n    SPARKS_MANAGER_IMPL: \"0xFB854463800d09B89682746c37A3AE696C92193D\",\n    SPARKS_MANAGER_IMPL_VERSION: \"0.1.4\",\n    SPARKS_MANAGER: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n    SPARKS_1155: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n    MINTS_MANAGER: \"0x77777770cA269366c7208aFcF36FE2C6F7f7608B\",\n    MINTS_1155: \"0x7777777d57c1C6e472fa379b7b3B6c6ba3835073\",\n    SPONSORED_SPARKS_SPENDER: \"0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  },\n  999999999: {\n    MINTS_ETH_UNWRAPPER_AND_CALLER: \"0xb0994EB9520C98C97e1F3953a5964535C2bd271A\",\n    SPARKS_MANAGER_IMPL: \"0xf7D8d07267E840aE466E5f2fe8b089F4DE79c7da\",\n    SPARKS_MANAGER_IMPL_VERSION: \"0.1.4\",\n    SPARKS_MANAGER: \"0x77777779acd6a96C0c57272112921A0b833c38fD\",\n    SPARKS_1155: \"0x7777777b3eA6C126942BB14dD5C3C11D365C385D\",\n    MINTS_MANAGER: \"0x77777770cA269366c7208aFcF36FE2C6F7f7608B\",\n    MINTS_1155: \"0x7777777d57c1C6e472fa379b7b3B6c6ba3835073\",\n    SPONSORED_SPARKS_SPENDER: \"0x3A98313fB00918a81d98f9986aED089365428293\",\n    SPONSORED_SPARKS_SPENDER_VERSION: \"2.0.0\"\n  }\n};\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@zoralabs/protocol-deployments/dist/index.js\n");

/***/ })

};
;